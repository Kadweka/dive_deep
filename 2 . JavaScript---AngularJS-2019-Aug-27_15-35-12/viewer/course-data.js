window.COURSE_DATA = {"language":"en-GB","lastDownload":"2019-08-27T18:34:52+03:00","title":"JavaScript - AngularJS","modules":[{"id":74,"name":"Week 1","status":"completed","unlockDate":null,"prereqs":[],"requirement":"one","sequential":false,"exportId":"i606efa8204d44dfb9dfdfeb8166a27ce","items":[{"id":2048,"title":"Monday: Angular Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe will be learning how to create basic Angular apps using Angular CLI over the next two weeks.\u003c/p\u003e\r\n\u003cp\u003eAngular can be written using Javascript, Typescript or Dart. In our case, we will write our Angular apps using Typescript, which you learned over the pre-course work.\u003c/p\u003e\r\n\u003cp\u003eAngular CLI is a command-line interface that helps us build Angular apps quickly.\u003c/p\u003e\r\n\u003ch3\u003ePlan\u003c/h3\u003e\r\n\u003cp\u003eThis week we will start off by learning how to add content and interactivity to our Angular app. To start with, we will use templates and directives to display data dynamically. Then, we'll organise our data by adding models to our application and use event binding for adding interactivity.\u003c/p\u003e\r\n\u003cp\u003eMonday and Tuesday have been structured to have slightly more content so that you have enough basic knowledge which will help you practice on building an Angular application from scratch. Additionally, it also gives you a chance to engage with the content more and better understand the week's concepts.\u003c/p\u003e\r\n\u003cp\u003eBy the end of the week, you will be able to\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a fully functional Angular Application.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive to display data\u003c/li\u003e\r\n\u003cli\u003eUse event binding to add interactivity to our application\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNext week we will explore the framework further by adding pages to our application using routers and so much more.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eThe week's independent project will be evaluated for the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse Angular CLI to create your Project.\u003c/li\u003e\r\n\u003cli\u003eCreate a model for your Quote objects.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive that highlights the quote that has the highest vote.\u003c/li\u003e\r\n\u003cli\u003eImplement a form component that has input sections for the quote.\u003c/li\u003e\r\n\u003cli\u003eInitialize an initial value of 0 for both upvote and downvote for each quote\u003c/li\u003e\r\n\u003cli\u003eAdd a custom pipe which displays the time passed since the quote was created.\u003c/li\u003e\r\n\u003cli\u003eMake a well-documented README that highlights:\r\n\u003col\u003e\r\n\u003cli\u003eAuthor\u003c/li\u003e\r\n\u003cli\u003eA brief description of the project \u003c/li\u003e\r\n\u003cli\u003eProgram set-up instructions\u003c/li\u003e\r\n\u003cli\u003eA link to the deployed site of your project\u003c/li\u003e\r\n\u003cli\u003eCopyright and License information\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAt least use bootstrap  to style you project\u003c/li\u003e\r\n\u003cli\u003eHigh-Quality  and portfolio-ready project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-angular-objectives"},{"id":1892,"title":"Monday: MVC Architecture with Angular","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOne of the popular ways of organising application is using the \u003c/span\u003e\u003cstrong\u003eMVC architecture\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Angular uses this architecture to organise its application. Let's look at what is MVC architecture in Angular.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eModel-view-controller, or MVC as its popularly known, is a software design pattern for developing web applications. This design pattern is made up of three parts:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003e Model\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for maintaining data\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eView\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e:Responsible for displaying data to the user\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eController\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for controlling the interaction between the Model and Views\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC design pattern separates the application's logic from the user interface.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC concept can be represented graphically as follows:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/MVC.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MVC\" width=\"561\" height=\"421\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/6805\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's walk through what's happening in the diagram. Assume that you have an application that tracks your goals. Each time you delete or add a new goal, the controller updates the model by either deleting or adding a goal. In other words, the controller updates the model as per the user input.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe model then notifies the controller of the changes, which in turn updates the views to display the updated information. When you add your goals and the model is updated, the controller updates the view which displays the new goal on your site.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's look at each part separately and how they function:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eModel\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is the application's data structure. It represents the actual data that an app deals with, and it responds to requests from views and instructions from controllers to update itself. Moreover, a model does not depend on either view or controller.  In Angular applications, models are represented by objects. In the example of the goal application from earlier, our model would be:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass Goal{\u003cbr\u003e  constructor(){}\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDon't worry about mastering the code right now - we'll be creating applications soon enough. For now, focus on what each part represents, and how they relate to one another.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eView\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eViews are what is presented to the user and how they interact with it. In other words, it's what the user actually sees on their screen, and can be made with HTML, CSS or Javascript. It displays the model data. In Angular, we can create a view in HTML by using double curly braces.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;h4 id=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"{{i}}\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e appStrikethrough\u0026gt; {{goal.name}} due on {{goal.completeDate|date|uppercase}} \u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e/h4\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch2\u003e\u003cstrong\u003eController\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe controller is essentially the glue between the model and the view. It updates the view when the view changes and also adds event listeners to the view. Additionally, it updates the model when the user manipulates the view.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince the controller links both the model and the views, it can be separated into two; view controllers and model controllers\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eView controllers are responsible for pulling together the model used by the view and handling the input from the user of the view. For example, if you wanted to delete a goal from your goal application, you would have an event listener in the HTML that listens for when the user clicks the delete button and then a function that actually deletes the clicked goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal.component.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;button \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"btn btn-danger btn-sm\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (click)=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'deleteGoal(i)'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;Delete Goal\u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the example above the event listener is `(click)` and the function that deletes the goal is `deleteGoal(i)`\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e For now, do not worry about how to create the function, we'll explain that later as we look at angular in depth. The important thing to understand for now is how the event listeners work together with functions as view controllers.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn the other hand, model controllers contain the data to be displayed as well as the data to be collected as input in forms. It can also be functions that are invoked based on the user's activity such as clicking a button or making changes to the model data. For example, a function that adds a new goal to the model. Whenever you add a new goal through a form, there is a function that is responsible for adding that goal to your database. This function is a model controller because it interacts directly with your model. \u003c/span\u003e\u003c/p\u003e","exportId":"monday-mvc-architecture-with-angular"},{"id":749,"title":"Monday: Angular Apps","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eAngular Apps\u003c/h2\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating an Angular App\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have a basic understanding of typescript and ES6 from our precourse work so we can now dive into working with Angular. Let us create an app that helps us manage our goals. We create Angular apps using the Angular \u003ccode\u003eCLI\u003c/code\u003e - Command Line Interface. Let us open our terminals and use the CLI to generate a new Angular app. First, create a directory where you want to store your angular apps. Inside the directory you just created, run the command :\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng new Goals\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command prompts us on whether we want to use Angular routing. Type \u003ccode\u003ey\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and hit \u003ccode\u003eenter\u003c/code\u003e. Don't worry about what routing means, we'll look at it later on. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe command also prompts us on which stylesheet format we want to use. We'll be using CSS, so select the CSS option and hit enter.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command is taking some time to run. While it runs, it is creating boilerplate code for our angular app as well as creating the folder structure so we do not have to stress about setting up the files and folders. It also downloads and installs the necessary dependencies and packages needed for our app to run.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo see the end result of the command, let us navigate into the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoals \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efolder and open it in our favourite editor. We see the following folder layout:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"font-family: sans-serif; font-size: 1rem;\" src=\"viewer/files/ng-initial-folder-structure.png\" alt=\"angular-initial-folder-structure.png\" width=\"325\" height=\"756\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/11980\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat is how we create angular apps using the angular CLI, we use the command \u003ccode\u003eng new \u0026lt;app-name\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRunning an Angular App\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us run our app on a local development server so we can interact with it. We use the command \u003ccode\u003eng serve\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eto run the app on the local development server.  Let's navigate to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoals \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003edirectory in the terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ cd Goals/\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhile inside the \u003ci\u003eGoals\u003c/i\u003e directory, let's run this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng serve\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command responds by compiling all the files and then starts the local development server with the following output:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo see the actual app, let's open the URL \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://localhost:4200/ \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eon the address bar of our web browser. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe are greeted with a welcome message that has a big red Angular logo on the web browser. That's amazing! We have successfully initiated our first angular app.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBut wait a minute, we did not write any code and yet we have content displaying on our browser! What really happened? Behind the scenes, the Angular CLI created boilerplate code for us in the files it generated. We'll notice that we have lots of files created but we'll focus on the ones in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/ \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder. This is the folder in which our application's \u003c/span\u003e\u003cstrong\u003eComponent\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003es\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003elive and we'll be working with the files inside this folder most of the time. We'll discuss Components in detail later on, so let it not frighten you. For general understanding, let's keep in mind that a component does something in an angular app.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEvery new Project is created with one \u003c/span\u003e\u003cstrong\u003eComponent,\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eInside the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder, there's a subfolder named \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich hosts the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eInside the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder, we have other files as well. Let's look at those that we'll work with:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.css\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - Contains the CSS styles specific to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.html\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - Contains the HTML template code for the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - Contains the typescript logic code for the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is the file that we will use to write code for the functionality of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - This file contains the high-level configurations that relate to the angular app in general. We'll explore it later on to understand what it entails.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn angular, each component is identified with a unique selector. Open the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e file in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder. At the top, we have \u003ccode\u003e@Component\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a \u003c/span\u003e\u003cstrong\u003edecorator\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e function whose purpose is to declare metadata for the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eOne of the metadata declared here is \u003ccode\u003eselector\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and its value is set as \u003ccode\u003eapp-root\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003ci\u003e\u003ccode\u003engForm \u003c/code\u003e\u003c/i\u003e\u003ccode\u003e@Component selector\u0026lt;app-root\u003c/code\u003e\u0026gt;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we navigate to \u003ci\u003esrc/index.html,\u003c/i\u003e we notice that we have the \u003ccode\u003e\u0026lt;app-root\u003c/code\u003e\u0026gt;\u003ccode\u003e\u0026lt;/app-root\u003c/code\u003e\u0026gt; tag in the body of the HTML template. The selector is used to render the \u003ci\u003eAppComponent\u003c/i\u003e in the \u003ci\u003eindex.html\u003c/i\u003e template file, which shows us that the \u003ci\u003eAppComponent\u003c/i\u003e is uniquely identified using the \u003ccode\u003eapp-root\u003c/code\u003e selector. Different components will, therefore, have different selectors to uniquely identify them. As we create more components, we'll notice that these selectors are important because they allow us to nest components inside each other without much of a do.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eUpdating our Components\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe'll be building a goal tracking application over this week to help us understand concepts in Angular. Let's get our hands dirty and tweak the code to see what happens in our app. Let's update the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the following code. \u003c/span\u003e\u003ccode class=\"language-bash\"\u003e \u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e { Component } \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e'@angular/core'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e@Component({\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  selector: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'app-root'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  templateUrl: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'./app.component.html'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  styleUrls: [\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'./app.component.css'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e]\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e})\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  goal = \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'Watch Finding Nemo'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003ccode class=\"language-bash\"\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a property \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and given it a value \u003ccode\u003e'Watch Finding Nemo'\u003c/code\u003e.\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow, let's change the HTML template code of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent.\u003c/span\u003e\u003c/i\u003e\u003ccode class=\"language-bash\"\u003e \u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003ccode class=\"language-bash\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;My goal for today is {{ goal }}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have deleted the initial content in the file and created a \u003cspan style=\"color: #ff0000;\"\u003ediv\u003c/span\u003e and inside it, created a \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e tag and a \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e tag. Inside the \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e tag, we have used double curly braces\u003ccode\u003e {{}}\u003c/code\u003e and put the \u003ccode\u003egoal\u003c/code\u003e property we created in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e class. By doing this, we have used angular's \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003einterpolation binding\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e syntax to put the value of the goal property inside the \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e tag. Let's serve our application using the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eng serve\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e command and go to our browser to see the changes we have made.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-angular-apps"},{"id":1041,"title":"Monday: Angular File Review","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\n\u003cspan\u003e Angular File \u003c/span\u003eReview\u003c/h2\u003e\r\n\u003cp\u003eWe can now examine the files inside our goals app. A good starting point is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile where we can see all the Angular commands we can use to work with our app.\u003c/p\u003e\r\n\u003cp\u003eWe will mostly work inside our\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc/\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003esrc\r\n|\r\n|---app/\r\n|      | ---app.component.css\r\n|      | ---app.component.html\r\n|      | ---app.component.spec.ts\r\n|      | ---app.component.ts\r\n|      | ---app.module.ts\r\n|---assets/\r\n|      | ---.gitkeep\r\n|---environments/\r\n|      | ---environment.prod.ts\r\n|      | ---environment.ts\r\n|---favicon.ico\r\n|---index.html\r\n|---main.ts\r\n|---polyfills.ts\r\n|---styles.css\r\n|---test.ts\r\n|---tsconfig.app.json\r\n|    tsconfig.spec.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese files and folders are what are found in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder where our app will live. Angular documentation defines them this way:\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappcomponenttshtmlcssspects_30\"\u003e\u003c/a\u003eapp/app.component.{ts,html,css,spec.ts}\u003c/h3\u003e\r\n\u003cp\u003eDefines the AppComponent along with an HTML template, CSS stylesheet, and a unit test. It is the root component of what will become a tree of nested components as the application evolves.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappmodulets_34\"\u003e\u003c/a\u003eapp/app.module.ts\u003c/h3\u003e\r\n\u003cp\u003eDefines AppModule, the root module that tells Angular how to assemble the application. Right now it declares only the AppComponent. Soon there will be more components to declare.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"assets_38\"\u003e\u003c/a\u003eassets/*\u003c/h3\u003e\r\n\u003cp\u003eA folder where you can put images and anything else to be copied wholesale when you build your application.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"environments_42\"\u003e\u003c/a\u003eenvironments/*\u003c/h3\u003e\r\n\u003cp\u003eThis folder contains one file for each of your destination environments, each exporting simple configuration variables to use in your application. The files are replaced on-the-fly when you build your app. You might use a different API endpoint for development than you do for production or maybe different analytics tokens. You might even use some mock services. Either way, the CLI has you covered.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"faviconico_46\"\u003e\u003c/a\u003efavicon.ico\u003c/h3\u003e\r\n\u003cp\u003eEvery site wants to look good on the bookmark bar. Get started with your very own Angular icon.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"indexhtml_50\"\u003e\u003c/a\u003eindex.html\u003c/h3\u003e\r\n\u003cp\u003eThe main HTML page that is served when someone visits your site. Most of the time you’ll never need to edit it. The CLI automatically adds all js and css files when building your app so you never need to add any \u0026lt;script\u0026gt; or \u0026lt;link\u0026gt; tags here manually.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"maints_54\"\u003e\u003c/a\u003emain.ts\u003c/h3\u003e\r\n\u003cp\u003eThe main entry point for your app. Compiles the application with the Just-in-Time (JIT) compiler and bootstraps the application’s root module (AppModule) to run in the browser. You can also use the Ahead-of-Time (AOT) compiler without changing any code by appending the–aot flag to the ng build and ng serve commands.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"polyfillsts_58\"\u003e\u003c/a\u003epolyfills.ts\u003c/h3\u003e\r\n\u003cp\u003eDifferent browsers have different levels of support of the web standards. Polyfills help normalize those differences. You should be pretty safe with core-js and zone.js, but be sure to check out the Browser Support guide for more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"stylescss_62\"\u003e\u003c/a\u003estyles.css\u003c/h3\u003e\r\n\u003cp\u003eYour global styles go here. Most of the time you’ll want to have local styles in your components for easier maintenance, but styles that affect all of your app need to be in a central place.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"testts_66\"\u003e\u003c/a\u003etest.ts\u003c/h3\u003e\r\n\u003cp\u003eThis is the main entry point for your unit tests. It has some custom configuration that might be unfamiliar, but it’s not something you’ll need to edit.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigappspecjson_70\"\u003e\u003c/a\u003etsconfig.{app|spec}.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for the Angular app (tsconfig.app.json) and for the unit tests (tsconfig.spec.json).\u003c/p\u003e\r\n\u003ch2\u003e\n\u003ca id=\"The_root_folder_74\"\u003e\u003c/a\u003eThe root folder\u003c/h2\u003e\r\n\u003cpre\u003e\u003ccode\u003eGoals\r\n|---e2e/\r\n|   |---app.e2e-spec.ts\r\n|   |---app.po.ts\r\n|   |---tsconfig.e2e.json\r\n|---node_modules/...\r\n|---src/...\r\n|---.angular-cli.json\r\n|---.editorconfig\r\n|---.gitignore\r\n|---karma.conf.js\r\n|---package.json\r\n|---protractor.conf.js\r\n|---README.md\r\n|---tsconfig.json\r\n|---tslint.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"e2e_93\"\u003e\u003c/a\u003ee2e/\u003c/h3\u003e\r\n\u003cp\u003eInside e2e/ live the end-to-end tests. They shouldn’t be inside src/ because e2e tests are really a separate app that just so happens to test your main app. That’s also why they have their own tsconfig.e2e.json.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"node_modules_97\"\u003e\u003c/a\u003enode_modules/\u003c/h3\u003e\r\n\u003cp\u003eNode.js creates this folder and puts all third party modules listed in package.json inside of it.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"angularclijson_101\"\u003e\u003c/a\u003e.angular-cli.json\u003c/h3\u003e\r\n\u003cp\u003eConfiguration for Angular CLI. In this file you can set several defaults and also configure what files are included when your project is built. Check out the official documentation if you want to know more.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"editorconfig_105\"\u003e\u003c/a\u003e.editorconfig\u003c/h3\u003e\r\n\u003cp\u003eSimple configuration for your editor to make sure everyone that uses your project has the same basic configuration. Most editors support an .editorconfig file. See\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://editorconfig.org/\"\u003ehttp://editorconfig.org\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"gitignore_109\"\u003e\u003c/a\u003e.gitignore\u003c/h3\u003e\r\n\u003cp\u003eGit configuration to make sure autogenerated files are not commited to source control.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"karmaconfjs_113\"\u003e\u003c/a\u003ekarma.conf.js\u003c/h3\u003e\r\n\u003cp\u003eUnit test configuration for the Karma test runner, used when running ng test.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"packagejson_117\"\u003e\u003c/a\u003epackage.json\u003c/h3\u003e\r\n\u003cp\u003enpm configuration listing the third party packages your project uses. You can also add your own custom scripts here.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"protractorconfjs_121\"\u003e\u003c/a\u003eprotractor.conf.js\u003c/h3\u003e\r\n\u003cp\u003eEnd-to-end test configuration for Protractor, used when running ng e2e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"READMEmd_125\"\u003e\u003c/a\u003e\u003ca href=\"http://readme.md/\"\u003eREADME.md\u003c/a\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eBasic documentation for your project, pre-filled with CLI command information. Make sure to enhance it with project documentation so that anyone checking out the repo can build your app!\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigjson_129\"\u003e\u003c/a\u003etsconfig.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for your IDE to pick up and give you helpful tooling.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tslintjson_133\"\u003e\u003c/a\u003etslint.json\u003c/h3\u003e\r\n\u003cp\u003eLinting configuration for TSLint together with Codelyzer, used when running ng lint. Linting helps keep your code style consistent.\u003c/p\u003e","exportId":"monday-angular-file-review"},{"id":750,"title":"Monday: Components","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eAngular Components\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eComponents\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e are the building blocks in Angular apps. A component can display data on the screen, listen to user input such as a button click and take action depending on the user input, for example returning a new page after a button click.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEach angular app has to have a root component which acts as the top-level component. This component is rendered first to the user. As we develop our Goals app, we'll be creating more components which will be different from the root component we have now. We can also nest components inside other components to make larger components. We'll see this in practice later as we create more components. The root component will be the \u003c/span\u003e\u003cstrong\u003eparent component\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and the other components we nest inside it will be the \u003c/span\u003e\u003cstrong\u003echild components\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Whenever we initiate an angular application, we tell the browser to render the parent component, which in turn renders its child components if they exist.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eStructure of a Component\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAn angular component has two parts:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Component annotation.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Component definition class.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's use the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to see these two parts. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-root',\u003cbr\u003e  templateUrl: './app.component.html',\u003cbr\u003e  styleUrls: ['./app.component.css']\u003cbr\u003e})\u003cbr\u003eexport class AppComponent {\u003cbr\u003e  goal = 'Watch Finding Nemo'\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, the \u003ccode\u003eimport\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ekeyword is used to import modules we want to use in a component. Here, we import \u003ccode\u003eComponent\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom \u003ccode\u003e@angular/core\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich is where \u003ccode\u003eComponent\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is located.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eComponent Annotation\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003e@Component\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a metadata annotation, which means it defines metadata properties related to the app component. In the \u003ccode\u003e@Component\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e annotation, we have metadata for the \u003ccode\u003eselector\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e attribute which has a value \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e'\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eapp-root'\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat uniquely identifies the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We have the \u003ccode\u003etemplateUrl\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata attribute whose value points to the HTML template for \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The \u003ccode\u003estyleUrls\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata attribute has a value that points to the CSS file specific to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eComponent Definition Class\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/app.component.ts\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class AppComponent {\u003cbr\u003e  goal = 'Watch Finding Nemo'\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe component definition is a typescript class that we'll use to define the logic of the AppComponent. We \u003ccode\u003eexport\u003c/code\u003e the class so that we can import it anywhere else we need to use it the application. Inside the class, we have defined a property \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assigned it a value of \u003ccode\u003eWatch Finding Nemo\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a string.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eDisplaying an Array\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTypically, we all have more than one goal to achieve. Let's create more goals in an array and then display them in our Goals app.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-root',\u003cbr\u003e  templateUrl: './app.component.html',\u003cbr\u003e  styleUrls: ['./app.component.css']\u003cbr\u003e})\u003cbr\u003eexport class AppComponent {\u003cbr\u003e  goals:string[];\u003cbr\u003e\u003cbr\u003e  constructor(){\u003cbr\u003e    this.goals = ['Watch finding Nemo', 'Buy cookies', 'Get new phone case']\u003cbr\u003e  } \u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a property \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and attributed it to an empty String array. We have then created a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003econstructor\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e function and given the empty \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e array 3 string values so it is no longer empty. A \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003econstructor\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e function defines the logic that should be executed once the class is instantiated. In this case, when the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e is initiated, it creates an instance of the goals array with the 3 values that we have assigned it.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003engFor Directive\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us now display these goals.\u003cbr\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e        {{goal}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created an unordered list with a list tag that has some logic, the \u003ccode\u003e*ngFor\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003edirective. The \u003ccode\u003e*ngFor\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is an angular \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003erepeater directive \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat loops through the host element \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a list. Don't forget the asterisk sign \u003ccode\u003e*\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ebefore \u003ccode\u003eng\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e it's part of the syntax\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe directive goes through the \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e array and assigns each item in the array the variable \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We have then displayed the \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e variable inside the list tag using Angular's interpolation binding syntax.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis directive works the same as the for loop in Javascript that we learned in Moringa Prep. An excerpt of the loop syntax used we used in Javascript is:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar arr = [3, 5, 7,11,13];\u003cbr\u003efor (var i in arr){\u003cbr\u003e console.log(i);}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe directive gives a similar output as this loop, only that it now has its own syntax that's different.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we check our browser now, we see that the app displays a list of the goals that we have created.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-components"},{"id":751,"title":"Monday: Creating a class","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating a Class\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA goal has much more detail than just a name. It can have a completion date, an ID, number of participants, an owner, etc. So far, we have been creating our goals as pure strings inside our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We can continue defining these goals as strings in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e but it will get tedious and clumsy as we create more and more goals. To curb this, angular allows us to create a class that will be the blueprint for creating goal objects.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoal Blueprint Class\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhile learning Javascript in Prep, we got familiar with Object Oriented Programming in which we build objects from classes. A class is an extensible program-code-template for creating objects by providing initial values for variables and member functions or methods. Let us create a class with the angular CLI to define the blueprint of a goal which is how we will be creating Goal objects. On our terminal, let's execute this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003egenerate\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e Goal\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe use the \u003ccode\u003eng generate class \u0026lt;class-name\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecommand to create a class using the angular CLI. We will create goals that have a name and an ID. Let us define this logic in the goal class we have just created.\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  id: number;\u003cbr\u003e  name: string;\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eInside the class \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we have defined the \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and attributed it to the datatype number and \u003ccode\u003ename\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to be a string. We have exported the class to make it available for use anywhere else we need it in the app.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eDisplaying an Array\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us create several goals using the goal blueprint class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component } from '@angular/core';\u003cbr\u003eimport { Goal } from './goal';\u003cbr\u003e....\u003cbr\u003eexport class AppComponent {\u003cbr\u003e  goals:Goal = [\u003cbr\u003e    {id:1, name:'Watch finding Nemo'},\u003cbr\u003e    {id:2,name:'Buy Cookies'},\u003cbr\u003e    {id:3,name:'Get new Phone Case'},\u003cbr\u003e    {id:4,name:'Get Dog Food'},\u003cbr\u003e    {id:5,name:'Solve math homework'},\u003cbr\u003e    {id:6,name:'Plot my world domination plan'},\u003cbr\u003e  ];\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eAt the top, we have imported the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class we have just created. If we do not import it, we'll get errors in our application because the component in which we are trying to use this class does not recognize it yet. The period signs\u003ccode\u003e ... \u003c/code\u003eare just to show that we do not change the code before the \u003cem\u003eAppComponent\u003c/em\u003e class. Inside the \u003cem\u003eAppComponent\u003c/em\u003e class, we have created an object \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and attributed it to the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint and then defined the array of goals each with its ID and name.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we check our browser now, the application is not broken but it does not show us the actual goals. It shows us the text  [object Object]. This means that the browser can recognize that we want to display goal objects but our HTML code cannot display anything in specific, neither the id nor the name.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo display the goal name for each item in the list, we change our HTML template code to point us to the goal name instead of the goal object.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e        {{goal.name}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003eWhen we check our browser, we now see the goal names in the list. For practice, display the goal ID along with the goal name.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eNgIf Directive\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's take a look at another directive in Angular known as \u003c/span\u003e\u003cstrong\u003eNgIf\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e directive. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e        {{goal.name}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;Your goals are too many\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWe have added a \u0026lt;p\u0026gt; tag and defined the directive logic in it. Here, we check if the length of the goals array is greater than five, and when it is, we display the text in the paragraph tag. When we check our browser now, the text is displayed because we have 6 goals in the array. Delete one goal in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efile and check your browser, the text does not appear because the goals are not more than five. This directive checks if a certain condition is met and performs an action based on that condition.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-creating-a-class"},{"id":752,"title":"Monday: Creating Components","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating Components\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTill now, the AppComponent has been handling everything that's in our app. We want to scale our app and we are therefore going to create more components. The beauty of components is that they enable us to decouple our application so that each functionality is implemented by a specific component. We end up having many components working together to achieve the whole purpose of the app.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince it is the root components’ job to render all other components, let us start out by creating a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component to handle the logic on goals. In your terminal, run the following command:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component goal\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has created a folder \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat has the files that contain the boilerplate code for a component. If we also check the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003eapp.module.ts, \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewe notice that the goal component has been registered under \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003edeclarations\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e automatically by the angular CLI.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe're moving the goals logic from the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoalComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Let's move the goals array permanently from the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoalComponent:\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-family: sans-serif; font-size: 10pt;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-goal',\u003cbr\u003e  templateUrl: './goal.component.html',\u003cbr\u003e  styleUrls: ['./goal.component.css']\u003cbr\u003e})\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals:Goal = [\u003cbr\u003e    {id:1, name:'Watch finding Nemo'},\u003cbr\u003e    {id:2,name:'Buy Cookies'},\u003cbr\u003e    {id:3,name:'Get new Phone Case'},\u003cbr\u003e    {id:4,name:'Get Dog Food'},\u003cbr\u003e    {id:5,name:'Solve math homework'},\u003cbr\u003e    {id:6,name:'Plot my world domination plan'},\u003cbr\u003e  ];\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eAt the top, we have imported the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class and then defined the array of goals inside the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003eGoalComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e definition class. \u003ccode\u003engOnInit\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a lifecycle hook. It is called each time the component is created. We use it to put complex initialization logic that we want for the component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also move the template logic to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoalComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-size: 1.8em;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e      {{goal.name}}\u003cbr\u003e    \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-size: 1.8em;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1.8em;\"\u003eNesting Components\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that we have all our goals logic inside the goal component, let's make it available as a child component of the root component. If we check our browser right now, there's nothing displaying because our root component has nothing to display. Using the goal component's selector, let's nest the goal component inside the app component so we can display the contents of the goal component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;app-goal\u0026gt;\u0026lt;/app-goal\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cbr\u003eIf we check our browser now, the goals are displayed just like before. Yes, nesting is as simple as that! This ensures that the component is loaded while inside the parent component.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eChild Components\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's add something more to our goals, let's give each goal a description. We will use the description as the detail of our goals and display it in our app. We will create a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component which will be a child component of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component. The \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component will be responsible for displaying the details of each goal which in our case will be the description of a goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCurrently, our goal blueprint allows us to create goal objects with an \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003ename\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e only. Let's add \u003ccode\u003edescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the goal blueprint so it allows us to create a description for each of our goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  id: number;\u003cbr\u003e  name: string;\u003cbr\u003e  description: string;\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can now add descriptions to our goals in the array so that we can display them in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-details\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    {id:1, name:'Watch finding Nemo',description:'Find an online version and watch merlin find his son'},\u003cbr\u003e    {id:2,name:'Buy Cookies',description:'I have to buy cookies for the parrot'},\u003cbr\u003e    {id:3,name:'Get new Phone Case',description:'Diana has her birthday coming up soon'},\u003cbr\u003e    {id:4,name:'Get Dog Food',description:'Pupper likes expensive sancks'},\u003cbr\u003e    {id:5,name:'Solve math homework',description:'Damn Math'},\u003cbr\u003e    {id:6,name:'Plot my world domination plan',description:'Cause I am an evil overlord'},\u003cbr\u003e  ];\u003cbr\u003e\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eInput Property Binding\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur goal-detail component will be receiving the goal description to display from the parent component, goal. For a child component to receive data from a parent component in angular, we need to do input property binding. \u003c/span\u003e\u003cstrong\u003eInput property binding\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e allows us to pass data from a parent component to its child components. Let's see how we do this.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit, Input } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-goal-detail',\u003cbr\u003e  templateUrl: './goal-detail.component.html',\u003cbr\u003e  styleUrls: ['./goal-detail.component.css']\u003cbr\u003e})\u003cbr\u003eexport class GoalDetailComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  @Input() goal: Goal;\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-family: sans-serif; font-size: 12pt;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: sans-serif; font-size: 12pt;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we add an import for \u003ccode\u003eInput\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e from \u003ccode\u003e@angular/core\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which allows us to do Input property binding. We also import the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class. In the definition class for the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003eGoalDetailComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we define \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as the property that will undergo input property binding, which is of the type of the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003e, \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom the blueprint class. This means when we will have the property \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e in the goal-detail component, it will have received its data from a parent component, in our case, the goal component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo bind to this \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property from the parent \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal component \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eto the child \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we change our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecomponents\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e template code to this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;My Goals\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;hr\u0026gt;\u003cbr\u003e  \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;li *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e      {{goal.name}}\u003cbr\u003e      \u0026lt;app-goal-detail [goal]='goal'\u0026gt;\u0026lt;/app-goal-detail\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/ul\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used the selector for the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal-detail component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e and nested it into the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, placing it after the goal name which is where we want to display the description of each goal. We have also added some logic in the child component tags and specified that we are binding the \u003ccode\u003egoal\u003c/code\u003e property to the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal-detail component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The goal-detail component is now receiving data from the goal component so we can now display this data in the goal-detail component. \u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  {{goal.description}}\u003cbr\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWhen we serve our application at this point, we can see the application is now displaying each goal with its description below it.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-creating-components"},{"id":753,"title":"Tuesday: Output Property Binding","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eOutput Property Binding\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur application at this point shows us our goals and their descriptions at the same time. Why don't we build some interactivity in it, in a way that, we don't always see the description of a goal, but instead, we click a button that toggles between showing and hiding a description? This will help us understand how output property binding works. Just as input property binding passes data into a component, \u003c/span\u003e\u003cstrong\u003eoutput property binding\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e passes data out of a component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by adding this property to our goal blueprint to enable us to toggle between showing and hiding a goal description. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  showDescription: boolean;\u003cbr\u003e  constructor(public id: number,public name: string,public description: string){\u003cbr\u003e    this.showDescription=false;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have changed how we create the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class by using a constructor function. We have created a property \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eshowDescription\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assigned it to the datatype boolean. Inside the constructor function we have passed the goal properties we had before, to be arguments of the constructor and declared that the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property should be initialized as \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e so that the description is not displayed. We'll write the code to control this logic for hiding and showing goals later on. Notice that we have used the keyword \u003ccode\u003ethis\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to give the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property class access. The \u003ccode\u003epublic\u003c/code\u003e keyword is an access modifier since it determines where the class properties are visible which in our case is anywhere outside the class. If we used the \u003ccode\u003eprivate\u003c/code\u003e keyword, the properties would only be visible inside the class.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhy use a constructor function? A constructor function enables us to define the initialization logic for creating an object. Our Goal object in this case still needs the properties \u003ccode\u003eid,name \u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eand \u003ccode\u003edescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to instantiate our Goal object. The \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property, on the contrary, is not mandatory when creating a Goal object. That's the reason we have used the constructor function, we are telling our angular application that it should initialize a goal object requiring the \u003ccode\u003eid,name \u003c/code\u003eand \u003ccode\u003edescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as mandatory properties and as well add \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to a goal object immediately setting its value to \u003ccode\u003efalse\u003c/code\u003e. Each goal object we create from now on will, therefore, have the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property although we will not explicitly define this property for each Goal object that we create.     \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also change our Goals so we can put the constructor into use.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/goal/goal.component.ts\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    new Goal(1, 'Watch finding Nemo', 'Find an online version and watch merlin find his son'),\u003cbr\u003e    new Goal(2,'Buy Cookies','I have to buy cookies for the parrot'),\u003cbr\u003e    new Goal(3,'Get new Phone Case','Diana has her birthday coming up soon'),\u003cbr\u003e    new Goal(4,'Get Dog Food','Pupper likes expensive snacks'),\u003cbr\u003e    new Goal(5,'Solve math homework','Damn Math'),\u003cbr\u003e    new Goal(6,'Plot my world domination plan','Cause I am an evil overlord'),\u003cbr\u003e  ];\u003cbr\u003e\u003cbr\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created the property \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand specified that it will be an array of type \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen defining each goal, we use the keyword \u003ccode\u003enew\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand call the Goal blueprint class, inside it specifying the three mandatory properties in the constructor function \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eid\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ename\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u0026amp; \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edescription\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now add the logic for showing and hiding a goal description in our HTML template file.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;{{goal.name}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)'\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e *ngIf='goal.showDescription' [goal]='goal'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the div we have created, we have added a loop logic,\u003ccode\u003elet i = index\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eto register the index of each goal item in the goals list. We have then displayed the goal name and below it created a button that also contains some logic.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eclick Event binding\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe logic we have added in the button is an event binding syntax, the click event binding. We are telling the angular app to listen for a click event on this button and once it happens, it should execute the\u003ccode\u003e toggleDetails()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction which we will create in a few. The \u003ccode\u003etoggleDetails()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function takes in the index position of the goal item as an argument. We have then updated the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e tags with the \u003ccode\u003e*ngIf\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e directive, instructing it to display the goal description if it exists. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eShow and hide Logic\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now create the \u003ccode\u003etoggleDetails()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction that will display and hide a goal description. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e...\u003cbr\u003e\u003cbr\u003e  toggleDetails(index){\u003cbr\u003e    this.goals[index].showDescription = !this.goals[index].showDescription;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have defined the \u003ccode\u003etoggleDetails()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction in our component class and specified that it takes \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eindex\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e as an argument. Inside the function, we have defined the logic for displaying the goal description, which in our case changes the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and vice versa each time the function is executed. The\u003ccode\u003e goals[index]\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eensures that the function is executed for the goal at the specific index. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf our server is still running, we can now interact with our application on the web browser. We notice that the goal descriptions are no longer displayed and we have the button that we have created which toggles between displaying and hiding a goal description.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-output-property-binding"},{"id":754,"title":"Tuesday:Emitting Events","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eEmitting Events\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we want a child component to communicate with a parent component, we make the child component emit an event that is taken up by the parent component. Let us make our child component \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail, \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecommunicate with its parent component, the goal component\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e We'll do this by adding a button to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component that deletes a goal once we ascertain that we have completed it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's create this button in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e HTML template.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)= 'goalComplete(true)'\u0026gt;Complete\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a button below the goal description \u0026lt;p\u0026gt; tag and defined some logic inside it. We have added a click event binding syntax which will call the \u003ccode\u003egoalComplete(true)\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction once the button is clicked. Let's now create this function.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\u003cbr\u003e...\u003cbr\u003eexport class GoalDetailComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  @Input() goal: Goal;\u003cbr\u003e  @Output() isComplete = new EventEmitter\u0026lt;boolean\u0026gt;();\u003cbr\u003e\u003cbr\u003e  goalComplete(complete:boolean){\u003cbr\u003e    this.isComplete.emit(complete);\u003cbr\u003e  }\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported \u003ccode\u003eOutput\u003c/code\u003e decorator and the \u003ccode\u003eEventEmitter\u003c/code\u003e class. We have then used the \u003ccode\u003eOutput\u003c/code\u003e decorator to define \u003ccode\u003eisComplete\u003c/code\u003e as an EventEmitter that takes in a boolean. After that, we have created our \u003ccode\u003egoalComplete()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction which calls the \u003ccode\u003eemit\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003emethod on the \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e EventEmitter. What this does is pass this event to the parent component. We, therefore, have to make the parent component process this event. Let's write the code for this in our parent component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/goal.component.html\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;{{goal.name}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)'\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e *ngIf='goal.showDescription' [goal]='goal' (isComplete) = 'completeGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo make the parent component receive this event, we need to catch the event being emitted to the parent component and define a function that will be triggered once this event is captured. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe event being emitted is \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe catch this event in the parent component using parenthesis\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003ccode\u003e()\u003c/code\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand then define that when it is emitted, the \u003ccode\u003ecompleteGoal($event,i)\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction should be called. Inside the function, we have used the special variable, \u003ccode\u003e$event\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eas a placeholder for the values that are emitted with the event. We have also passed in the index of the goal item in the function. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFinally, let's create this \u003ccode\u003ecompleteGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function which will be triggered when our event is captured.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e GoalComponent \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eimplements\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e OnInit {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  completeGoal(isComplete, index){\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (isComplete) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ethis\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.goals.splice(index,\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e1\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    }\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  }\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econstructor\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e() { }\u003cbr\u003e \u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eInside the function, we have passed in the \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event emitter and \u003ccode\u003eindex\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as our arguments then used the \u003ccode\u003esplice\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e javascript function to delete the goal at the index. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we serve our application now, we have the complete button which deletes a goal at a specific index from our goals array when clicked.\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-emitting-events"},{"id":755,"title":"Tuesday:Custom Directives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCustom Directives\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have talked about two types of directives. There are structural directives that change the structure of the template and attribute directives that change the appearance and behaviour of elements.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can as well create our own custom attribute directives. What if we wanted to strikethrough a goal after finishing it instead of deleting it? To this point, angular has no inbuilt directive to do this. Let us create our own custom directive that will strikethrough a goal after we finish it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt our terminal, let's create a directive using this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate directive strikethrough\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command generates a file \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estrikethrough.directive.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich we are about to use to write the code that will perform a strikethrough and another file \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estrikethrough.directive.spec.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a test file. At the same time, it declares this directive in the root level modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts,\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e for us.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e  constructor(){}\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA directive is a class that has the \u003ccode\u003e@directive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e annotation. Directives help us extend the power of HTML by giving it a new syntax. The annotation of a directive only has the \u003ccode\u003eselector\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property which is passed in as the attribute to the host element. The brackets \u003ccode\u003e[]\u003c/code\u003e make it an attribute directive. Angular looks in the template for elements that have this selector and applies the logic that follows to the elements. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's go on to create this logic.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e  constructor(private elem:ElementRef){}\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have imported the \u003ccode\u003eElementRef\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eat the top which we have used in the constructor of the directive's definition class. We use \u003ccode\u003eElementRef\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to inject a reference to the host DOM element in which we will use this directive.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef} from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e\u003cbr\u003e  constructor(private elem:ElementRef){\u003cbr\u003e    this.elem.nativeElement.style.textDecoration='line-through';\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then targeted the host element's style attribute and changed the text-decoration to line-through. The \u003ccode\u003eElementRef\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003egrants us direct access to the host DOM element through its \u003ccode\u003enativeElement\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's add this directive to our host element to see the changes it creates.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e  (click)='toggleDetails(i)'\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;\u003cstrong\u003eapp-goal-details\u003c/strong\u003e *ngIf=\"goal.showDescription\" [goal]='goal' (isComplete)= 'completeGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-details\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWhen we serve our application, we see the goals have a line crossing the goal name which means that our directive actually works. That's great, right? However, using the directive this way is not helpful because we only wanted to strikethrough a goal if we have finished it. \u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eUser-initiated events\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe'll put the user in control of making the strikethrough work on the app. When the user clicks a goal, it is marked as complete with the strikethrough and when the user double-clicks on the goal, it is marked an incomplete by removing the strikethrough from the goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's implement this in our directive.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef} from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e\u003cbr\u003e  constructor(private elem:ElementRef){ }\u003cbr\u003e  \u003cbr\u003e  private textDeco(action:string){\u003cbr\u003e    this.elem.nativeElement.style.textDecoration=action;\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have changed our directive's logic by creating a function \u003ccode\u003etextDeco()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich takes in an action and then performs a text-decoration using the action. Let's now create these actions that will feed into our \u003ccode\u003etextDeco()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef,HostListener} from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e\u003cbr\u003e    \u003cbr\u003e  constructor(private elem:ElementRef){}\u003cbr\u003e\u003cbr\u003e  @HostListener(\"click\") onClicks(){\u003cbr\u003e    this.textDeco(\"line-through\")\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  @HostListener(\"dblclick\") onDoubleClicks(){\u003cbr\u003e    this.textDeco(\"None\")\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  private textDeco(action:string){\u003cbr\u003e    this.elem.nativeElement.style.textDecoration=action;\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported \u003ccode\u003eHostListener\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand used it to define the events that will be initiated by user actions, the first one being a click that creates a line-through and the second one being a double click which changes the text-decoration to none thus removing the line-through. We can see that for each action, we call our \u003ccode\u003etextDeco()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ethis.textDeco()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and pass in the name of the action as a string. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's serve our application at this point and interact with it by clicking and double-clicking on the goals to see our directive at work.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-custom-directives"},{"id":756,"title":"Tuesday: Pipes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003ePipes\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eImagine having a date that you show on your own website that reads like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFri Feb 15 1998 00:00:00 GMT-0700 (Pacific Daylight Time)\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis date does not look or feel user-friendly. We would want a simple and readable date with minimal details, something like:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFebruary 15, 1998\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn angular, we can do such transformations with the help of pipes. A pipe takes in data as input and transforms it into the desired output. Angular has several inbuilt pipes that we can use and we can also create our own custom pipes if we want to. We'll use some inbuilt pipes first and later create our own custom pipes. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's first add a completion date to our goals. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  public showDescription: boolean;\u003cbr\u003e  constructor(public id: number,public name: string,public description: string, public completeDate: Date){\u003cbr\u003e    this.showDescription=false;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the \u003ccode\u003ecompleteDate\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ein our constructor for the goal blueprint and set its datatype to \u003ccode\u003eDate\u003c/code\u003e. We now need to update our goals array to add a completion date to each goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    new Goal(1, 'Watch finding Nemo', 'Find an online version and watch merlin find his son',new Date(2019,3,14)),\u003cbr\u003e    new Goal(2,'Buy Cookies','I have to buy cookies for the parrot',new Date(2019,6,9)),\u003cbr\u003e    new Goal(3,'Get new Phone Case','Diana has her birthday coming up soon',new Date(2019,1,12)),\u003cbr\u003e    new Goal(4,'Get Dog Food','Pupper likes expensive snacks',new Date(2019,0,18)),\u003cbr\u003e    new Goal(5,'Solve math homework','Damn Math',new Date(2019,2,14)),\u003cbr\u003e    new Goal(6,'Plot my world domination plan','Cause I am an evil overlord',new Date(2019,3,14)),\u003cbr\u003e  ];\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003eDate\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e instance takes 3 arguments the first one is the year, the second argument is the month the third argument is the date. The month is calculated from 0-11 where 0 is January and 11 is December.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now display the completion date along with our goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt; \u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the completion date to our template beside the goal name. If we serve our application, we can see the completion date. This date does not look user friendly, it looks complicated. Let's use the inbuilt date pipe in Angular to convert it to a readable format. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt; \u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we look at our application now, the date is in a simpler format that looks user friendly. We have added the date pipe \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e|date\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e in our template, which has converted the initial date we had to a simple readable format. The date pipe has made it simple for us to convert our date into a readable format.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eChaining Pipes\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can also chain pipes to extend the transformation of the input that we give to a pipe. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt; \u003cbr\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWe have added the \u003ccode\u003euppercase\u003c/code\u003e pipe to our completion date, which as the name suggests, converts the completion date to capital characters. When we serve our application, we see the date is now in all caps.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-pipes"},{"id":763,"title":"Tuesday: Create Pipes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating Custom Pipes\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs we had stated earlier, if the inbuilt angular pipes don't help us to achieve the data transformation we want, we have the liberty to create our own custom pipes to do it. Let's create a pipe that will count the number of days left to the completion of a goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn our terminals, let's create a pipe using the following command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate pipe date-count\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command generates two files, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edate-count.pipe.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich we'll use to write the code for counting the number of days left and \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edate-count.pipe.spec.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich is the test file for our pipe. The command also adds this pipe to our root level modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, for us.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now define the logic to count the number of days left to the completion of a goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/date-count.pipe.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Pipe, PipeTransform } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Pipe({\u003cbr\u003e  name: 'dateCount'\u003cbr\u003e})\u003cbr\u003eexport class DateCountPipe implements PipeTransform {\u003cbr\u003e\u003cbr\u003e  transform(value: any): number {\u003cbr\u003e    let today:Date = new Date(); //get current date and time\u003cbr\u003e    let todayWithNoTime:any = new Date(today.getFullYear(), today.getMonth(), today.getDate())\u003cbr\u003e    var dateDifference = Math.abs(value - todayWithNoTime) //returns value in miliseconds\u003cbr\u003e    const secondsInDay = 86400; //60 seconds * 60 minutes in an hour * 24 hours in a day\u003cbr\u003e    var dateDifferenceSeconds = dateDifference*0.001; //converts miliseconds to seconds\u003cbr\u003e    var dateCounter = dateDifferenceSeconds/secondsInDay;\u003cbr\u003e\u003cbr\u003e    if (dateCounter \u0026gt;= 1 \u0026amp;\u0026amp; value \u0026gt; todayWithNoTime){\u003cbr\u003e      return dateCounter;\u003cbr\u003e    }else{\u003cbr\u003e      return 0;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe first have the\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e@Pipe\u003c/code\u003e\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003edecorator that defines the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ename\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e of the pipe. We then have the \u003ccode\u003eDateCountPipe\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e class that has a transform function that takes in a value of type \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eany\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This value will be our date object from the goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used the \u003ccode\u003enew Date()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function to get the current date and time. But since we do not need the time aspect we create a new date object for today's date which we store in the \u003ccode\u003etodayWithNoTime\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e variable.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then calculated the difference of the date we get in the pipe input and subtracted the current date to get the difference in milliseconds.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have converted the milliseconds to seconds and then divided these seconds by the seconds in a day to get how many days are left.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then returned the days left if the goal date has not been passed. But if it past due we post \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e0\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us add this pipe to our goal details and serve our application to see our custom pipe in action.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-details/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWe have added the pipe to the \u003ccode\u003ecompleteDate\u003c/code\u003e property to calcute the number of days left to the completion of a goal.\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-create-pipes"},{"id":2049,"title":"Monday \u0026 Tuesday: Practice - To Do List,Flash Cards","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Over the course of the last two days, you have learnt how to create a basic application using Angular, including the file structure, components, property binding, event emitting, directives, and pipes. Take this time to familiarize and solidify your understanding of these concepts.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eGoals\u003c/h3\u003e\r\n\u003cp\u003eFirst, follow along with the Monday and Tuesday lessons, creating the Goals application.   \u003c/p\u003e\r\n\u003cp\u003eOnly after you have completed the lessons and understand how an Angular application is built, move on to practice your skills further with the next projects.\u003c/p\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eCreate a to-do list application in Angular. Just like we did in our Goals application, you will have to hard code your Task objects. For now, your Task object should have properties such as name and description. \u003c/p\u003e\r\n\u003ch3\u003eFlash Card\u003c/h3\u003e\r\n\u003cp\u003eYou have learnt a lot since you start this journey of becoming a Programmer.  Wouldn't it be really cool if you could have somewhere to record all the new programming vocabularies (and their explanations) that you have encountered?\u003c/p\u003e\r\n\u003cp\u003eOnce you finish creating the to-do list project above and feel comfortable about the concepts you learnt so far, you can challenge yourself further and create a flashcard app. A flashcard app is a site where you create cards that contain new words you learnt and their explanations.\u003c/p\u003e\r\n\u003cp\u003eFollow along with the lessons you've covered so far and add functionality similar to the Goals app with the following user stories as your guide:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see the title of each flash card\u003c/li\u003e\r\n\u003cli\u003eas a user, I want to be able to click on the card's title to see it's explanation/detail.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to be able to hide a card detail when am done viewing them.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-and-tuesday-practice-to-do-list-flash-cards"},{"id":772,"title":"Wednesday: Deleting Goals","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeleting Goals\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe earlier created a custom directive that strikes through a goal once we complete it by clicking it. We can replace the complete button in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component with a delete button that deletes a goal once we decide we want to get rid of it. Let's add this button to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e template.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)= 'goalDelete(true)'\u0026gt;Delete Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have modified the button to emit a \u003ccode\u003eclick\u003c/code\u003e output event that calls the \u003ccode\u003egoalDelete()\u003c/code\u003e function which takes a boolean as an argument. We also need to change the function that we had defined in the \u003ci\u003egoal-detail\u003c/i\u003e component class to our new \u003ccode\u003egoalDelete()\u003c/code\u003e\u003ci\u003e \u003c/i\u003e function.\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e GoalDetailComponent \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eimplements\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e OnInit {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  goalDelete(complete:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eboolean\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e){\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ethis\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.isComplete.emit(complete);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  }\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used the \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event emitter that we defined earlier and emitted the boolean value passed in. We can now update the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e parent component.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e *ngIf='goal.showDescription' [goal]='goal' (isComplete) = 'deleteGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e...\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have updated the goal-detail selector, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp-goal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, with our event emitter \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003especifying that when the event is emitted,  \u003ccode\u003edeleteGoal()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eis the function that should be executed.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also define the logic for this \u003ccode\u003edeleteGoal()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction which takes in the value of the event being emitted and the index of a goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e...\u003cbr\u003e  deleteGoal(isComplete, index){\u003cbr\u003e    if (isComplete) {\u003cbr\u003e      let toDelete = confirm(`Are you sure you want to delete ${this.goals[index].name}?`)\u003cbr\u003e\u003cbr\u003e      if (toDelete){\u003cbr\u003e        this.goals.splice(index,1)\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created the \u003ccode\u003edeleteGoal()\u003c/code\u003e function that takes in the boolean value and index of the goal. We have then created the \u003ccode\u003etoDelete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e boolean variable that calls the Javascript \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econfirm\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function that creates a browser prompt for the user to confirm if they actually want to delete the goal. If the user confirms that the goal is to be deleted we use the \u003ccode\u003esplice\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function to remove the goal from the list of goals using the index. Note that while creating the confirm prompt, we have used backticks \u003ccode\u003e``\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich allow us to use the \u003ccode\u003e${this.goals[index].name}\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003elogic inside the confirm prompt. Also, the javascript prompt gives a user two options, ok and cancel and depending on the option the user clicks on, a boolean value is returned. If the user clicks ok, the value true is returned, and if the user clicks cancel, the value false is returned. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's serve our application and interact with this feature we have created.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-deleting-goals"},{"id":773,"title":"Wednesday: Add Boostrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eAdding Bootstrap\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur application is looking very plain and stale at the moment. We can beautify it using the frontend web component library we covered in prep, bootstrap. We will add bootstrap to Angular using the command line. The boostrap4 documentation also clarifies that some components in bootstrap, like modals, need jquery and popper to work so let's install all of them in case we need to use such components.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm install --save bootstrap popper\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command will add bootstrap to our node modules. We need to make it available inside the application at the root level for us to use it. We'll do this in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estyles.css \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efile available at root.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/styles.css\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e@import \"~bootstrap/dist/css/bootstrap.css\"\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have done this by simply importing bootstrap in the root CSS file. We can now use bootstrap in our application. At this point, if we take a look at our application after starting our local server, we can spot a change in the font already since bootstrap is installed. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's use a simple layout for our application.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eh4\u003c/strong\u003e id={{i}} appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eh4\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)' class=\"btn btn-primary\"\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngIf='goal.showDescription'\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e  [goal]='goal' (isComplete) = 'deleteGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003ci\u003esrc/app/goal-detail/goal-detail.component.html\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003e\u003c/i\u003e\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)= 'goalDelete(true)' class=\"btn btn-outline-danger\"\u0026gt;Delete Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used boostrap classes in our HTML templates tags and the bootstrap grid layout also. Feel free to make adjustments to your application to make it more visually appealing. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-add-boostrap"},{"id":774,"title":"Wednesday:Form Component","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eForm Component\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we want to add goals to our application at the moment, we would have to do it by hard coding the goals in the goals array. What if we wanted our users to add goals of their liking from the frontend interface that they are interacting with? How would we go about it?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWell, thanks to web forms, we can give the user this power. A web form, also called a HTML form, helps us collect data from users by providing inputs in which users can fill in data. We will create a web form in which a user can fill in the details of a goal, that is, name, description and completion date to enable users to add goals from the user interface. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe will create our form the same way we have been creating other components. Let's create this form component using the angular CLI on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component goal-form\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has created the folder \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-form\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and inside it created the files that comprise a component. It has also added our goal-form component to our root module declarations array in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efile.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now define the structure of our form.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"name\"\u0026gt;Name\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type=\"text\" required class=\"form-control\" id=\"name\"\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"description\"\u0026gt;Description\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003etextarea\u003c/strong\u003e class=\"form-control\" id=\"description\" rows=\"4\" required\u0026gt;\u0026lt;/\u003cstrong\u003etextarea\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"complete\"\u0026gt;Completion\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type='date' id=\"complete\" required\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a form with three inputs, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ename\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003edescription\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003edate\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which are required to create a goal object. We will now use the selector of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-form\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component to nest it inside the goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;MY GOALS\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eh6\u003c/strong\u003e id={{i}} appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eh6\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)' class=\"btn btn-primary\"\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngIf='goal.showDescription'\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e  [goal]='goal' (isComplete) = 'deleteGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the form to the right side of our goals array. This form only has input fields and angular does not know how to interact with it at this point. In angular, whenever we want to make HTML forms interact with the angular app, we need to import the forms module from angular forms. We do this by making this import in our root modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.modules.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { FormsModule } from '@angular/forms';\u003cbr\u003e....\u003cbr\u003e  imports: [\u003cbr\u003e    BrowserModule,\u003cbr\u003e    AppRoutingModule,\u003cbr\u003e    FormsModule\u003cbr\u003e  ],\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003ccode\u003eFormsModule\u003c/code\u003e and then added it to our \u003ccode\u003eimports\u003c/code\u003e array. We have done this import because the forms module is not available in our angular app by default. Our angular application can now work with any number of forms that we create thanks to the FormsModule.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"wednesday-form-component"},{"id":775,"title":"Wednesday: NgModel","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eTwo-Way Data Binding\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that we have created a form that we will use to add goals in our application, let's make use of it. We want our users to see what they will be typing in real time, that is as they type it. This is the concept of two-way data binding. With two-way data binding, data moves from our template(the view) to our component class(the model) and vice versa. The essence is that when data changes on the template(view) it simultaneously changes in the component class(model) and if it also changes in the model, the view is automatically updated with the changes.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe FormsModule that we imported has a feature that will help us do the two-way data binding, the \u003ccode\u003engModel\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e directive. This form has to create a goal the same way we defined it in the blueprint, so let's write code to make it create goals in the same format.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-goal-form',\u003cbr\u003e  templateUrl: './goal-form.component.html',\u003cbr\u003e  styleUrls: ['./goal-form.component.css']\u003cbr\u003e})\u003cbr\u003eexport class GoalFormComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  newGoal = new Goal(0,\"\",\"\",new Date());\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003ccode\u003eGoal\u003c/code\u003e blueprint class. Inside the component definition class, we have created a \u003ccode\u003enewGoal\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eproperty and assigned it to the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass that takes in the format we have been using in creating goals. This new goal object will be changed by the form inputs.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003ediv\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"container-fluid\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003eh2\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"text-center\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreate a new Goal\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/\u003c/span\u003e\u003cstrong\u003eh2\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003ehr\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003eform\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e #goalForm=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'ngForm'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003ediv\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"form-group\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e          \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003elabel\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e for=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eName\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/\u003c/span\u003e\u003cstrong\u003elabel\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e          \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003einput\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e type=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"text\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e required class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"form-control\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e id=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e [(ngModel)]=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"newGoal.name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e name=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;!-- Testing to see if we get any data --\u0026gt;\u003cbr\u003e          Display {{newGoal.name}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"description\"\u0026gt;Description\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003etextarea\u003c/strong\u003e class=\"form-control\" id=\"description\" rows=\"4\" required\u0026gt;\u0026lt;/\u003cstrong\u003etextarea\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"complete\"\u0026gt;Completion\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type='date' id=\"complete\" required\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e type=\"submit\" class=\"btn btn-success\"\u0026gt;Add Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a template reference variable \u003ccode\u003egoalForm\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to our form tag and equated it to \u003ccode\u003engForm\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This will provide the form element with additional features and monitor the changes and validity of input elements.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then added the \u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e attribute to our name input and equated it to the name attribute of the \u003ccode\u003enewGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e object we created in our component definition class. We have then defined a \u003ccode\u003ename\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e attribute which is a requirement when using \u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and a form. The \u003ccode\u003eDisplay\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e{{newGoal.name}}\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e line will temporarily display the data being received. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf our server is still running, we can type anything in the form-input Name, and see two-way data binding in action.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTwo-way data binding is one of the key things that Angular makes easy for us to implement. If you want this kind of experience in your app, Angular should be a preferred tool.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"wednesday-ngmodel"},{"id":776,"title":"Wednesday: Form Validation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eForm Validation\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsers may end up trying to add a new goal without a name or description or a date while a goal is required to have each one. This may lead to our application developing errors. To mitigate this possible probability, we need to perform form validation on our form inputs and then alert users in case we encounter validity problems.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's see how we should do this.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e #goalForm='ngForm'\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"name\"\u0026gt;Name\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"newGoal.name\" name=\"name\" #name='ngModel' required\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Name is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a template reference variable \u003ccode\u003e#name\u003c/code\u003e\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e to access Angular's form control on this input from the template. We have then created a div that has an attribute \u003ccode\u003e[hidden]\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which makes sure the alert is shown only when the name input is invalid. The \u003ccode\u003epristine\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property allows us to hide the alert when we load a blank page.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you type anything in the name input and then delete it now, the alert will show. Let's apply this to all our form inputs.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e #goalForm='ngForm'\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"name\"\u0026gt;Name\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"newGoal.name\" name=\"name\" #name='ngModel' required\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Name is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"description\"\u0026gt;Description\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003etextarea\u003c/strong\u003e class=\"form-control\" id=\"description\" rows=\"4\" [(ngModel)]=\"newGoal.description\" name=\"description\" #description=\"ngModel\" required\u0026gt;\u0026lt;/\u003cstrong\u003etextarea\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"description.valid || description.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Description is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"complete\"\u0026gt;Completion\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type='date' id=\"complete\" [(ngModel)]=\"newGoal.completeDate\" name=\"completeDate\" #completeDate=\"ngModel\" required\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"completeDate.valid || completeDate.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Date is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e type=\"submit\" class=\"btn btn-success\"\u0026gt;Add Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we try adding to an input and then deleting it, the respective error messages will show indicating that the user will now be aware of any invalid inputs which improves user experience and also makes sure our application does not break from invalid data.\u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-form-validation"},{"id":777,"title":"Wednesday: Submit Form","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eSubmit Form\u003c/span\u003e\u003c/h1\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSubmitting forms using ngSubmit\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the bottom of our form, we have a submit button that's supposed to add a new goal to our array but if we click it right now, nothing happens. Let's make it work the way it is supposed to. We want it to add a goal to the goals array when this button is clicked. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo do this, we need to add use the \u003ccode\u003engSubmit\u003c/code\u003e\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003edirective from angular forms module that we imported earlier. Let's add it to our form:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e (ngSubmit)='submitGoal()' #goalForm='ngForm'\u0026gt;\u003cbr\u003e....\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the \u003ccode\u003e(ngSubmit)\u003c/code\u003e event attribute which calls the \u003ccode\u003esubmitGoal()\u003c/code\u003e function once the event is emitted. Let's now write the code to be executed when the \u003ccode\u003esubmitGoal()\u003c/code\u003e function is called. \u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/goal-form/goal-form.component.ts\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003eimport { Component, OnInit, Output, EventEmitter } from'@angular/core';\u003cbr\u003e\u003c/i\u003e...\u003cbr\u003eexportclass GoalFormComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  newGoal = new Goal(0,\"\",\"\",newDate());\u003cbr\u003e@Output() addGoal = new EventEmitter\u0026lt;Goal\u0026gt;();\u003cbr\u003e\u003cbr\u003e  submitGoal(){\u003cbr\u003ethis.addGoal.emit(this.newGoal);\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003ccode\u003eOutput\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003eEventEmitter\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e functions from \u003ccode\u003e@angular/core\u003c/code\u003e. We have then created the \u003ccode\u003eaddGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event emitter object which is of type \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that will emit an event to the parent component. We have then created the \u003ccode\u003esubmitGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function in which we use the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eemit\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method and pass in the new goal object we want to create. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince the \u003ccode\u003eaddGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event is being emitted to a parent component, we need to make sure the parent component is informed of this event being emitted. We want the goal component to be the parent component in this case, so let's write the code that will handle this event.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eapp-goal-form\u003c/strong\u003e (addGoal)=\"addNewGoal($event)\"\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u003cbr\u003e \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the template, we catch the \u003ccode\u003eaddGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event being emitted and define that it should call the \u003ccode\u003eaddNewGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function which takes in an event placeholder. Let's now define this function that is supposed to be executed by our parent component.\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    new Goal(1, 'Watch finding Nemo', 'Find an online version and watch merlin find his son',new Date(2019,9,14)),\u003cbr\u003e    new Goal(2,'Buy Cookies','I have to buy cookies for the parrot',new Date(2019,6,9)),\u003cbr\u003e    new Goal(3,'Get new Phone Case','Diana has her birthday coming up soon',new Date(2019,1,12)),\u003cbr\u003e    new Goal(4,'Get Dog Food','Pupper likes expensive snacks',new Date(2019,11,18)),\u003cbr\u003e    new Goal(5,'Solve math homework','Damn Math',new Date(2019,2,14)),\u003cbr\u003e    new Goal(6,'Plot my world domination plan','Cause I am an evil overlord',new Date(2019,3,14)),\u003cbr\u003e  ];\u003cbr\u003e....\u003cbr\u003e  addNewGoal(goal){\u003cbr\u003e    let goalLength = this.goals.length;\u003cbr\u003e    goal.id = goalLength+1;\u003cbr\u003e    goal.completeDate = new Date(goal.completeDate)\u003cbr\u003e    this.goals.push(goal)\u003cbr\u003e  }\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created the \u003ccode\u003eaddNewGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function that takes a goal object as an argument. We first need to change the \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property of the goal. We get the length of the array of goals and store it in the variable \u003ccode\u003egoalLength\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e we then add one to the \u003ccode\u003egoalLength\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and set that as the new \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e for the goal. We then set the \u003ccode\u003ecompleteDate\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property of the goal object to a \u003ccode\u003eDate\u003c/code\u003e Object. Lastly, we push the new goal to our array of goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf our server is still running, we can now add a new goal to the array and it will display on our application.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-submit-form"},{"id":778,"title":"Wednesday: Bootstrapping","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eBootstrapping\u003c/h2\u003e\r\n\u003cp\u003eAll Angular apps have at least one Angular Module which is the root module that is used to launch the application. By convention, it is called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhose configuration is contained in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.module.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Imports_4\"\u003e\u003c/a\u003eImports\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { BrowserModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {FormsModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/forms'\u003c/span\u003e;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalDetailsComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-details/goal-details.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal/goal.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { StrikethroughDirective } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./strikethrough.directive'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { DateCountPipe } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./date-count.pipe'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalFormComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-form/goal-form.component'\u003c/span\u003e;\r\n\r\n..........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our application, let's examine it. The first part is the Import section where we import external modules, components and directives that are used in our application.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"NgModule_decorator_23\"\u003e\u003c/a\u003eNgModule decorator\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@ngModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator identifies the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. It has metadata that tells Angular how to run the application.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Declarations_array_45\"\u003e\u003c/a\u003eDeclarations array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n ......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAngular knows what apps belong to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby finding them in the declaration array. We also place custom directives and pipes that we create in the declarations array.\u003cbr\u003eThe Angular CLI’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egenerate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand adds the generated pipes, components and directives to the declaration array automatically for us.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Imports_Array_63\"\u003e\u003c/a\u003eImports Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\nimports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn Angular, we group features into specific units called modules. We add a module to the imports array when the application wants to use its features. For example, since our application runs on the browser, we use features provided in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBrowserModule\u003c/code\u003e. We have also used some features like two-way data binding which are provided by the \u003cspan style=\"background-color: #ffffff; font-size: 10pt; color: #ff0000;\"\u003eformsModule\u003c/span\u003e in our application\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Providers_Array_78\"\u003e\u003c/a\u003eProviders Array\u003c/h4\u003e\r\n\u003cp\u003eWe can deliver services to different parts of an application using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edependency injection\u003c/code\u003e. We use the providers array to register the different services needed by our application. We do not have any services yet that is why our array is empty. We'll learn about services later on and we'll see them being registered in this array.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Bootstrapping_Array_82\"\u003e\u003c/a\u003eBootstrapping Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\n bootstrap: [AppComponent]\r\n .......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe launch the application by bootstrapping the root component which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Bootstraping_an_Appplication_93\"\u003e\u003c/a\u003eBootstrapping an Application\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003emain.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { enableProdMode } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { platformBrowserDynamic } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser-dynamic'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app/app.module'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { environment } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./environments/environment'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err =\u0026gt; \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(err));\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe bootstrap an Angular Application in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emain.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Here angular dynamically creates a browser platform and bootstraps the root Module which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e.The process of bootstrapping sets up an execution environment finding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebootstrap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand creating an instance of it within its selector tag in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eWe have now seen why the AppModule is important in our application and where it is used.\u003c/p\u003e","exportId":"wednesday-bootstrapping"},{"id":779,"title":"Wednesday: Deployment","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeploying Angular Apps\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAfter we create an application, we can deploy it to a remote server so that users can interact with it online. There are various ways of deploying applications and the one that has lots of advantages is Cloud Hosting. There are many cloud platforms which offer hosting services such as AWS(Amazon Web Services), Google Cloud Platform and Microsoft Azure. Most of these cloud hosting platforms offer payment plans for hosting but in our case, we will use Github which is free.  \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e Let's, therefore, see how we deploy our angular application and publish it to gh-pages on Github. At this point, we all have Github accounts so let's do the first thing.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e1. Create Github repo\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you had not created a Github repository prior to this, go ahead and create a repo in your Github account. After creating the repo, commit all your changes and push them to the repository you have created. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you had created your repo prior to this, also commit and push all your changes to your Github repository.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e2. Install angular-cli-ghpages\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have a tool at our disposal that we can use to easily deploy our angular app to gh-pages, the angular-cli-pages tool. We use this tool as a command on the angular CLI for the purpose of deployment. To install it, let us run this command on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm i angular-cli-ghpages --save-dev\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has installed angular-cli-ghpages globally in our operating system. We, therefore, don't have to install it again in case we need to use it.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e3. Run build\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe need to build our angular app for use in production. This simply means configuring our app to be useable on a remote server. While we were creating our app, we were serving our application on our local development server \u003c/span\u003e\u003ca href=\"http://localhost:4200/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://localhost:4200/\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The configuration for the local server will not serve the application when it is deployed on the remote server, gh-pages, which is why we need to build our app. Let's run this command on our terminal to build the application:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng build --prod --base-href \"https://GithubUserName.github.io/GithubRepoName/\" \u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake sure you put in your Github username in \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eGithubUserName \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eand the repository name you created in\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eGithubRepoName\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e4. Deploy to gh-pages\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt's now time to use angular-cli-ghpages. Let's run this command in our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npx angular-cli-ghpages --dir=dist/Project-name\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake sure you put the name of the project in the place of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eProject-name\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. You can find this in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eangular.json\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e file under \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edefaultProject\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is at the bottom of the file.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has created a gh-pages branch on Github for us. It has then read all the changes in our remote branch and pushed these changes to gh-pages while maintaining the build configuration that will ensure our application works while on the remote server. If we visit the URL we created earlier on our terminal, https://GithubUserName.github.io/GithubRepoName/,we can see our application running remotely, which means it has successfully been published on gh-pages.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-deployment"},{"id":757,"title":"Thursday:  Diary","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eThe Diary\u003c/h2\u003e\r\n\u003cp\u003eThis week you will create a personal diary application where you can write down your thoughts.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eYou as the user you should be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new diary entry.\u003c/li\u003e\r\n\u003cli\u003eSet the date for a new entry.\u003c/li\u003e\r\n\u003cli\u003eDelete the Diary entry.\u003c/li\u003e\r\n\u003cli\u003eAble to highlight titles in the diary entry\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse the Angular CLI to create the application.\u003c/li\u003e\r\n\u003cli\u003eCreate a clear README file.\u003c/li\u003e\r\n\u003cli\u003eHave a minimum of 15 clear commit messages.\u003c/li\u003e\r\n\u003cli\u003eCreate a diary model class.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive to highlight the titles.\u003c/li\u003e\r\n\u003cli\u003eCreate custom pipe to customize dates.\u003c/li\u003e\r\n\u003cli\u003eHave form component with the necessary Inputs.\u003c/li\u003e\r\n\u003cli\u003eYour app should be deployed.\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"thursday-diary"},{"id":809,"title":"Friday: Independent Project-Quotes","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":22.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2\u003eQuotes\u003c/h2\u003e\r\n\u003cp\u003eThis weeks project is to create an application where users can create quotes and have those quotes voted on whether they are terrible or are inspirational. \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eUser Requirements\u003c/h3\u003e\r\n\u003cp\u003eAs a user I would like to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new quote.\u003c/li\u003e\r\n\u003cli\u003eUpvote or downvote a quote.\u003c/li\u003e\r\n\u003cli\u003eDelete a quote\u003c/li\u003e\r\n\u003cli\u003eSee the number of upvotes and number of downvotes for each quote.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eProject Objectives\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour Project should be created using the Angular CLI.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom model class for the quote\u003c/li\u003e\r\n\u003cli\u003eYour project should have a custom\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirective\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto highlight the quote that has the highest upvotes.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a form component that has input sections for the quote, the author, and the person who submitted the quote.\u003c/li\u003e\r\n\u003cli\u003eEach quote must begin with an initial upvote and downvote value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eYour project should have a component to display the quote and a component to display quote details. For example, the quote details could have the author of the quote and the votes it has.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat shows how much time has passed since the quote was created. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour app must be of high quality in terms of basic functionality and it should be visually appealing.\u003c/li\u003e\r\n\u003cli\u003eYou must have a well-documented README document that gives a brief description of your application, How it works, How to install your application, A link to the deployed website and a license section.\u003c/li\u003e\r\n\u003cli\u003eYour project must be deployed and a link to the deployed website should be submitted.\u003c/li\u003e\r\n\u003cli\u003eYour project should have regular, well-defined commits with clear messages.\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"i8e407f3a449f7288221a69acd4fb4549"},{"id":1119,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1434982cf934c55eda9c0280e7c2b6d0"}]},{"id":75,"name":"Week 2","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"i9be5203a2d71075a504a9b29542ae513","items":[{"id":2063,"title":"Monday: Angular Week 2 Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis week we'll dive slightly deeper into the Angular framework by learning a bit more complex and interesting concepts.\u003c/p\u003e\r\n\u003cp\u003eWe will start by learning a concept called \u003cem\u003edependency injection\u003c/em\u003e. By understanding this concept, it will help us create something called a \u003cem\u003eservice\u003c/em\u003e which will, in turn, allow us to organize and share code across our application.\u003c/p\u003e\r\n\u003cp\u003eFrom there, we will also to learn about \u003cem\u003ethe Http Client\u003c/em\u003e module that will enable us to use APIs in our Angular application. \u003c/p\u003e\r\n\u003cp\u003eFinally, we will finish off by learning how to use a router to create and add dynamic pages to our application. Here, we'll learn how to pass data and information between different routes.\u003c/p\u003e\r\n\u003cp\u003eBy the end of the week, you will be able to;\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eConsume an API  to display random quotes in our application\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003eUnderstand the concept of Dependency Injection and how to use it\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003eUse routing modules create dynamic pages in the application.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eIn this section, you mentor will review your project based on the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eHave a well-designed landing page that displays Github information such as username, profile photo and a list of repositories.\u003c/li\u003e\r\n\u003cli\u003eUse Http Client services to access GitHub API.\u003c/li\u003e\r\n\u003cli\u003eUse two classes in your project.\u003c/li\u003e\r\n\u003cli\u003eImplement Http requests to search for GitHub users and GitHub repositories.  \u003c/li\u003e\r\n\u003cli\u003eHave a routing module.\u003c/li\u003e\r\n\u003cli\u003eImplement custom directives and custom pipes in your project.\u003c/li\u003e\r\n\u003cli\u003ePolished and portfolio-quality.\u003c/li\u003e\r\n\u003cli\u003eHave a well-documented README file.\u003c/li\u003e\r\n\u003cli\u003eThe project must be deployed and link submitted.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e  \u003c/p\u003e","exportId":"monday-angular-week-2-objectives"},{"id":817,"title":"Monday: Dependency Injections","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eDependency Injection\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDependency injection is a design pattern in which a class asks for dependencies from external sources instead of creating them itself. The reason we use dependency injection is because it separates the creation of an object from its usage, which enables us to replace dependencies without changing the class that uses them. This means that a class concentrates on fulfilling its responsibilities instead of creating the objects that help it fulfill those responsibilities. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat does this really mean? Let's do it practically. Let us create a folder outside our Goals project anywhere on your laptop and call it Car. Inside this folder, let's create 4 files, car.ts, engine.ts, wheels.ts and main.ts. We're going to familiarize ourselves with DI(Dependency Injection) with the concept of a car.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write code for a class that allows us to create an instance of a car. This class would look like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/car.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003eexport class Car{\u003cbr\u003e  engine: Engine;\u003cbr\u003e  wheels: Wheels;\u003cbr\u003e\u003cbr\u003e  constructor(){\u003cbr\u003e    this.engine = new Engine();\u003cbr\u003e    this.wheels = new Wheels();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  startEngine(){\u003cbr\u003e    this.engine.start();\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the objects/dependencies we need to create a Car. Inside the car class, we have created properties engine and wheels and assigned them their types respectively. In the constructor function, we have created instances of these dependencies using the new keyword. We have then created a method startEngine() which calls another function in our engine dependency. Let's create this function in engine dependency.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/engine.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Engine{\u003cbr\u003e  \u003cbr\u003e  start(){\u003cbr\u003e    console.log(\"Vroooooooom!\");\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a start function which simply logs a string on our console. We will not be using our wheels but let's create an empty class and assume that it's also a dependency that has its own properties and methods just like our engine.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/wheels.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Wheels{\u003cbr\u003e  \u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe'll use our main.ts file to run this car app. Let's write the code to run this app in this file.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/main.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Car } from './car';\u003cbr\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003efunction main(){\u003cbr\u003e  let car = new Car();\u003cbr\u003e\u003cbr\u003e  car.startEngine();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain();\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported our car, engine, and wheels and then created a function main(). We have created the car instance and called the startEngine() method in the function and at the bottom, we have called our main() function so it can execute this code. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince we have node installed, we can run this code on our terminal. Let's transpile this typescript code to javascript code using the typescript transpiler on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ tsc main.ts\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's run the transpiled javascript code directly on our terminal with node. If you recall, we installed node so we could execute javascript code directly from our terminal instead of using the browser console, so let's go ahead and do it:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ node main.js\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command creates our car and starts the engine for us which is great, we can see the output in the terminal. If we, however, wanted to use this car in another environment that has different dependencies, it would be difficult because the car creates the dependencies that it needs for itself. For example, in the state our car class is in right now, if we want to add doors to the car, we would have to add the code to make it define doors and still define this property in the constructor function. The same would apply if we wanted to change anything that exists in the car already. Point is, our code will be hard to maintain and scale, which may also end up making it messy and prone to errors.  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat's where Dependency Injection comes in handy. It relieves our Car class the responsibility of creating the dependencies it needs and makes it just consume these dependencies from external sources. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's implement this in our car. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/car.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003eexport class Car{\u003cbr\u003e\u003cbr\u003e  constructor(private engine: Engine,private wheels: Wheels){\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  startEngine(){\u003cbr\u003e    this.engine.start();\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we still have the imports for our dependencies. Our constructor function  no longer builds the dependencies the car class needs. This means that the car class consumes its dependencies, the engine and wheels class. We have used the private keyword to make these properties available only inside the class. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eInside the constructor function, we still call our startEngine() method. When we refactor our code like this, the Car class does not know how to create its dependencies which is amazing because we can now alter the dependencies that the class consumes more easily now. We now need to change the code in our main.ts file so we can fire up the engines again.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/main.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Car } from './car';\u003cbr\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003efunction main(){\u003cbr\u003e\u003cbr\u003e  let engine = new Engine();\u003cbr\u003e  let wheels = new Wheels()\u003cbr\u003e  let car = new Car(engine,wheels);\u003cbr\u003e\u003cbr\u003e  car.startEngine();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain();\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have still imported our classes. Inside the main function, we are now creating instances of engine, wheels, and car. When we create the car instance now, we specify that it should consume the engine and wheels dependencies that we have just instantiated. We end up by starting our engine and calling our main function. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's transpile this code in our terminal again to see the effect it has:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ tsc main.ts \u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's run our JS code on our terminal using node:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ node main.js\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAmazing, our engines still fire up! This is how Dependency Injection works. The car class does not create the dependencies it needs, it consumes them in the constructor. Now it is the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003emain.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e file that creates these dependencies and also creates an instance of the car, so the car can now consume these dependencies that have been created outside it and still work as expected. This is impactful because we can create a custom engine for each car rather than having all cars create the same default engine in their constructor. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAngular has its own inbuilt framework for dependency injection which we will use and that is how it works. This DI framework enables us to create an \u003cstrong\u003einjector \u003c/strong\u003ewith which we can register some classes and it figures out how to create these dependencies. Our job would be to ask the injector for the created dependencies. Dependency injection is good practice in so many languages and frameworks, not only in Angular. If you need more resources to understand the concept of dependency injection, feel free to look for them online, and also take a look at this \u003ca class=\"\" href=\"https://www.youtube.com/watch?v=IKD2-MAkXyQ\"\u003evideo\u003c/a\u003e.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-dependency-injections"},{"id":818,"title":"Monday: Creating a service","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating a Service\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAngular implements Dependency Injection using \u003c/span\u003e\u003cstrong\u003eservices\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. A \u003c/span\u003e\u003cstrong\u003eservice\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e shares data and information among classes that don't know each other. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur goals are stored in an array in a file that's in our project right now. This is because it's best practice that a component does not fetch or save data knowingly. A component should focus on presenting data and delegate data access to a service. This is why we moved our goals array to a new file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoals.ts. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also note that this data can come from a different source, like a database, a remote server or an API. Let's create a service that will share our goals among classes that need it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn our terminal, let's use this command to create the service:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service goal-service/goal\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command creates a folder named goal-service and inside it creates the service class file and the service test file.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class GoalService {\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe class file has the \u003c/span\u003e\u003cstrong\u003eInjectable\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e symbol imported and the class annotation uses it as a decorator. This marks this class as one that participates in dependency injection. The decorator accepts metadata for the class which means our service can also have its own dependencies. The \u003c/span\u003e\u003cstrong\u003eprovidedIn \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eproperty has a value \u003c/span\u003e\u003cstrong\u003e'root'\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e which means that this service is injectable throughout the application.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write code to make this service access our goals.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003eimport { Goals } from '../goals';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class GoalService {\u003cbr\u003e\u003cbr\u003e  getGoals(){\u003cbr\u003e    return Goals\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported our \u003cstrong\u003eGoals\u003c/strong\u003e array. In the service class, we have created a method \u003cstrong\u003egetGoals()\u003c/strong\u003e which returns our Goals array. We now have a service that gets goals for components or other services that need it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"monday-creating-a-service"},{"id":819,"title":"Monday: Register a Service","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eRegister a Service\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that we have a service, Angular needs to know that this service is available so it can inject it into components or other services that need it. To do this, we need to register a \u003c/span\u003e\u003cstrong\u003eprovider\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. A \u003c/span\u003e\u003cstrong\u003eprovider\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e is something that can create or deliver a service, in our case, it instantiates the \u003c/span\u003e\u003cstrong\u003eGoalService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class to provide the service.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe register our \u003c/span\u003e\u003cstrong\u003eGoalService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e as the provider for this service with an \u003c/span\u003e\u003cstrong\u003einjector\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. An \u003c/span\u003e\u003cstrong\u003einjector\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e is an object responsible for choosing and injecting the provider wherever it's required.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Angular CLI, by default, registers a provider with the \u003c/span\u003e\u003cstrong\u003eroot\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e injector after running the command \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service \u0026lt;service-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This happens when the CLI automatically supplies the provider metadata in the \u003c/span\u003e\u003cstrong\u003e@Injectable\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e decorator.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003c/span\u003e\u003cstrong\u003eprovidedIn\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata specifies that our service is available in the application at root level. When you provide a service at root level, Angular creates a single shared instance of the service and injects it into any class that asks for it. Registering a provider in the \u003c/span\u003e\u003cstrong\u003e@Injectable\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata is best practice since it allows Angular to optimize the app by removing the service if it turns out not to be used at all.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince our service is registered with a provider that injects it at root level, our service is now readily available throughout the application so we can inject it to any component or class that requires it.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's inject it into our goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003eimport { GoalService } from '../goal-service/goal.service';\u003cbr\u003e....\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals:Goal[];\u003cbr\u003e\u003cbr\u003e  constructor(goalService:GoalService) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e  }\u003cbr\u003e....\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we import our \u003c/span\u003e\u003cstrong\u003eGoalService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and also get rid of the \u003c/span\u003e\u003cstrong\u003eGoals\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e array since it is the service that will inject the goals from now on. In the component class, we create a property \u003c/span\u003e\u003cstrong\u003egoals\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assign it a type. We then tweak the Goal component class to consume the GoalService with the constructor. Inside the constructor function, we use the \u003c/span\u003e\u003cstrong\u003egetGoals()\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e method of the goal service to supply the goals.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf your local server is still running, you'll notice that our application still displays our goals which means that the service works as expected.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003ealert Service\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the moment, when the user deletes a goal, a prompt asks the user to confirm whether or not they want to delete the goal. Let's create another service that alerts the user once they delete a goal.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn our terminals, let's create a new service with this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service alert-service/alert\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write the code to describe what the service will do:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/alert-service/alert.service,ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class AlertService {\u003cbr\u003e\u003cbr\u003e  alertMe(message:string){\u003cbr\u003e    alert(message)\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur service is available at root level so we can inject it anywhere we like. Inside the service class, we have created the \u003c/span\u003e\u003cstrong\u003ealertMe()\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e method which accepts a message of string type. The method should use the alert function in javascript to display the message it receives.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's inject this service in our goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { AlertService } from '../alert-service/alert.service';\u003cbr\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals:Goal[];\u003cbr\u003e  alertService:AlertService;\u003cbr\u003e\u003cbr\u003e....\u003cbr\u003e  deleteGoal(isComplete, index){\u003cbr\u003e    if (isComplete) {\u003cbr\u003e      let toDelete = confirm(`Are you sure you want to delete ${this.goals[index].name}?`)\u003cbr\u003e\u003cbr\u003e      if (toDelete){\u003cbr\u003e        this.goals.splice(index,1)\u003cbr\u003e        this.alertService.alertMe(\"The goal has been deleted\")\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e....\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003c/span\u003e\u003cstrong\u003eAlertService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Inside the component class, we have created a property \u003c/span\u003e\u003cstrong\u003ealertService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assigned it our AlertService type. In the \u003c/span\u003e\u003cstrong\u003edeleteGoal()\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e function, we have added code that uses the alertMe() method from the alert service to display the message inside after the user has confirmed to delete a goal.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo make the service available in the component, we have added it to the constructor function and instantiated it inside the constructor function. If our server is still running, we can delete a goal to see the alert service at work.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"monday-register-a-service"},{"id":820,"title":"Monday :HttpClient","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eHttpClient\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHttpClient is a mechanism used by Angular to enable communication to remote servers and backend services using the HTTP protocol. We will use a random quote API which is a backend service in our app to display quotes from the API on our app. This will give us an understanding of how to use HttpClient in Angular to access backend services and remote servers. To make HttpClient available everywhere in the app, we import it in our root modules as follows.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { FormsModule } from '@angular/forms';\u003cbr\u003eimport { HttpClientModule } from '@angular/common/http';\u003cbr\u003e...\u003cbr\u003e@NgModule({\u003cbr\u003e...\u003cbr\u003e  imports: [\u003cbr\u003e...\u003cbr\u003e    FormsModule,\u003cbr\u003e    HttpClientModule\u003cbr\u003e  ],\u003cbr\u003e...\u003cbr\u003e})\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003c/span\u003e\u003cstrong\u003eHttpClientModule\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and added it to the imports array. We are going to use this module to access a random quote API and display the quotes on our app. If you paste this \u003c/span\u003e\u003ca href=\"http://quotes.stormconsultancy.co.uk/random.json\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://quotes.stormconsultancy.co.uk/random.json\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e link in your browser's address bar, you'll see a random quote that changes every time you refresh the webpage. You can install \u003c/span\u003e\u003ca href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eJSONView\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e, or \u003c/span\u003e\u003ca href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eJSONFormatter\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e from chrome web store to make the response more readable. The response looks something like this but the quote and author may vary:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eauthor\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"James O. Coplien\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eid\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e23\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003equote\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"You should name a variable using the same care with which you name a first-born child.\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003epermalink\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"\u003c/span\u003e\u003ca href=\"http://quotes.stormconsultancy.co.uk/quotes/23\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://quotes.stormconsultancy.co.uk/quotes/23\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe request returns a response that has four properties, author, id, quote, and permalink. We will make a request to the API and display the quotes in our app. We will display the author and quote only in our app. We, therefore, need to make Angular sieve out what we need by creating a quote class that will help us create quote instances. To create a class, let's execute this command in our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate class quote-class/quote\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command creates a folder quote-class, a class file, quote.ts, and a test file quote.spec.ts. Inside the class file, let's define how we want our quote instances created.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/quote-class/quote.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Quote {\u003cbr\u003e\u003cbr\u003e  constructor(public author:string, public quote:string ){}\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a constructor inside the Quote class and defined two public properties, author and quote, both of the string type.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can now make a HTTP request to the API in our goal component\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { HttpClient } from '@angular/common/http';\u003cbr\u003e...\u003cbr\u003eimport { Quote } from '../quote-class/quote';\u003cbr\u003e....\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e  \u003cbr\u003e  goals:Goal[];\u003cbr\u003e  alertService:AlertService;\u003cbr\u003e  quote:Quote;\u003cbr\u003e....\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService, private http:HttpClient) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e\u003cbr\u003e    interface ApiResponse{\u003cbr\u003e      author:string;\u003cbr\u003e      quote:string;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e    this.http.get\u0026lt;ApiResponse\u0026gt;(\"http://quotes.stormconsultancy.co.uk/random.json\").subscribe(data=\u0026gt;{\u003cbr\u003e      // Succesful API request\u003cbr\u003e      this.quote = new Quote(data.author, data.quote)\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported HttpClient and the Quote class. Inside the component class, we have created a property quote an assigned it the type Quote. In the constructor function, we have created a property http which is of the type HttpClient. Before we make the request, we need to inform Angular the kind of response we'll receive from the API by defining an interface which we have named ApiResponse. Inside the interface, we have specified that we'll be expecting a property author and quote which are both of the type string. We have then made a request to the API with the get function passing in the API URL accompanied by the interface for the data we expect to receive. We have then called the subscribe function which has a data function that is executed when the request is successful. We then create a new quote instance with the properties we get from the response.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's display this quote on our app.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....  \u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eblockquote\u003c/strong\u003e class=\"blockquote text-center\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"mb-0\"\u0026gt;{{quote.quote}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003efooter\u003c/strong\u003e class=\"blockquote-footer\"\u0026gt;\u0026lt;\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;{{quote.author}}\u0026lt;/\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003efooter\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003eblockquote\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have displayed our quote in a bootstrap blockquote, and if our server is still running, we can see a random quote displayed on our app below our goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"monday-httpclient"},{"id":821,"title":"Monday: Error Handling","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eError Handling\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat would happen if we make a bad request to the API and we get no response, or even worse, the servers are down and not working? We need to prepare our application for such an event so that it is not blank or broken. The subscribe function has an err function that gives us the capacity to handle errors. Let's use it to handle the occurrence of an error in which we get no response from the API.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e      this.http.get\u0026lt;ApiResponse\u0026gt;(\"http://quotes.stormconsultancy.co.uk/random.json\").subscribe(data=\u0026gt;{\u003cbr\u003e      // Succesful API request\u003cbr\u003e      this.quote = new Quote(data.author, data.quote)\u003cbr\u003e    },err=\u0026gt;{\u003cbr\u003e        this.quote = new Quote(\"Winston Churchill\",\"Never never give up!\")\u003cbr\u003e        console.log(\"An error occurred\")\u003cbr\u003e    })\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the err function and specified the quote instance that should be created when we get no response and the error message to be logged in the console. Try messing with the URL by in this file by adding or omitting a character, and you'll  see the err function handling the response for us.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsing Loaders\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince we are making requests to a remote server, it would be necessary to convince the user that there is something happening in the background, as the app awaits a response. This enhances the user experience of the app. We will do this using a \u003ca href=\"https://github.com/MurhafSousli/ngx-progressbar/blob/master/README_V3.md#installation\"\u003eloader\u003c/a\u003e which is a type of a progress bar. It creates a visual animation in our app that convinces the users that there is something happening. To install this loader module, let's run this command in our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm install --save @ngx-progressbar/core@3.0.2 @ngx-progressbar/http-client@3.0.2\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis module needs a supplementary module that looks at observable data for the loader to work properly called rxjs-compat. Let's install it using the following command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm install --save rxjs-compat\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now add it to our root modules of our app to make it available for use.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { NgProgressModule } from '@ngx-progressbar/core';\u003cbr\u003eimport { NgProgressHttpClientModule } from '@ngx-progressbar/http-client';\u003cbr\u003e...\u003cbr\u003eimports: [\u003cbr\u003e    ....\u003cbr\u003e    NgProgressModule.forRoot(),\u003cbr\u003e    NgProgressHttpClientModule\u003cbr\u003e],\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have imported the normal loader and the loader that listens for our HTTP requests from the app and automatically displays progress according to our apps requests. We have then added both to the \u003c/span\u003e\u003cstrong\u003eimports \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003earray. The forRoot() method makes the loader available and configurable at the root level of our app and supplies the dependencies it needs. We don't need any more configurations since the NgProgressHttpClientModule works with the requests made from our app. We only need to display the loader in our template.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;MY GOALS\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e.....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added tags in the template placed at the top where we want to see our progress bar. When we run our server and go to our app in the browser, we see the loader appear every time we refresh the page showing the progress of every new request.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"monday-error-handling"},{"id":822,"title":"Monday: HTTP service","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreate an HTTP service\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe earlier saw that services are very helpful in dependency injection. To clean up our app's code, let's create a service that will deliver our quotes to any component that needs them.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnvironment Variables\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs we clean up our code, it is also necessary and best practice to keep crucial data like API keys, database passwords, e.t.c,  away from prying eyes in our apps. The reason is that when we push this kind of data, it puts our app at the risk of malicious attacks since any user can see and interfere with your code on Github if you're not using a private repository, making the app insecure for users to interact with. To hide this kind of data, we put it in a file or folder which we then include in a \u003c/span\u003e\u003cstrong\u003egitignore \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003efile and when we push our code to production, all the folders or files in the \u003c/span\u003e\u003cstrong\u003egitignore \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003efile are not exposed to users and are not being tracked on version control. In our case, we will use the environment file in the environments folder to hide our API's url. Let's open this file and include this code in the file:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/environments/environment.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport const environment = {\u003cbr\u003e  production: false,\u003cbr\u003e  apiUrl:\"http://quotes.stormconsultancy.co.uk/random.json\"\u003cbr\u003e};\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a property apiUrl and assigned it to our random quotes API url. Please note that we have put the API url in this file for practice, assuming that it is as crucial as a database password. This means when we push our code to Github and deploy our app, the url will be hidden and therefore requests to the API will not happen. This also implies that we will always receive an error message and our error quote in deployment. In future, we'll hide more crucial data, unlike the url in this case. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo hide this file, let's go to our .gitignore file and add the file there.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoals/.gitignore\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003eenvironment.ts\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur API url is now hidden whenever we push our code to Github. In our terminals, let's execute this command to create the service for our quotes:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service quote-http/quote-request\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write the code for our service in the service class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eHTTP requests using Promises\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA promise is an object representing the eventual completion or failure of an asynchronous process. Our asynchronous process here is the request we are making to the API.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's use a promise in our service.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/quote-http/quote-request.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003eimport { HttpClient } from '@angular/common/http';\u003cbr\u003eimport {environment } from '../../environments/environment';\u003cbr\u003eimport { Quote } from '../quote-class/quote';\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class QuoteRequestService {\u003cbr\u003e\u003cbr\u003e  quote: Quote;\u003cbr\u003e\u003cbr\u003e  constructor(private http:HttpClient) {\u003cbr\u003e    this.quote = new Quote(\"\",\"\");\u003cbr\u003e   }\u003cbr\u003e\u003cbr\u003e   quoteRequest(){\u003cbr\u003e     interface ApiResponse{\u003cbr\u003e       quote:string;\u003cbr\u003e       author:string;\u003cbr\u003e     }\u003cbr\u003e     let promise = new Promise((resolve,reject)=\u0026gt;{\u003cbr\u003e       this.http.get\u0026lt;ApiResponse\u0026gt;(environment.apiUrl).toPromise().then(response=\u0026gt;{\u003cbr\u003e         this.quote.quote = response.quote\u003cbr\u003e         this.quote.author = response.author\u003cbr\u003e\u003cbr\u003e         resolve()\u003cbr\u003e       },\u003cbr\u003e       error=\u0026gt;{\u003cbr\u003e         this.quote.quote = \"Never, never, never give up\"\u003cbr\u003e         this.quote.author = \"Winston Churchill\"\u003cbr\u003e\u003cbr\u003e         reject(error)\u003cbr\u003e       })\u003cbr\u003e     })\u003cbr\u003e     return promise\u003cbr\u003e   }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported HttpClient to enable us to make a request to the API, the Quote class and the environment class in which we put our API url. We have then created a property quote and assigned it the type of our Quote class initializing it with empty strings inside the constructor function. We have also injected a private http property of the type HttpClient in the constructor. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then defined a quoteRequest() method that defines the ApiResponse interface and the promise instance. We have then used the get function and passed in the apiUrl from the environment object with the interface. We have used toPromise() to convert the Http Request to a promise. We have called the then function and passed in the response and error functions as arguments. The response function is called when the HTTP request is successful and returns a response. If successful, we update the properties of the quote instance with values from the response and call the resolve function. If we encounter an error, we have passed in default values for creating a quote instance in the error function which is called when there is an error.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now call the service in our goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003eimport { GoalService } from '../goal-service/goal.service';\u003cbr\u003eimport { AlertService } from '../alert-service/alert.service';\u003cbr\u003eimport { QuoteRequestService } from '../quote-http/quote-request.service';\u003cbr\u003e\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e...\u003cbr\u003e  quote:Quote;\u003cbr\u003e...\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService, private quoteService:QuoteRequestService) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e\u003cbr\u003e    this.quoteService.quoteRequest()\u003cbr\u003e    this.quote = this.quoteService.quote\u003cbr\u003e  }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have imported our QuoteRequestService at the top and then injected it into our constructor. Inside the ngOnInit lifecycle hook, we have called the quoteRequest() method from the service and created a quote instance with the promise object we will receive from the service. If we run our server at this point, our quotes will be displayed on the application as usual but using a service this time round.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"monday-http-service"},{"id":2064,"title":"Monday:Practice: Meal Tracker","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal: \u003c/strong\u003eContinue practising creating applications with Angular Cli while familiarizing yourself with the process of using services.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm up\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is Dependency Injection? Why is it important?\u003c/li\u003e\r\n\u003cli\u003eWhat are services in angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is Http service used for?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode\u003c/h3\u003e\r\n\u003ch4\u003eMeal Tracker\u003c/h4\u003e\r\n\u003cp\u003eCreate a meal tracking application where the user gets to keep track of the food they consume in each day. Here are some user stories to help you get started;\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I want to log a food I have eaten by submitting a form with food name, calories and details.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to view a list of foods I have logged.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want options to view all foods, only high-calorie foods (more than 500 calories), or only lower-calorie foods (less than 500 calories).\u003c/li\u003e\r\n\u003cli\u003eI want to click a food to edit its name, details or calories (in case I decide to pretend my fries were 100 calories instead of 365).\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eMake sure you use at least one service to help you retrieve the meal from the meal array.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-practice-meal-tracker"},{"id":832,"title":"Tuesday: Routing","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouting\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn Angular, routing enables us to navigate from one view to another. This means users can click links or buttons that change whatever is displayed on the app. In our app, we will create a navigation bar, that will enable us to change to different views in order to understand how routing works.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by creating a component that will give more information about the app. We will call it the  \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eabout \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecomponent. On our terminals, let's execute this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component about\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the HTML template file of our about component, let's add a description of our app.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/about.about.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"jumbotron\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e class=\"display-4 text-center\"\u0026gt;About Goals App\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e class=\"my-4\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"lead text-center\"\u0026gt;An Angular app that let's you create your goals and gives you quotes from the world of computing!\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used a bootstrap jumbotron and written a description of our app. Feel free to describe your app in your own words and style. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppRoutingModule\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo implement routing in Angular, we use a module known as the AppRoutingModule. We import it and feed it with simple instructions in the form of code and it does the navigation for us. Interestingly, when we generate a new app in angular with the command ng new \u0026lt;app-name\u0026gt;, this is one of the modules that the Angular CLI automatically adds to our app for us. If we recall using this command when creating our Goals app, the first prompt was whether or not we want to use Angular routing, to which we agreed. This is what made the CLI add this module for us. Under the directory src/app, there is a file named app-routing.module.ts which the CLI created for us and looks like this:\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { Routes, RouterModule } from '@angular/router';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [];\u003cbr\u003e\u003cbr\u003e@NgModule({\u003cbr\u003e  imports: [RouterModule.forRoot(routes)],\u003cbr\u003e  exports: [RouterModule]\u003cbr\u003e})\u003cbr\u003eexport class AppRoutingModule { }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis file has everything we will need to create routes in our app, which we will do soon. Checking our root level modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we see the \u003c/span\u003e\u003cstrong\u003eAppRoutingModule\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e module is already imported and added to the @NgModule \u003c/span\u003e\u003cstrong\u003eimports \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003earray meaning we can use it in our app. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe configure our routes using \u003c/span\u003e\u003cstrong\u003eRoutes\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e  which is a service that presents a given component view for a specific URL. We have imported it at the top of our routing module file.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAdding Routes\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRoutes tell the router which view to display when a user clicks a link or pastes a URL in the browser address bar. A typical Angular route has two properties, a path which is a string that matches the URL in the browser address bar and a component which is the component that the router should create when navigating to this route.   \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us add two routes, one that will navigate to our goals component and another to the about component we have just created.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { Routes, RouterModule } from '@angular/router';\u003cbr\u003eimport { GoalComponent } from './goal/goal.component';\u003cbr\u003eimport { AboutComponent } from './about/about.component';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [\u003cbr\u003e  { path: 'goals', component: GoalComponent},\u003cbr\u003e  { path: 'about', component: AboutComponent},\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003e@NgModule({\u003cbr\u003e  imports: [RouterModule.forRoot(routes)],\u003cbr\u003e  exports: [RouterModule]\u003cbr\u003e})\u003cbr\u003eexport class AppRoutingModule { }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have first imported our two components at the top of our file. Inside our routes array, we have defined the path and component for each route. The RouterModule.forRoot(routes) in the imports initializes the router and gets it listening to the browser for location changes. The forRoot() method makes the router configurable at root level and supplies the service providers and directives needed for routing. This is the same method we used when we configured the loader because it serves the same purpose, making a module available at root level and supplying any dependencies it needs.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterOutlet\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt is now the router's job to take care of what is being displayed on the application. RouterOutlet is a directive of the RoutingModule that has a selector \u0026lt;router-outlet\u0026gt; which handles routing for us.  Let's use this selector and put the router in charge of displaying different views. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have replaced the \u0026lt;app-goal\u0026gt; selector with the \u0026lt;router-outlet\u0026gt; selector because the router will be responsible for views from now on. If we keep the \u0026lt;app-goal\u0026gt; selector, our app will display the goal component and its child components only, which beats our purpose for creating routes. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's run our server and try out these routes. On the browser address bar, put in your routes and see the difference, for example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ca href=\"http://localhost:4200/goals\"\u003ehttp://localhost:4200/goals\u003c/a\u003e to display the view for the goals, and \u003ca href=\"http://localhost:4200/about\"\u003ehttp://localhost:4200/about\u003c/a\u003e to change the view to our about component. Works, right? Our router is functional which is great!\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"tuesday-routing"},{"id":833,"title":"Tuesday: Router-Outlet","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterLink\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt's annoying if a user has to keep putting in URLs in the browser address bar to navigate to a different view. This is an example of bad user experience. Let's create a navbar with which users can quickly switch to different views with this command on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component navbar\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe will use a bootstrap navbar for this component.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/navbar/navbar.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003enav\u003c/strong\u003e class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"navbar-brand\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;GOALS APP\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"navbar-toggler-icon\"\u0026gt;\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"navbar-nav\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link active\"\u0026gt;Goals\u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"sr-only\"\u0026gt;(current)\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link\"\u0026gt;About\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003enav\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a navbar with two elements, Goals and About. To display our navbar component whether or not we have a view, let's add its selector to our root template file.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eapp-navbar\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eapp-navbar\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we run our server, we can see our navbar displayed. If we click any of the navbar links however, there is no change in the views.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterLink\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo make these navigation links work, we use the routerLink attribute which is from the RouterLink directive found in the RouterModule. Remember directives? Let's make our links work:\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/navbar/navbar.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003enav\u003c/strong\u003e class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"navbar-brand\" routerLink=\"goals\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;GOALS APP\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"navbar-toggler-icon\"\u0026gt;\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"navbar-nav\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link active\" routerLink=\"goals\"\u0026gt;Goals\u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"sr-only\"\u0026gt;(current)\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link\" routerLink=\"/about\"\u0026gt;About\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003enav\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the attribute routerLink to the navbar-brand element, Goals navigation link and About navigation link and equated each to the exact route whose view we want to display. The RouterLink directive will now turn user clicks on the elements with the routerLink attribute into router navigations. If our server is still running, we can click on these navbar elements and we'll see the views change respectively to the routes we have assigned them.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterLinkActive\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe RouterLinkActive directive also has a routerLinkActive attribute which changes the CSS properties of an active route. This improves the user experience in our app by visually informing users that they are on a specific page(or a specific view). Let's add it to the elements in our navbar.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/navbar/navbar.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003enav\u003c/strong\u003e class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"navbar-brand\" routerLink=\"/goals\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;GOALS APP\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"navbar-toggler-icon\"\u0026gt;\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"navbar-nav\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link active\" routerLink=\"goals\" routerLinkActive='active'\u0026gt;Goals\u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"sr-only\"\u0026gt;(current)\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link\" routerLink=\"/about\" routerLinkActive='active'\u0026gt;About\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003enav\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the routerLinkActive attribute to all our navbar elements that navigate to a specific route and equated it to active. Any given routerLink will be active only if its URL is the exact match of the current URL. To test out this feature, click any of these links on the navbar and see their visual appearance change.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"tuesday-router-outlet"},{"id":834,"title":"Tuesday: 404 Pages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003e404 Pages\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have all experienced times when we are web browsing and the browser responds with a 404 error of not finding the resource we are looking for which looks similar to this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/404page.png\" alt=\"404page.png\" width=\"2558\" height=\"1216\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is google's 404 page and different applications have their own customized 404 pages. It's very informative to a user as opposed to having a blank page. As much as it might be disappointing to the user, it improves the user experience. In severe cases, it keeps our application from breaking when a user requests for a resource that is generated by the app but isn't present and the occurrence of that error isn't mitigated by the app. Let's create a component for error pages in our application with this command on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component not-found\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the template file of this component, let's include this code:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/not-found/not-found.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"alert alert-danger\" role=\"alert\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e class=\"text-center\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;Sorry, we couldn't find what you're looking for\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"text-center\"\u0026gt;Please check your URL!\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used a bootstrap alert component in the template file. We now need to inform our router to direct users to this component if they look for a resource that isn't found in the app.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { NotFoundComponent } from './not-found/not-found.component';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [\u003cbr\u003e  { path: 'goals', component: GoalComponent},\u003cbr\u003e  { path: 'about', component: AboutComponent},\u003cbr\u003e  { path:'**', component:NotFoundComponent},\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported our NotFoundComponent. We have then defined a route whose path has wildcards and directed this path to the NotFoundComponent. The wildcards define a route that is not present in our routes array. So in the case a user tries to look up a route that does not exist in the routes of our app, they will be taken to the not-found component. Let's fire up our servers and try requesting a route in the address bar that doesn't exist in our app to see our apps error page working. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRedirect\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNone of our routes caters for an empty path in our app. This is why when we load the path \u003c/span\u003e\u003ca href=\"http://localhost:4200/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://localhost:4200\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e, only the navbar shows on our app. We can implement a redirect in our app so that when a user loads an empty path, they don't have an empty screen but instead see the goals. Let's configure a route for empty paths.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e { NotFoundComponent } \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e'./not-found/not-found.component'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econst\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e routes: Routes = [\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'goals'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, component: GoalComponent},\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'about'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, component: AboutComponent},\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'**'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, component:NotFoundComponent},\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path: '', redirectTo:\"/goals\", pathMatch:\"full\"},\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e];\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created an empty path with the redirectTo property that points to the path of the GoalComponent. A redirect requires the pathMatch property which tells the router how to match the URL to with the path given. In our case, the router will only redirect to the /goals path if the URL given is empty ' '. If our server is still running and we load our application, we are redirected to the GoalComponent instantly.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"tuesday-404-pages"},{"id":839,"title":"Tuesday: Passing Parameters","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003ePassing Parameters\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can make one more change in our application. We can have the details of a goal displayed separately. This will help us learn how to pass parameters in a route. Let's create a route that maps to a specific goal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { Routes, RouterModule } from '@angular/router';\u003cbr\u003eimport { GoalComponent } from './goal/goal.component';\u003cbr\u003eimport { AboutComponent } from './about/about.component';\u003cbr\u003eimport { NotFoundComponent } from './not-found/not-found.component';\u003cbr\u003eimport { GoalDetailComponent } from './goal-detail/goal-detail.component';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [\u003cbr\u003e  { path: 'goals', component: GoalComponent},\u003cbr\u003e  { path: 'about', component: AboutComponent},\u003cbr\u003e  { path: 'goals/:id', component: GoalDetailComponent },\u003cbr\u003e  { path: '', redirectTo:\"/goals\", pathMatch:\"full\"},\u003cbr\u003e  { path:'**', component:NotFoundComponent},\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003e@NgModule({\u003cbr\u003e  imports: [RouterModule.forRoot(routes)],\u003cbr\u003e  exports: [RouterModule]\u003cbr\u003e})\u003cbr\u003eexport class AppRoutingModule { }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a route with the path goals/:id which displays the GoalDetailComponent.  The :id token allows us to pass a parameter in the route. We will pass in the id of a goal to retrieve a specific goal. We'll also need to make some changes in our templates.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;MY GOALS\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eh6\u003c/strong\u003e id={{i}} appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eh6\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"btn btn-primary\" (click)='goToUrl(goal.id)'\u0026gt;View Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"btn btn-outline-danger\" (click)='deleteGoal(i)'\u0026gt;Delete Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eapp-goal-form\u003c/strong\u003e (addGoal)=\"addNewGoal($event)\"\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eblockquote\u003c/strong\u003e class=\"blockquote text-center\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"mb-0\"\u0026gt;{{quote.quote}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003efooter\u003c/strong\u003e class=\"blockquote-footer\"\u0026gt;\u0026lt;\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;{{quote.author}}\u0026lt;/\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003efooter\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003eblockquote\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNotice we have gotten rid of the toggle Details button and replaced it with a view Details button and next to it a Delete Goal button. We have also gotten rid of the div that was displaying the Goal Detail component. The View Details button has a click event listener which calls the goToUrl() function that takes in the goal id that is responsible for triggering the navigation to the GoalDetails component of a specific goal. The Delete Goal button also has a click event listener that calls the deleteGoal() function which deletes a goal from the goals array. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's create these functions that we have added to the GoalComponent.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { Router } from '@angular/router';\u003cbr\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e  \u003cbr\u003egoToUrl(id){\u003cbr\u003e    this.router.navigate(['/goals',id])\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  deleteGoal(index){\u003cbr\u003e    let toDelete = confirm(`Are you sure you want to delete ${this.goals[index].name}`)\u003cbr\u003e\u003cbr\u003e    if (toDelete){\u003cbr\u003e      this.goals.splice(index,1)\u003cbr\u003e      this.alertService.alertMe(\"Goal has been deleted\")\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService, private quoteService:QuoteRequestService, private router:Router) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the Router module and injected it into the constructor with the router property. We have then created the goToUrl() function with an id as an argument. We have used the router's navigate function and passed an array that has the first part of the arguments as the path to the goals and the second part being the id of the goal. We have then kept the deleteGoal() function which deletes a goal from the array of goals.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur buttons are too close to each other. Let's add some CSS to create some space between them.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.css\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e.btn{\u003cbr\u003e  margin:2px;\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a margin to the elements in our component that have the btn class. Remember that this style will only apply for those elements in the goal component. If we wanted to make this style global, we would put it in the app.component.css file instead.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating a getGoal method\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince our goal service is still delivering our goals, let's create a method in the service that will help us retrieve one goal.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003eimport { Goals } from '../goals';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class GoalService {\u003cbr\u003e\u003cbr\u003e  getGoals(){\u003cbr\u003e    return Goals\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  getGoal(id){\u003cbr\u003e    for (let goal of Goals){\u003cbr\u003e      if (goal.id == id){\u003cbr\u003e        return goal;\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a getGoal() method that takes in the id of a goal. We have then created a for-loop that checks whether the id of a goal is the same as the id parameter passed in, and if it is, then that specific goal is returned and we break out of that loop. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt will be the GoalDetail Component that will be displaying the specific goal so let's get it ready for that.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003eimport {  ActivatedRoute, ParamMap } from '@angular/router';\u003cbr\u003eimport { GoalService } from '../goal-service/goal.service';\u003cbr\u003e...\u003cbr\u003eexport class GoalDetailComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goal:Goal;\u003cbr\u003e\u003cbr\u003e  constructor(private route:ActivatedRoute, private service:GoalService) { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e    let id = this.route.snapshot.paramMap.get('id');\u003cbr\u003e    this.goal = this.service.getGoal(id)\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported GoalService, ActivatedRoute to retrieve parameters from the route and ParamMap to provide methods that handle parameter access from the router. We have then injected the ActivatedRoute and GoalService in our constructor. Inside the lifecycle hook, ngOnInit(), we have used the route.snapshot to get the initial value of the route parameter, then we have extracted the id using the get method provided by paramMap function. We have passed this id we have retrieved to our service's getGoal() method which returns the specific goal which we assign to our goal property.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's change the look of our GoalDetail. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-2\"\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-8\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"card\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"card-body\"\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003eh5\u003c/strong\u003e class=\"card-title\"\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003eh5\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"card-text\"\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days.\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-2\"\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have put our goal details in a bootstrap card. We can now serve our application and see what happens when we click the view details button. That's exactly how we wanted to display our goal details.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","exportId":"tuesday-passing-parameters"},{"id":2065,"title":"Tuesday:Practice: Moringa Overflow","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e  Get comfortable using Angular Cli and practice the process of angular routing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm Up \u003c/h3\u003e\r\n\u003cp\u003eDiscuss the following questions with your pair\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is routing in Angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is this tag used for \u0026lt;router-outlet\u0026gt;\u0026lt;/router-outlet\u0026gt; ?\u003c/li\u003e\r\n\u003cli\u003eWhat is a routerLink?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode \u003c/h3\u003e\r\n\u003ch4\u003eMoringa Overflow\u003c/h4\u003e\r\n\u003cp\u003eThe project for today will be to create a basic discussion /forum site where users can post questions or news about a certain topic. Much like stack overflow but we will call it Moringa overflow. Here are some user stories to help you get the bigger picture of the project.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see several discussion categories on the landing page\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click a category and view its collection of posts\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click on a post and see its details\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to add a post to my desired category\u003c/li\u003e\r\n\u003cli\u003eAs a user,  I would like to have the option of deleting my post\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to update my post if necessary.\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"tuesday-practice-moringa-overflow"},{"id":826,"title":"Wednesday: Two Day Project","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eTwo Day Project\u003c/h2\u003e\r\n\u003cp id=\"e2f4\" class=\"graf graf--p graf-after--figure\"\u003eFor the next two days, you will be creating a\u003cspan\u003e \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://giphy.com/\" target=\"_blank\" data-href=\"https://giphy.com/\"\u003egiphy website\u003c/a\u003e replica\u003cspan\u003e, using the \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://api.giphy.com/\" target=\"_blank\" data-href=\"https://api.giphy.com/\"\u003egiphy api\u003c/a\u003e. By the end of the two days, your app should \u003c/p\u003e\r\n\u003cul class=\"postList\"\u003e\r\n\u003cli id=\"e163\" class=\"graf graf--li graf-after--p\"\u003edisplay trending gifs on app load shown in a column/grid\u003c/li\u003e\r\n\u003cli id=\"2d96\" class=\"graf graf--li graf-after--li\"\u003ehave an input which allows you to search for specific gifs\u003c/li\u003e\r\n\u003cli id=\"6fce\" class=\"graf graf--li graf-after--li\"\u003eat the bottom of the results, there is a ‘load more’ button, which gets more gifs using that search term.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eUse the concepts you have been learning in Angular to build up the application. Make sure the application is at portfolio quality. If you have some time left off you can experiment by adding some extra features like sharing on social media.\u003c/p\u003e\r\n\u003cp id=\"5e3d\" class=\"graf graf--p graf-after--li\"\u003e \u003c/p\u003e","exportId":"wednesday-two-day-project"},{"id":827,"title":"Thursday: Interview Questions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eTwo Day Project Continues\u003c/h2\u003e\r\n\u003cp\u003eContinue building with your pair the giphy\u003cstrong\u003e clone website.\u003c/strong\u003e Make sure you make regular commits while pushing your code to Github and make sure you have clear commit messages\u003c/p\u003e\r\n\u003ch2\u003eAngular 6 Interview Questions\u003c/h2\u003e\r\n\u003cp\u003eThese are some of the Interview questions you might encounter on Angular 6. discuss with your pair and also search online for other questions.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are the key components of Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Modules in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Components in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are Angular 6 directives? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is CLI?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Dependency Injection? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhen does ngOnInit event get called in Angular 6 Application Lifecycle?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhat are Event Emitters and how do they work in Angular 6?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eExplain Bootstrapping in an Angular Project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"thursday-interview-questions"},{"id":871,"title":"Friday: Independent Project","type":"Assignment","indent":0,"locked":true,"submissionTypes":"a website url","graded":true,"pointsPossible":22.0,"dueAt":null,"lockAt":"2019-08-23T18:00:00+03:00","unlockAt":null,"requirement":null,"completed":false,"exportId":"i6b564de32a15ddd798f7fc7e7a232dbf"},{"id":1120,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1434982cf934c55eda9c0280e7c2b6d0"}]}],"pages":[{"exportId":"monday-angular-file-review","title":"Monday: Angular File Review","type":"WikiPage","content":"\u003ch2\u003e\n\u003cspan\u003e Angular File \u003c/span\u003eReview\u003c/h2\u003e\r\n\u003cp\u003eWe can now examine the files inside our goals app. A good starting point is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile where we can see all the Angular commands we can use to work with our app.\u003c/p\u003e\r\n\u003cp\u003eWe will mostly work inside our\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc/\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003esrc\r\n|\r\n|---app/\r\n|      | ---app.component.css\r\n|      | ---app.component.html\r\n|      | ---app.component.spec.ts\r\n|      | ---app.component.ts\r\n|      | ---app.module.ts\r\n|---assets/\r\n|      | ---.gitkeep\r\n|---environments/\r\n|      | ---environment.prod.ts\r\n|      | ---environment.ts\r\n|---favicon.ico\r\n|---index.html\r\n|---main.ts\r\n|---polyfills.ts\r\n|---styles.css\r\n|---test.ts\r\n|---tsconfig.app.json\r\n|    tsconfig.spec.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese files and folders are what are found in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder where our app will live. Angular documentation defines them this way:\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappcomponenttshtmlcssspects_30\"\u003e\u003c/a\u003eapp/app.component.{ts,html,css,spec.ts}\u003c/h3\u003e\r\n\u003cp\u003eDefines the AppComponent along with an HTML template, CSS stylesheet, and a unit test. It is the root component of what will become a tree of nested components as the application evolves.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappmodulets_34\"\u003e\u003c/a\u003eapp/app.module.ts\u003c/h3\u003e\r\n\u003cp\u003eDefines AppModule, the root module that tells Angular how to assemble the application. Right now it declares only the AppComponent. Soon there will be more components to declare.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"assets_38\"\u003e\u003c/a\u003eassets/*\u003c/h3\u003e\r\n\u003cp\u003eA folder where you can put images and anything else to be copied wholesale when you build your application.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"environments_42\"\u003e\u003c/a\u003eenvironments/*\u003c/h3\u003e\r\n\u003cp\u003eThis folder contains one file for each of your destination environments, each exporting simple configuration variables to use in your application. The files are replaced on-the-fly when you build your app. You might use a different API endpoint for development than you do for production or maybe different analytics tokens. You might even use some mock services. Either way, the CLI has you covered.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"faviconico_46\"\u003e\u003c/a\u003efavicon.ico\u003c/h3\u003e\r\n\u003cp\u003eEvery site wants to look good on the bookmark bar. Get started with your very own Angular icon.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"indexhtml_50\"\u003e\u003c/a\u003eindex.html\u003c/h3\u003e\r\n\u003cp\u003eThe main HTML page that is served when someone visits your site. Most of the time you’ll never need to edit it. The CLI automatically adds all js and css files when building your app so you never need to add any \u0026lt;script\u0026gt; or \u0026lt;link\u0026gt; tags here manually.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"maints_54\"\u003e\u003c/a\u003emain.ts\u003c/h3\u003e\r\n\u003cp\u003eThe main entry point for your app. Compiles the application with the Just-in-Time (JIT) compiler and bootstraps the application’s root module (AppModule) to run in the browser. You can also use the Ahead-of-Time (AOT) compiler without changing any code by appending the–aot flag to the ng build and ng serve commands.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"polyfillsts_58\"\u003e\u003c/a\u003epolyfills.ts\u003c/h3\u003e\r\n\u003cp\u003eDifferent browsers have different levels of support of the web standards. Polyfills help normalize those differences. You should be pretty safe with core-js and zone.js, but be sure to check out the Browser Support guide for more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"stylescss_62\"\u003e\u003c/a\u003estyles.css\u003c/h3\u003e\r\n\u003cp\u003eYour global styles go here. Most of the time you’ll want to have local styles in your components for easier maintenance, but styles that affect all of your app need to be in a central place.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"testts_66\"\u003e\u003c/a\u003etest.ts\u003c/h3\u003e\r\n\u003cp\u003eThis is the main entry point for your unit tests. It has some custom configuration that might be unfamiliar, but it’s not something you’ll need to edit.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigappspecjson_70\"\u003e\u003c/a\u003etsconfig.{app|spec}.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for the Angular app (tsconfig.app.json) and for the unit tests (tsconfig.spec.json).\u003c/p\u003e\r\n\u003ch2\u003e\n\u003ca id=\"The_root_folder_74\"\u003e\u003c/a\u003eThe root folder\u003c/h2\u003e\r\n\u003cpre\u003e\u003ccode\u003eGoals\r\n|---e2e/\r\n|   |---app.e2e-spec.ts\r\n|   |---app.po.ts\r\n|   |---tsconfig.e2e.json\r\n|---node_modules/...\r\n|---src/...\r\n|---.angular-cli.json\r\n|---.editorconfig\r\n|---.gitignore\r\n|---karma.conf.js\r\n|---package.json\r\n|---protractor.conf.js\r\n|---README.md\r\n|---tsconfig.json\r\n|---tslint.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"e2e_93\"\u003e\u003c/a\u003ee2e/\u003c/h3\u003e\r\n\u003cp\u003eInside e2e/ live the end-to-end tests. They shouldn’t be inside src/ because e2e tests are really a separate app that just so happens to test your main app. That’s also why they have their own tsconfig.e2e.json.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"node_modules_97\"\u003e\u003c/a\u003enode_modules/\u003c/h3\u003e\r\n\u003cp\u003eNode.js creates this folder and puts all third party modules listed in package.json inside of it.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"angularclijson_101\"\u003e\u003c/a\u003e.angular-cli.json\u003c/h3\u003e\r\n\u003cp\u003eConfiguration for Angular CLI. In this file you can set several defaults and also configure what files are included when your project is built. Check out the official documentation if you want to know more.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"editorconfig_105\"\u003e\u003c/a\u003e.editorconfig\u003c/h3\u003e\r\n\u003cp\u003eSimple configuration for your editor to make sure everyone that uses your project has the same basic configuration. Most editors support an .editorconfig file. See\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://editorconfig.org/\"\u003ehttp://editorconfig.org\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"gitignore_109\"\u003e\u003c/a\u003e.gitignore\u003c/h3\u003e\r\n\u003cp\u003eGit configuration to make sure autogenerated files are not commited to source control.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"karmaconfjs_113\"\u003e\u003c/a\u003ekarma.conf.js\u003c/h3\u003e\r\n\u003cp\u003eUnit test configuration for the Karma test runner, used when running ng test.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"packagejson_117\"\u003e\u003c/a\u003epackage.json\u003c/h3\u003e\r\n\u003cp\u003enpm configuration listing the third party packages your project uses. You can also add your own custom scripts here.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"protractorconfjs_121\"\u003e\u003c/a\u003eprotractor.conf.js\u003c/h3\u003e\r\n\u003cp\u003eEnd-to-end test configuration for Protractor, used when running ng e2e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"READMEmd_125\"\u003e\u003c/a\u003e\u003ca href=\"http://readme.md/\"\u003eREADME.md\u003c/a\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eBasic documentation for your project, pre-filled with CLI command information. Make sure to enhance it with project documentation so that anyone checking out the repo can build your app!\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigjson_129\"\u003e\u003c/a\u003etsconfig.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for your IDE to pick up and give you helpful tooling.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tslintjson_133\"\u003e\u003c/a\u003etslint.json\u003c/h3\u003e\r\n\u003cp\u003eLinting configuration for TSLint together with Codelyzer, used when running ng lint. Linting helps keep your code style consistent.\u003c/p\u003e","frontPage":false},{"exportId":"monday-dependency-injections","title":"Monday: Dependency Injections","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eDependency Injection\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDependency injection is a design pattern in which a class asks for dependencies from external sources instead of creating them itself. The reason we use dependency injection is because it separates the creation of an object from its usage, which enables us to replace dependencies without changing the class that uses them. This means that a class concentrates on fulfilling its responsibilities instead of creating the objects that help it fulfill those responsibilities. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat does this really mean? Let's do it practically. Let us create a folder outside our Goals project anywhere on your laptop and call it Car. Inside this folder, let's create 4 files, car.ts, engine.ts, wheels.ts and main.ts. We're going to familiarize ourselves with DI(Dependency Injection) with the concept of a car.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write code for a class that allows us to create an instance of a car. This class would look like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/car.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003eexport class Car{\u003cbr\u003e  engine: Engine;\u003cbr\u003e  wheels: Wheels;\u003cbr\u003e\u003cbr\u003e  constructor(){\u003cbr\u003e    this.engine = new Engine();\u003cbr\u003e    this.wheels = new Wheels();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  startEngine(){\u003cbr\u003e    this.engine.start();\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the objects/dependencies we need to create a Car. Inside the car class, we have created properties engine and wheels and assigned them their types respectively. In the constructor function, we have created instances of these dependencies using the new keyword. We have then created a method startEngine() which calls another function in our engine dependency. Let's create this function in engine dependency.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/engine.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Engine{\u003cbr\u003e  \u003cbr\u003e  start(){\u003cbr\u003e    console.log(\"Vroooooooom!\");\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a start function which simply logs a string on our console. We will not be using our wheels but let's create an empty class and assume that it's also a dependency that has its own properties and methods just like our engine.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/wheels.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Wheels{\u003cbr\u003e  \u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe'll use our main.ts file to run this car app. Let's write the code to run this app in this file.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/main.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Car } from './car';\u003cbr\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003efunction main(){\u003cbr\u003e  let car = new Car();\u003cbr\u003e\u003cbr\u003e  car.startEngine();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain();\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported our car, engine, and wheels and then created a function main(). We have created the car instance and called the startEngine() method in the function and at the bottom, we have called our main() function so it can execute this code. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince we have node installed, we can run this code on our terminal. Let's transpile this typescript code to javascript code using the typescript transpiler on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ tsc main.ts\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's run the transpiled javascript code directly on our terminal with node. If you recall, we installed node so we could execute javascript code directly from our terminal instead of using the browser console, so let's go ahead and do it:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ node main.js\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command creates our car and starts the engine for us which is great, we can see the output in the terminal. If we, however, wanted to use this car in another environment that has different dependencies, it would be difficult because the car creates the dependencies that it needs for itself. For example, in the state our car class is in right now, if we want to add doors to the car, we would have to add the code to make it define doors and still define this property in the constructor function. The same would apply if we wanted to change anything that exists in the car already. Point is, our code will be hard to maintain and scale, which may also end up making it messy and prone to errors.  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat's where Dependency Injection comes in handy. It relieves our Car class the responsibility of creating the dependencies it needs and makes it just consume these dependencies from external sources. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's implement this in our car. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/car.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003eexport class Car{\u003cbr\u003e\u003cbr\u003e  constructor(private engine: Engine,private wheels: Wheels){\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  startEngine(){\u003cbr\u003e    this.engine.start();\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we still have the imports for our dependencies. Our constructor function  no longer builds the dependencies the car class needs. This means that the car class consumes its dependencies, the engine and wheels class. We have used the private keyword to make these properties available only inside the class. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eInside the constructor function, we still call our startEngine() method. When we refactor our code like this, the Car class does not know how to create its dependencies which is amazing because we can now alter the dependencies that the class consumes more easily now. We now need to change the code in our main.ts file so we can fire up the engines again.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCar/main.ts\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Car } from './car';\u003cbr\u003eimport { Engine } from './engine';\u003cbr\u003eimport { Wheels } from './wheels';\u003cbr\u003e\u003cbr\u003efunction main(){\u003cbr\u003e\u003cbr\u003e  let engine = new Engine();\u003cbr\u003e  let wheels = new Wheels()\u003cbr\u003e  let car = new Car(engine,wheels);\u003cbr\u003e\u003cbr\u003e  car.startEngine();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain();\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have still imported our classes. Inside the main function, we are now creating instances of engine, wheels, and car. When we create the car instance now, we specify that it should consume the engine and wheels dependencies that we have just instantiated. We end up by starting our engine and calling our main function. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's transpile this code in our terminal again to see the effect it has:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ tsc main.ts \u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's run our JS code on our terminal using node:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ node main.js\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAmazing, our engines still fire up! This is how Dependency Injection works. The car class does not create the dependencies it needs, it consumes them in the constructor. Now it is the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003emain.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e file that creates these dependencies and also creates an instance of the car, so the car can now consume these dependencies that have been created outside it and still work as expected. This is impactful because we can create a custom engine for each car rather than having all cars create the same default engine in their constructor. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAngular has its own inbuilt framework for dependency injection which we will use and that is how it works. This DI framework enables us to create an \u003cstrong\u003einjector \u003c/strong\u003ewith which we can register some classes and it figures out how to create these dependencies. Our job would be to ask the injector for the created dependencies. Dependency injection is good practice in so many languages and frameworks, not only in Angular. If you need more resources to understand the concept of dependency injection, feel free to look for them online, and also take a look at this \u003ca class=\"\" href=\"https://www.youtube.com/watch?v=IKD2-MAkXyQ\"\u003evideo\u003c/a\u003e.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-form-validation","title":"Wednesday: Form Validation","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eForm Validation\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsers may end up trying to add a new goal without a name or description or a date while a goal is required to have each one. This may lead to our application developing errors. To mitigate this possible probability, we need to perform form validation on our form inputs and then alert users in case we encounter validity problems.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's see how we should do this.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e #goalForm='ngForm'\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"name\"\u0026gt;Name\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"newGoal.name\" name=\"name\" #name='ngModel' required\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Name is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a template reference variable \u003ccode\u003e#name\u003c/code\u003e\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e to access Angular's form control on this input from the template. We have then created a div that has an attribute \u003ccode\u003e[hidden]\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which makes sure the alert is shown only when the name input is invalid. The \u003ccode\u003epristine\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property allows us to hide the alert when we load a blank page.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you type anything in the name input and then delete it now, the alert will show. Let's apply this to all our form inputs.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e #goalForm='ngForm'\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"name\"\u0026gt;Name\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"newGoal.name\" name=\"name\" #name='ngModel' required\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Name is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"description\"\u0026gt;Description\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003etextarea\u003c/strong\u003e class=\"form-control\" id=\"description\" rows=\"4\" [(ngModel)]=\"newGoal.description\" name=\"description\" #description=\"ngModel\" required\u0026gt;\u0026lt;/\u003cstrong\u003etextarea\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"description.valid || description.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Description is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"complete\"\u0026gt;Completion\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type='date' id=\"complete\" [(ngModel)]=\"newGoal.completeDate\" name=\"completeDate\" #completeDate=\"ngModel\" required\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e [hidden]=\"completeDate.valid || completeDate.pristine\" class=\"alert alert-danger\"\u0026gt;\u003cbr\u003e            \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;Date is required\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e type=\"submit\" class=\"btn btn-success\"\u0026gt;Add Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we try adding to an input and then deleting it, the respective error messages will show indicating that the user will now be aware of any invalid inputs which improves user experience and also makes sure our application does not break from invalid data.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-register-a-service","title":"Monday: Register a Service","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eRegister a Service\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that we have a service, Angular needs to know that this service is available so it can inject it into components or other services that need it. To do this, we need to register a \u003c/span\u003e\u003cstrong\u003eprovider\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. A \u003c/span\u003e\u003cstrong\u003eprovider\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e is something that can create or deliver a service, in our case, it instantiates the \u003c/span\u003e\u003cstrong\u003eGoalService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class to provide the service.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe register our \u003c/span\u003e\u003cstrong\u003eGoalService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e as the provider for this service with an \u003c/span\u003e\u003cstrong\u003einjector\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. An \u003c/span\u003e\u003cstrong\u003einjector\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e is an object responsible for choosing and injecting the provider wherever it's required.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Angular CLI, by default, registers a provider with the \u003c/span\u003e\u003cstrong\u003eroot\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e injector after running the command \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service \u0026lt;service-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This happens when the CLI automatically supplies the provider metadata in the \u003c/span\u003e\u003cstrong\u003e@Injectable\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e decorator.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003c/span\u003e\u003cstrong\u003eprovidedIn\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata specifies that our service is available in the application at root level. When you provide a service at root level, Angular creates a single shared instance of the service and injects it into any class that asks for it. Registering a provider in the \u003c/span\u003e\u003cstrong\u003e@Injectable\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata is best practice since it allows Angular to optimize the app by removing the service if it turns out not to be used at all.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince our service is registered with a provider that injects it at root level, our service is now readily available throughout the application so we can inject it to any component or class that requires it.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's inject it into our goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003eimport { GoalService } from '../goal-service/goal.service';\u003cbr\u003e....\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals:Goal[];\u003cbr\u003e\u003cbr\u003e  constructor(goalService:GoalService) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e  }\u003cbr\u003e....\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we import our \u003c/span\u003e\u003cstrong\u003eGoalService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and also get rid of the \u003c/span\u003e\u003cstrong\u003eGoals\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e array since it is the service that will inject the goals from now on. In the component class, we create a property \u003c/span\u003e\u003cstrong\u003egoals\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assign it a type. We then tweak the Goal component class to consume the GoalService with the constructor. Inside the constructor function, we use the \u003c/span\u003e\u003cstrong\u003egetGoals()\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e method of the goal service to supply the goals.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf your local server is still running, you'll notice that our application still displays our goals which means that the service works as expected.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003ealert Service\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the moment, when the user deletes a goal, a prompt asks the user to confirm whether or not they want to delete the goal. Let's create another service that alerts the user once they delete a goal.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn our terminals, let's create a new service with this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service alert-service/alert\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write the code to describe what the service will do:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/alert-service/alert.service,ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class AlertService {\u003cbr\u003e\u003cbr\u003e  alertMe(message:string){\u003cbr\u003e    alert(message)\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur service is available at root level so we can inject it anywhere we like. Inside the service class, we have created the \u003c/span\u003e\u003cstrong\u003ealertMe()\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e method which accepts a message of string type. The method should use the alert function in javascript to display the message it receives.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's inject this service in our goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { AlertService } from '../alert-service/alert.service';\u003cbr\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals:Goal[];\u003cbr\u003e  alertService:AlertService;\u003cbr\u003e\u003cbr\u003e....\u003cbr\u003e  deleteGoal(isComplete, index){\u003cbr\u003e    if (isComplete) {\u003cbr\u003e      let toDelete = confirm(`Are you sure you want to delete ${this.goals[index].name}?`)\u003cbr\u003e\u003cbr\u003e      if (toDelete){\u003cbr\u003e        this.goals.splice(index,1)\u003cbr\u003e        this.alertService.alertMe(\"The goal has been deleted\")\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e....\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003c/span\u003e\u003cstrong\u003eAlertService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Inside the component class, we have created a property \u003c/span\u003e\u003cstrong\u003ealertService\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assigned it our AlertService type. In the \u003c/span\u003e\u003cstrong\u003edeleteGoal()\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e function, we have added code that uses the alertMe() method from the alert service to display the message inside after the user has confirmed to delete a goal.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo make the service available in the component, we have added it to the constructor function and instantiated it inside the constructor function. If our server is still running, we can delete a goal to see the alert service at work.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-http-service","title":"Monday: HTTP service","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreate an HTTP service\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe earlier saw that services are very helpful in dependency injection. To clean up our app's code, let's create a service that will deliver our quotes to any component that needs them.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnvironment Variables\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs we clean up our code, it is also necessary and best practice to keep crucial data like API keys, database passwords, e.t.c,  away from prying eyes in our apps. The reason is that when we push this kind of data, it puts our app at the risk of malicious attacks since any user can see and interfere with your code on Github if you're not using a private repository, making the app insecure for users to interact with. To hide this kind of data, we put it in a file or folder which we then include in a \u003c/span\u003e\u003cstrong\u003egitignore \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003efile and when we push our code to production, all the folders or files in the \u003c/span\u003e\u003cstrong\u003egitignore \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003efile are not exposed to users and are not being tracked on version control. In our case, we will use the environment file in the environments folder to hide our API's url. Let's open this file and include this code in the file:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/environments/environment.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport const environment = {\u003cbr\u003e  production: false,\u003cbr\u003e  apiUrl:\"http://quotes.stormconsultancy.co.uk/random.json\"\u003cbr\u003e};\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a property apiUrl and assigned it to our random quotes API url. Please note that we have put the API url in this file for practice, assuming that it is as crucial as a database password. This means when we push our code to Github and deploy our app, the url will be hidden and therefore requests to the API will not happen. This also implies that we will always receive an error message and our error quote in deployment. In future, we'll hide more crucial data, unlike the url in this case. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo hide this file, let's go to our .gitignore file and add the file there.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoals/.gitignore\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003eenvironment.ts\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur API url is now hidden whenever we push our code to Github. In our terminals, let's execute this command to create the service for our quotes:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service quote-http/quote-request\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write the code for our service in the service class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eHTTP requests using Promises\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA promise is an object representing the eventual completion or failure of an asynchronous process. Our asynchronous process here is the request we are making to the API.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's use a promise in our service.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/quote-http/quote-request.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003eimport { HttpClient } from '@angular/common/http';\u003cbr\u003eimport {environment } from '../../environments/environment';\u003cbr\u003eimport { Quote } from '../quote-class/quote';\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class QuoteRequestService {\u003cbr\u003e\u003cbr\u003e  quote: Quote;\u003cbr\u003e\u003cbr\u003e  constructor(private http:HttpClient) {\u003cbr\u003e    this.quote = new Quote(\"\",\"\");\u003cbr\u003e   }\u003cbr\u003e\u003cbr\u003e   quoteRequest(){\u003cbr\u003e     interface ApiResponse{\u003cbr\u003e       quote:string;\u003cbr\u003e       author:string;\u003cbr\u003e     }\u003cbr\u003e     let promise = new Promise((resolve,reject)=\u0026gt;{\u003cbr\u003e       this.http.get\u0026lt;ApiResponse\u0026gt;(environment.apiUrl).toPromise().then(response=\u0026gt;{\u003cbr\u003e         this.quote.quote = response.quote\u003cbr\u003e         this.quote.author = response.author\u003cbr\u003e\u003cbr\u003e         resolve()\u003cbr\u003e       },\u003cbr\u003e       error=\u0026gt;{\u003cbr\u003e         this.quote.quote = \"Never, never, never give up\"\u003cbr\u003e         this.quote.author = \"Winston Churchill\"\u003cbr\u003e\u003cbr\u003e         reject(error)\u003cbr\u003e       })\u003cbr\u003e     })\u003cbr\u003e     return promise\u003cbr\u003e   }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported HttpClient to enable us to make a request to the API, the Quote class and the environment class in which we put our API url. We have then created a property quote and assigned it the type of our Quote class initializing it with empty strings inside the constructor function. We have also injected a private http property of the type HttpClient in the constructor. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then defined a quoteRequest() method that defines the ApiResponse interface and the promise instance. We have then used the get function and passed in the apiUrl from the environment object with the interface. We have used toPromise() to convert the Http Request to a promise. We have called the then function and passed in the response and error functions as arguments. The response function is called when the HTTP request is successful and returns a response. If successful, we update the properties of the quote instance with values from the response and call the resolve function. If we encounter an error, we have passed in default values for creating a quote instance in the error function which is called when there is an error.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now call the service in our goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003eimport { GoalService } from '../goal-service/goal.service';\u003cbr\u003eimport { AlertService } from '../alert-service/alert.service';\u003cbr\u003eimport { QuoteRequestService } from '../quote-http/quote-request.service';\u003cbr\u003e\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e...\u003cbr\u003e  quote:Quote;\u003cbr\u003e...\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService, private quoteService:QuoteRequestService) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e\u003cbr\u003e    this.quoteService.quoteRequest()\u003cbr\u003e    this.quote = this.quoteService.quote\u003cbr\u003e  }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have imported our QuoteRequestService at the top and then injected it into our constructor. Inside the ngOnInit lifecycle hook, we have called the quoteRequest() method from the service and created a quote instance with the promise object we will receive from the service. If we run our server at this point, our quotes will be displayed on the application as usual but using a service this time round.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-router-outlet","title":"Tuesday: Router-Outlet","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterLink\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt's annoying if a user has to keep putting in URLs in the browser address bar to navigate to a different view. This is an example of bad user experience. Let's create a navbar with which users can quickly switch to different views with this command on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component navbar\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe will use a bootstrap navbar for this component.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/navbar/navbar.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003enav\u003c/strong\u003e class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"navbar-brand\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;GOALS APP\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"navbar-toggler-icon\"\u0026gt;\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"navbar-nav\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link active\"\u0026gt;Goals\u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"sr-only\"\u0026gt;(current)\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link\"\u0026gt;About\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003enav\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a navbar with two elements, Goals and About. To display our navbar component whether or not we have a view, let's add its selector to our root template file.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eapp-navbar\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eapp-navbar\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we run our server, we can see our navbar displayed. If we click any of the navbar links however, there is no change in the views.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterLink\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo make these navigation links work, we use the routerLink attribute which is from the RouterLink directive found in the RouterModule. Remember directives? Let's make our links work:\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/navbar/navbar.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003enav\u003c/strong\u003e class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"navbar-brand\" routerLink=\"goals\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;GOALS APP\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"navbar-toggler-icon\"\u0026gt;\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"navbar-nav\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link active\" routerLink=\"goals\"\u0026gt;Goals\u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"sr-only\"\u0026gt;(current)\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link\" routerLink=\"/about\"\u0026gt;About\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003enav\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the attribute routerLink to the navbar-brand element, Goals navigation link and About navigation link and equated each to the exact route whose view we want to display. The RouterLink directive will now turn user clicks on the elements with the routerLink attribute into router navigations. If our server is still running, we can click on these navbar elements and we'll see the views change respectively to the routes we have assigned them.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterLinkActive\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe RouterLinkActive directive also has a routerLinkActive attribute which changes the CSS properties of an active route. This improves the user experience in our app by visually informing users that they are on a specific page(or a specific view). Let's add it to the elements in our navbar.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/navbar/navbar.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003enav\u003c/strong\u003e class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"navbar-brand\" routerLink=\"/goals\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;GOALS APP\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"navbar-toggler-icon\"\u0026gt;\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"navbar-nav\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link active\" routerLink=\"goals\" routerLinkActive='active'\u0026gt;Goals\u0026lt;\u003cstrong\u003espan\u003c/strong\u003e class=\"sr-only\"\u0026gt;(current)\u0026lt;/\u003cstrong\u003espan\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ea\u003c/strong\u003e class=\"nav-item nav-link\" routerLink=\"/about\" routerLinkActive='active'\u0026gt;About\u0026lt;/\u003cstrong\u003ea\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003enav\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the routerLinkActive attribute to all our navbar elements that navigate to a specific route and equated it to active. Any given routerLink will be active only if its URL is the exact match of the current URL. To test out this feature, click any of these links on the navbar and see their visual appearance change.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-deleting-goals","title":"Wednesday: Deleting Goals","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeleting Goals\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe earlier created a custom directive that strikes through a goal once we complete it by clicking it. We can replace the complete button in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component with a delete button that deletes a goal once we decide we want to get rid of it. Let's add this button to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e template.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)= 'goalDelete(true)'\u0026gt;Delete Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have modified the button to emit a \u003ccode\u003eclick\u003c/code\u003e output event that calls the \u003ccode\u003egoalDelete()\u003c/code\u003e function which takes a boolean as an argument. We also need to change the function that we had defined in the \u003ci\u003egoal-detail\u003c/i\u003e component class to our new \u003ccode\u003egoalDelete()\u003c/code\u003e\u003ci\u003e \u003c/i\u003e function.\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e GoalDetailComponent \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eimplements\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e OnInit {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  goalDelete(complete:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eboolean\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e){\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ethis\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.isComplete.emit(complete);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  }\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used the \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event emitter that we defined earlier and emitted the boolean value passed in. We can now update the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e parent component.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e *ngIf='goal.showDescription' [goal]='goal' (isComplete) = 'deleteGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e...\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have updated the goal-detail selector, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp-goal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, with our event emitter \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003especifying that when the event is emitted,  \u003ccode\u003edeleteGoal()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eis the function that should be executed.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also define the logic for this \u003ccode\u003edeleteGoal()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction which takes in the value of the event being emitted and the index of a goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e...\u003cbr\u003e  deleteGoal(isComplete, index){\u003cbr\u003e    if (isComplete) {\u003cbr\u003e      let toDelete = confirm(`Are you sure you want to delete ${this.goals[index].name}?`)\u003cbr\u003e\u003cbr\u003e      if (toDelete){\u003cbr\u003e        this.goals.splice(index,1)\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created the \u003ccode\u003edeleteGoal()\u003c/code\u003e function that takes in the boolean value and index of the goal. We have then created the \u003ccode\u003etoDelete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e boolean variable that calls the Javascript \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econfirm\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function that creates a browser prompt for the user to confirm if they actually want to delete the goal. If the user confirms that the goal is to be deleted we use the \u003ccode\u003esplice\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function to remove the goal from the list of goals using the index. Note that while creating the confirm prompt, we have used backticks \u003ccode\u003e``\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich allow us to use the \u003ccode\u003e${this.goals[index].name}\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003elogic inside the confirm prompt. Also, the javascript prompt gives a user two options, ok and cancel and depending on the option the user clicks on, a boolean value is returned. If the user clicks ok, the value true is returned, and if the user clicks cancel, the value false is returned. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's serve our application and interact with this feature we have created.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"thursday-diary","title":"Thursday:  Diary","type":"WikiPage","content":"\u003ch2\u003eThe Diary\u003c/h2\u003e\r\n\u003cp\u003eThis week you will create a personal diary application where you can write down your thoughts.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eYou as the user you should be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new diary entry.\u003c/li\u003e\r\n\u003cli\u003eSet the date for a new entry.\u003c/li\u003e\r\n\u003cli\u003eDelete the Diary entry.\u003c/li\u003e\r\n\u003cli\u003eAble to highlight titles in the diary entry\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse the Angular CLI to create the application.\u003c/li\u003e\r\n\u003cli\u003eCreate a clear README file.\u003c/li\u003e\r\n\u003cli\u003eHave a minimum of 15 clear commit messages.\u003c/li\u003e\r\n\u003cli\u003eCreate a diary model class.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive to highlight the titles.\u003c/li\u003e\r\n\u003cli\u003eCreate custom pipe to customize dates.\u003c/li\u003e\r\n\u003cli\u003eHave form component with the necessary Inputs.\u003c/li\u003e\r\n\u003cli\u003eYour app should be deployed.\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"monday-creating-components","title":"Monday: Creating Components","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating Components\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTill now, the AppComponent has been handling everything that's in our app. We want to scale our app and we are therefore going to create more components. The beauty of components is that they enable us to decouple our application so that each functionality is implemented by a specific component. We end up having many components working together to achieve the whole purpose of the app.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince it is the root components’ job to render all other components, let us start out by creating a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component to handle the logic on goals. In your terminal, run the following command:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component goal\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has created a folder \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat has the files that contain the boilerplate code for a component. If we also check the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003eapp.module.ts, \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewe notice that the goal component has been registered under \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003edeclarations\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e automatically by the angular CLI.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe're moving the goals logic from the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoalComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Let's move the goals array permanently from the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoalComponent:\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-family: sans-serif; font-size: 10pt;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-goal',\u003cbr\u003e  templateUrl: './goal.component.html',\u003cbr\u003e  styleUrls: ['./goal.component.css']\u003cbr\u003e})\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals:Goal = [\u003cbr\u003e    {id:1, name:'Watch finding Nemo'},\u003cbr\u003e    {id:2,name:'Buy Cookies'},\u003cbr\u003e    {id:3,name:'Get new Phone Case'},\u003cbr\u003e    {id:4,name:'Get Dog Food'},\u003cbr\u003e    {id:5,name:'Solve math homework'},\u003cbr\u003e    {id:6,name:'Plot my world domination plan'},\u003cbr\u003e  ];\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eAt the top, we have imported the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class and then defined the array of goals inside the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003eGoalComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e definition class. \u003ccode\u003engOnInit\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a lifecycle hook. It is called each time the component is created. We use it to put complex initialization logic that we want for the component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also move the template logic to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoalComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-size: 1.8em;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e      {{goal.name}}\u003cbr\u003e    \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-size: 1.8em;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1.8em;\"\u003eNesting Components\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that we have all our goals logic inside the goal component, let's make it available as a child component of the root component. If we check our browser right now, there's nothing displaying because our root component has nothing to display. Using the goal component's selector, let's nest the goal component inside the app component so we can display the contents of the goal component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;app-goal\u0026gt;\u0026lt;/app-goal\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cbr\u003eIf we check our browser now, the goals are displayed just like before. Yes, nesting is as simple as that! This ensures that the component is loaded while inside the parent component.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eChild Components\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's add something more to our goals, let's give each goal a description. We will use the description as the detail of our goals and display it in our app. We will create a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component which will be a child component of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component. The \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component will be responsible for displaying the details of each goal which in our case will be the description of a goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCurrently, our goal blueprint allows us to create goal objects with an \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003ename\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e only. Let's add \u003ccode\u003edescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the goal blueprint so it allows us to create a description for each of our goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  id: number;\u003cbr\u003e  name: string;\u003cbr\u003e  description: string;\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can now add descriptions to our goals in the array so that we can display them in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-details\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    {id:1, name:'Watch finding Nemo',description:'Find an online version and watch merlin find his son'},\u003cbr\u003e    {id:2,name:'Buy Cookies',description:'I have to buy cookies for the parrot'},\u003cbr\u003e    {id:3,name:'Get new Phone Case',description:'Diana has her birthday coming up soon'},\u003cbr\u003e    {id:4,name:'Get Dog Food',description:'Pupper likes expensive sancks'},\u003cbr\u003e    {id:5,name:'Solve math homework',description:'Damn Math'},\u003cbr\u003e    {id:6,name:'Plot my world domination plan',description:'Cause I am an evil overlord'},\u003cbr\u003e  ];\u003cbr\u003e\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eInput Property Binding\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur goal-detail component will be receiving the goal description to display from the parent component, goal. For a child component to receive data from a parent component in angular, we need to do input property binding. \u003c/span\u003e\u003cstrong\u003eInput property binding\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e allows us to pass data from a parent component to its child components. Let's see how we do this.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit, Input } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-goal-detail',\u003cbr\u003e  templateUrl: './goal-detail.component.html',\u003cbr\u003e  styleUrls: ['./goal-detail.component.css']\u003cbr\u003e})\u003cbr\u003eexport class GoalDetailComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  @Input() goal: Goal;\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-family: sans-serif; font-size: 12pt;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: sans-serif; font-size: 12pt;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we add an import for \u003ccode\u003eInput\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e from \u003ccode\u003e@angular/core\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which allows us to do Input property binding. We also import the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class. In the definition class for the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003eGoalDetailComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we define \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as the property that will undergo input property binding, which is of the type of the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003e, \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom the blueprint class. This means when we will have the property \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e in the goal-detail component, it will have received its data from a parent component, in our case, the goal component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo bind to this \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property from the parent \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal component \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eto the child \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we change our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecomponents\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e template code to this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;My Goals\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;hr\u0026gt;\u003cbr\u003e  \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;li *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e      {{goal.name}}\u003cbr\u003e      \u0026lt;app-goal-detail [goal]='goal'\u0026gt;\u0026lt;/app-goal-detail\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/ul\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used the selector for the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal-detail component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e and nested it into the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, placing it after the goal name which is where we want to display the description of each goal. We have also added some logic in the child component tags and specified that we are binding the \u003ccode\u003egoal\u003c/code\u003e property to the \u003c/span\u003e\u003ci style=\"font-family: sans-serif; font-size: 1rem;\"\u003e\u003cspan\u003egoal-detail component\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The goal-detail component is now receiving data from the goal component so we can now display this data in the goal-detail component. \u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  {{goal.description}}\u003cbr\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWhen we serve our application at this point, we can see the application is now displaying each goal with its description below it.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"friday-independent-project","title":"Friday: Independent Project","type":"WikiPage","content":"\u003ch2\u003eGithub Search\u003c/h2\u003e\r\n\u003cp\u003eCreate a website where users may enter a GitHub username into a form, submit it, and see names and descriptions of that person's public repositories. A person can also look for repositories\u003c/p\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub API\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto retrieve this information. This API allows 5,000 requests per hour with an API key, but only 60 requests per hour _without_ one. Everyone is therefore required to use their own unique key. GitHub refers to these keys as \"Personal Access Tokens\".\u003c/p\u003e\r\n\u003ch3\u003eCreating Personal Access Tokens\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVisit the _Settings_ area of your GitHub account like this\u003cimg src=\"http://moringacore-js.herokuapp.com/assets/images/githubsettings.png\"\u003e\n\u003c/li\u003e\r\n\u003cli\u003eselect Personal Access Tokens from the sidebar, and hit Generate New Token\u003cimg src=\"http://moringacore-js.herokuapp.com/assets/images/githubgeneratetoken.png\"\u003e\n\u003c/li\u003e\r\n\u003cli\u003eGitHub will offer a list of options\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not select any\u003c/strong\u003e. These grants read/write permissions and access to personal data. Finally, select\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGenerate Token.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cimg src=\"http://moringacore-js.herokuapp.com/assets/images/githublistofoptions.png\"\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA sample request  URL might look like this\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan class=\"hljs-string\"\u003e'https://api.github.com/users/daneden?access_token='\u003c/span\u003e\u003cspan\u003e + apiKey\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003eTechnical Requirements\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eYour application should:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHave a landing page that displays your information. Image and Repositories\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eHave components to display user profile, search results from the API call and the Repository Details\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003eHave proper routing structure to map the different components/views.\u003c/li\u003e\r\n\u003cli\u003eHave a form component that allows us to search for users and repositories\u003c/li\u003e\r\n\u003cli\u003eHave a custom service for sending the HTTP requests.\u003c/li\u003e\r\n\u003cli\u003eContain a custom directive and a custom pipe.\u003c/li\u003e\r\n\u003cli\u003eBe deployed and in Portfolio quality.\u003c/li\u003e\r\n\u003cli\u003eHave a router module.\u003c/li\u003e\r\n\u003cli\u003eHide the API key inside the environment variables\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"tuesday-routing","title":"Tuesday: Routing","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouting\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn Angular, routing enables us to navigate from one view to another. This means users can click links or buttons that change whatever is displayed on the app. In our app, we will create a navigation bar, that will enable us to change to different views in order to understand how routing works.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by creating a component that will give more information about the app. We will call it the  \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eabout \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecomponent. On our terminals, let's execute this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component about\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the HTML template file of our about component, let's add a description of our app.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/about.about.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"jumbotron\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e class=\"display-4 text-center\"\u0026gt;About Goals App\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e class=\"my-4\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"lead text-center\"\u0026gt;An Angular app that let's you create your goals and gives you quotes from the world of computing!\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used a bootstrap jumbotron and written a description of our app. Feel free to describe your app in your own words and style. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppRoutingModule\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo implement routing in Angular, we use a module known as the AppRoutingModule. We import it and feed it with simple instructions in the form of code and it does the navigation for us. Interestingly, when we generate a new app in angular with the command ng new \u0026lt;app-name\u0026gt;, this is one of the modules that the Angular CLI automatically adds to our app for us. If we recall using this command when creating our Goals app, the first prompt was whether or not we want to use Angular routing, to which we agreed. This is what made the CLI add this module for us. Under the directory src/app, there is a file named app-routing.module.ts which the CLI created for us and looks like this:\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { Routes, RouterModule } from '@angular/router';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [];\u003cbr\u003e\u003cbr\u003e@NgModule({\u003cbr\u003e  imports: [RouterModule.forRoot(routes)],\u003cbr\u003e  exports: [RouterModule]\u003cbr\u003e})\u003cbr\u003eexport class AppRoutingModule { }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis file has everything we will need to create routes in our app, which we will do soon. Checking our root level modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we see the \u003c/span\u003e\u003cstrong\u003eAppRoutingModule\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e module is already imported and added to the @NgModule \u003c/span\u003e\u003cstrong\u003eimports \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003earray meaning we can use it in our app. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe configure our routes using \u003c/span\u003e\u003cstrong\u003eRoutes\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e  which is a service that presents a given component view for a specific URL. We have imported it at the top of our routing module file.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAdding Routes\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRoutes tell the router which view to display when a user clicks a link or pastes a URL in the browser address bar. A typical Angular route has two properties, a path which is a string that matches the URL in the browser address bar and a component which is the component that the router should create when navigating to this route.   \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us add two routes, one that will navigate to our goals component and another to the about component we have just created.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { Routes, RouterModule } from '@angular/router';\u003cbr\u003eimport { GoalComponent } from './goal/goal.component';\u003cbr\u003eimport { AboutComponent } from './about/about.component';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [\u003cbr\u003e  { path: 'goals', component: GoalComponent},\u003cbr\u003e  { path: 'about', component: AboutComponent},\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003e@NgModule({\u003cbr\u003e  imports: [RouterModule.forRoot(routes)],\u003cbr\u003e  exports: [RouterModule]\u003cbr\u003e})\u003cbr\u003eexport class AppRoutingModule { }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have first imported our two components at the top of our file. Inside our routes array, we have defined the path and component for each route. The RouterModule.forRoot(routes) in the imports initializes the router and gets it listening to the browser for location changes. The forRoot() method makes the router configurable at root level and supplies the service providers and directives needed for routing. This is the same method we used when we configured the loader because it serves the same purpose, making a module available at root level and supplying any dependencies it needs.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRouterOutlet\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt is now the router's job to take care of what is being displayed on the application. RouterOutlet is a directive of the RoutingModule that has a selector \u0026lt;router-outlet\u0026gt; which handles routing for us.  Let's use this selector and put the router in charge of displaying different views. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003erouter-outlet\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have replaced the \u0026lt;app-goal\u0026gt; selector with the \u0026lt;router-outlet\u0026gt; selector because the router will be responsible for views from now on. If we keep the \u0026lt;app-goal\u0026gt; selector, our app will display the goal component and its child components only, which beats our purpose for creating routes. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's run our server and try out these routes. On the browser address bar, put in your routes and see the difference, for example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ca href=\"http://localhost:4200/goals\"\u003ehttp://localhost:4200/goals\u003c/a\u003e to display the view for the goals, and \u003ca href=\"http://localhost:4200/about\"\u003ehttp://localhost:4200/about\u003c/a\u003e to change the view to our about component. Works, right? Our router is functional which is great!\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"thursday-interview-questions","title":"Thursday: Interview Questions","type":"WikiPage","content":"\u003ch2\u003eTwo Day Project Continues\u003c/h2\u003e\r\n\u003cp\u003eContinue building with your pair the giphy\u003cstrong\u003e clone website.\u003c/strong\u003e Make sure you make regular commits while pushing your code to Github and make sure you have clear commit messages\u003c/p\u003e\r\n\u003ch2\u003eAngular 6 Interview Questions\u003c/h2\u003e\r\n\u003cp\u003eThese are some of the Interview questions you might encounter on Angular 6. discuss with your pair and also search online for other questions.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are the key components of Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Modules in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Components in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are Angular 6 directives? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is CLI?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Dependency Injection? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhen does ngOnInit event get called in Angular 6 Application Lifecycle?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhat are Event Emitters and how do they work in Angular 6?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eExplain Bootstrapping in an Angular Project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-week-2-objectives","title":"Monday: Angular Week 2 Objectives","type":"WikiPage","content":"\u003cp\u003eThis week we'll dive slightly deeper into the Angular framework by learning a bit more complex and interesting concepts.\u003c/p\u003e\r\n\u003cp\u003eWe will start by learning a concept called \u003cem\u003edependency injection\u003c/em\u003e. By understanding this concept, it will help us create something called a \u003cem\u003eservice\u003c/em\u003e which will, in turn, allow us to organize and share code across our application.\u003c/p\u003e\r\n\u003cp\u003eFrom there, we will also to learn about \u003cem\u003ethe Http Client\u003c/em\u003e module that will enable us to use APIs in our Angular application. \u003c/p\u003e\r\n\u003cp\u003eFinally, we will finish off by learning how to use a router to create and add dynamic pages to our application. Here, we'll learn how to pass data and information between different routes.\u003c/p\u003e\r\n\u003cp\u003eBy the end of the week, you will be able to;\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eConsume an API  to display random quotes in our application\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003eUnderstand the concept of Dependency Injection and how to use it\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003eUse routing modules create dynamic pages in the application.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eIn this section, you mentor will review your project based on the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eHave a well-designed landing page that displays Github information such as username, profile photo and a list of repositories.\u003c/li\u003e\r\n\u003cli\u003eUse Http Client services to access GitHub API.\u003c/li\u003e\r\n\u003cli\u003eUse two classes in your project.\u003c/li\u003e\r\n\u003cli\u003eImplement Http requests to search for GitHub users and GitHub repositories.  \u003c/li\u003e\r\n\u003cli\u003eHave a routing module.\u003c/li\u003e\r\n\u003cli\u003eImplement custom directives and custom pipes in your project.\u003c/li\u003e\r\n\u003cli\u003ePolished and portfolio-quality.\u003c/li\u003e\r\n\u003cli\u003eHave a well-documented README file.\u003c/li\u003e\r\n\u003cli\u003eThe project must be deployed and link submitted.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e  \u003c/p\u003e","frontPage":false},{"exportId":"tuesday-create-pipes","title":"Tuesday: Create Pipes","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating Custom Pipes\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs we had stated earlier, if the inbuilt angular pipes don't help us to achieve the data transformation we want, we have the liberty to create our own custom pipes to do it. Let's create a pipe that will count the number of days left to the completion of a goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn our terminals, let's create a pipe using the following command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate pipe date-count\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command generates two files, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edate-count.pipe.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich we'll use to write the code for counting the number of days left and \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edate-count.pipe.spec.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich is the test file for our pipe. The command also adds this pipe to our root level modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, for us.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now define the logic to count the number of days left to the completion of a goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/date-count.pipe.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Pipe, PipeTransform } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Pipe({\u003cbr\u003e  name: 'dateCount'\u003cbr\u003e})\u003cbr\u003eexport class DateCountPipe implements PipeTransform {\u003cbr\u003e\u003cbr\u003e  transform(value: any): number {\u003cbr\u003e    let today:Date = new Date(); //get current date and time\u003cbr\u003e    let todayWithNoTime:any = new Date(today.getFullYear(), today.getMonth(), today.getDate())\u003cbr\u003e    var dateDifference = Math.abs(value - todayWithNoTime) //returns value in miliseconds\u003cbr\u003e    const secondsInDay = 86400; //60 seconds * 60 minutes in an hour * 24 hours in a day\u003cbr\u003e    var dateDifferenceSeconds = dateDifference*0.001; //converts miliseconds to seconds\u003cbr\u003e    var dateCounter = dateDifferenceSeconds/secondsInDay;\u003cbr\u003e\u003cbr\u003e    if (dateCounter \u0026gt;= 1 \u0026amp;\u0026amp; value \u0026gt; todayWithNoTime){\u003cbr\u003e      return dateCounter;\u003cbr\u003e    }else{\u003cbr\u003e      return 0;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe first have the\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e@Pipe\u003c/code\u003e\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003edecorator that defines the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ename\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e of the pipe. We then have the \u003ccode\u003eDateCountPipe\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e class that has a transform function that takes in a value of type \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eany\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This value will be our date object from the goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used the \u003ccode\u003enew Date()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function to get the current date and time. But since we do not need the time aspect we create a new date object for today's date which we store in the \u003ccode\u003etodayWithNoTime\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e variable.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then calculated the difference of the date we get in the pipe input and subtracted the current date to get the difference in milliseconds.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have converted the milliseconds to seconds and then divided these seconds by the seconds in a day to get how many days are left.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then returned the days left if the goal date has not been passed. But if it past due we post \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e0\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us add this pipe to our goal details and serve our application to see our custom pipe in action.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-details/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWe have added the pipe to the \u003ccode\u003ecompleteDate\u003c/code\u003e property to calcute the number of days left to the completion of a goal.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-ngmodel","title":"Wednesday: NgModel","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eTwo-Way Data Binding\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that we have created a form that we will use to add goals in our application, let's make use of it. We want our users to see what they will be typing in real time, that is as they type it. This is the concept of two-way data binding. With two-way data binding, data moves from our template(the view) to our component class(the model) and vice versa. The essence is that when data changes on the template(view) it simultaneously changes in the component class(model) and if it also changes in the model, the view is automatically updated with the changes.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe FormsModule that we imported has a feature that will help us do the two-way data binding, the \u003ccode\u003engModel\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e directive. This form has to create a goal the same way we defined it in the blueprint, so let's write code to make it create goals in the same format.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-goal-form',\u003cbr\u003e  templateUrl: './goal-form.component.html',\u003cbr\u003e  styleUrls: ['./goal-form.component.css']\u003cbr\u003e})\u003cbr\u003eexport class GoalFormComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  newGoal = new Goal(0,\"\",\"\",new Date());\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003ccode\u003eGoal\u003c/code\u003e blueprint class. Inside the component definition class, we have created a \u003ccode\u003enewGoal\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eproperty and assigned it to the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass that takes in the format we have been using in creating goals. This new goal object will be changed by the form inputs.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003ediv\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"container-fluid\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003eh2\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"text-center\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreate a new Goal\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/\u003c/span\u003e\u003cstrong\u003eh2\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003ehr\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003eform\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e #goalForm=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'ngForm'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003ediv\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"form-group\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e          \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003elabel\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e for=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eName\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/\u003c/span\u003e\u003cstrong\u003elabel\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e          \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cstrong\u003einput\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e type=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"text\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e required class=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"form-control\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e id=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e [(ngModel)]=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"newGoal.name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e name=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"name\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;!-- Testing to see if we get any data --\u0026gt;\u003cbr\u003e          Display {{newGoal.name}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"description\"\u0026gt;Description\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003etextarea\u003c/strong\u003e class=\"form-control\" id=\"description\" rows=\"4\" required\u0026gt;\u0026lt;/\u003cstrong\u003etextarea\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"complete\"\u0026gt;Completion\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type='date' id=\"complete\" required\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e type=\"submit\" class=\"btn btn-success\"\u0026gt;Add Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a template reference variable \u003ccode\u003egoalForm\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to our form tag and equated it to \u003ccode\u003engForm\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This will provide the form element with additional features and monitor the changes and validity of input elements.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then added the \u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e attribute to our name input and equated it to the name attribute of the \u003ccode\u003enewGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e object we created in our component definition class. We have then defined a \u003ccode\u003ename\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e attribute which is a requirement when using \u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and a form. The \u003ccode\u003eDisplay\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e{{newGoal.name}}\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e line will temporarily display the data being received. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf our server is still running, we can type anything in the form-input Name, and see two-way data binding in action.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTwo-way data binding is one of the key things that Angular makes easy for us to implement. If you want this kind of experience in your app, Angular should be a preferred tool.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-passing-parameters","title":"Tuesday: Passing Parameters","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003ePassing Parameters\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can make one more change in our application. We can have the details of a goal displayed separately. This will help us learn how to pass parameters in a route. Let's create a route that maps to a specific goal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { Routes, RouterModule } from '@angular/router';\u003cbr\u003eimport { GoalComponent } from './goal/goal.component';\u003cbr\u003eimport { AboutComponent } from './about/about.component';\u003cbr\u003eimport { NotFoundComponent } from './not-found/not-found.component';\u003cbr\u003eimport { GoalDetailComponent } from './goal-detail/goal-detail.component';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [\u003cbr\u003e  { path: 'goals', component: GoalComponent},\u003cbr\u003e  { path: 'about', component: AboutComponent},\u003cbr\u003e  { path: 'goals/:id', component: GoalDetailComponent },\u003cbr\u003e  { path: '', redirectTo:\"/goals\", pathMatch:\"full\"},\u003cbr\u003e  { path:'**', component:NotFoundComponent},\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003e@NgModule({\u003cbr\u003e  imports: [RouterModule.forRoot(routes)],\u003cbr\u003e  exports: [RouterModule]\u003cbr\u003e})\u003cbr\u003eexport class AppRoutingModule { }\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a route with the path goals/:id which displays the GoalDetailComponent.  The :id token allows us to pass a parameter in the route. We will pass in the id of a goal to retrieve a specific goal. We'll also need to make some changes in our templates.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;MY GOALS\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eh6\u003c/strong\u003e id={{i}} appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eh6\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"btn btn-primary\" (click)='goToUrl(goal.id)'\u0026gt;View Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e class=\"btn btn-outline-danger\" (click)='deleteGoal(i)'\u0026gt;Delete Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eapp-goal-form\u003c/strong\u003e (addGoal)=\"addNewGoal($event)\"\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eblockquote\u003c/strong\u003e class=\"blockquote text-center\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"mb-0\"\u0026gt;{{quote.quote}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003efooter\u003c/strong\u003e class=\"blockquote-footer\"\u0026gt;\u0026lt;\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;{{quote.author}}\u0026lt;/\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003efooter\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003eblockquote\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNotice we have gotten rid of the toggle Details button and replaced it with a view Details button and next to it a Delete Goal button. We have also gotten rid of the div that was displaying the Goal Detail component. The View Details button has a click event listener which calls the goToUrl() function that takes in the goal id that is responsible for triggering the navigation to the GoalDetails component of a specific goal. The Delete Goal button also has a click event listener that calls the deleteGoal() function which deletes a goal from the goals array. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's create these functions that we have added to the GoalComponent.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { Router } from '@angular/router';\u003cbr\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e  \u003cbr\u003egoToUrl(id){\u003cbr\u003e    this.router.navigate(['/goals',id])\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  deleteGoal(index){\u003cbr\u003e    let toDelete = confirm(`Are you sure you want to delete ${this.goals[index].name}`)\u003cbr\u003e\u003cbr\u003e    if (toDelete){\u003cbr\u003e      this.goals.splice(index,1)\u003cbr\u003e      this.alertService.alertMe(\"Goal has been deleted\")\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService, private quoteService:QuoteRequestService, private router:Router) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the Router module and injected it into the constructor with the router property. We have then created the goToUrl() function with an id as an argument. We have used the router's navigate function and passed an array that has the first part of the arguments as the path to the goals and the second part being the id of the goal. We have then kept the deleteGoal() function which deletes a goal from the array of goals.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur buttons are too close to each other. Let's add some CSS to create some space between them.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.css\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e.btn{\u003cbr\u003e  margin:2px;\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a margin to the elements in our component that have the btn class. Remember that this style will only apply for those elements in the goal component. If we wanted to make this style global, we would put it in the app.component.css file instead.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating a getGoal method\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince our goal service is still delivering our goals, let's create a method in the service that will help us retrieve one goal.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003eimport { Goals } from '../goals';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class GoalService {\u003cbr\u003e\u003cbr\u003e  getGoals(){\u003cbr\u003e    return Goals\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  getGoal(id){\u003cbr\u003e    for (let goal of Goals){\u003cbr\u003e      if (goal.id == id){\u003cbr\u003e        return goal;\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a getGoal() method that takes in the id of a goal. We have then created a for-loop that checks whether the id of a goal is the same as the id parameter passed in, and if it is, then that specific goal is returned and we break out of that loop. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt will be the GoalDetail Component that will be displaying the specific goal so let's get it ready for that.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { Goal } from '../goal';\u003cbr\u003eimport {  ActivatedRoute, ParamMap } from '@angular/router';\u003cbr\u003eimport { GoalService } from '../goal-service/goal.service';\u003cbr\u003e...\u003cbr\u003eexport class GoalDetailComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goal:Goal;\u003cbr\u003e\u003cbr\u003e  constructor(private route:ActivatedRoute, private service:GoalService) { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e    let id = this.route.snapshot.paramMap.get('id');\u003cbr\u003e    this.goal = this.service.getGoal(id)\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported GoalService, ActivatedRoute to retrieve parameters from the route and ParamMap to provide methods that handle parameter access from the router. We have then injected the ActivatedRoute and GoalService in our constructor. Inside the lifecycle hook, ngOnInit(), we have used the route.snapshot to get the initial value of the route parameter, then we have extracted the id using the get method provided by paramMap function. We have passed this id we have retrieved to our service's getGoal() method which returns the specific goal which we assign to our goal property.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's change the look of our GoalDetail. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-2\"\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-8\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"card\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"card-body\"\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003eh5\u003c/strong\u003e class=\"card-title\"\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003eh5\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"card-text\"\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days.\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-2\"\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have put our goal details in a bootstrap card. We can now serve our application and see what happens when we click the view details button. That's exactly how we wanted to display our goal details.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-deployment","title":"Wednesday: Deployment","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeploying Angular Apps\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAfter we create an application, we can deploy it to a remote server so that users can interact with it online. There are various ways of deploying applications and the one that has lots of advantages is Cloud Hosting. There are many cloud platforms which offer hosting services such as AWS(Amazon Web Services), Google Cloud Platform and Microsoft Azure. Most of these cloud hosting platforms offer payment plans for hosting but in our case, we will use Github which is free.  \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e Let's, therefore, see how we deploy our angular application and publish it to gh-pages on Github. At this point, we all have Github accounts so let's do the first thing.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e1. Create Github repo\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you had not created a Github repository prior to this, go ahead and create a repo in your Github account. After creating the repo, commit all your changes and push them to the repository you have created. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you had created your repo prior to this, also commit and push all your changes to your Github repository.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e2. Install angular-cli-ghpages\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have a tool at our disposal that we can use to easily deploy our angular app to gh-pages, the angular-cli-pages tool. We use this tool as a command on the angular CLI for the purpose of deployment. To install it, let us run this command on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm i angular-cli-ghpages --save-dev\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has installed angular-cli-ghpages globally in our operating system. We, therefore, don't have to install it again in case we need to use it.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e3. Run build\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe need to build our angular app for use in production. This simply means configuring our app to be useable on a remote server. While we were creating our app, we were serving our application on our local development server \u003c/span\u003e\u003ca href=\"http://localhost:4200/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://localhost:4200/\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The configuration for the local server will not serve the application when it is deployed on the remote server, gh-pages, which is why we need to build our app. Let's run this command on our terminal to build the application:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng build --prod --base-href \"https://GithubUserName.github.io/GithubRepoName/\" \u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake sure you put in your Github username in \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eGithubUserName \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eand the repository name you created in\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eGithubRepoName\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e4. Deploy to gh-pages\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt's now time to use angular-cli-ghpages. Let's run this command in our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npx angular-cli-ghpages --dir=dist/Project-name\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake sure you put the name of the project in the place of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eProject-name\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. You can find this in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eangular.json\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e file under \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edefaultProject\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is at the bottom of the file.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has created a gh-pages branch on Github for us. It has then read all the changes in our remote branch and pushed these changes to gh-pages while maintaining the build configuration that will ensure our application works while on the remote server. If we visit the URL we created earlier on our terminal, https://GithubUserName.github.io/GithubRepoName/,we can see our application running remotely, which means it has successfully been published on gh-pages.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-and-tuesday-practice-to-do-list-flash-cards","title":"Monday \u0026 Tuesday: Practice - To Do List,Flash Cards","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Over the course of the last two days, you have learnt how to create a basic application using Angular, including the file structure, components, property binding, event emitting, directives, and pipes. Take this time to familiarize and solidify your understanding of these concepts.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eGoals\u003c/h3\u003e\r\n\u003cp\u003eFirst, follow along with the Monday and Tuesday lessons, creating the Goals application.   \u003c/p\u003e\r\n\u003cp\u003eOnly after you have completed the lessons and understand how an Angular application is built, move on to practice your skills further with the next projects.\u003c/p\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eCreate a to-do list application in Angular. Just like we did in our Goals application, you will have to hard code your Task objects. For now, your Task object should have properties such as name and description. \u003c/p\u003e\r\n\u003ch3\u003eFlash Card\u003c/h3\u003e\r\n\u003cp\u003eYou have learnt a lot since you start this journey of becoming a Programmer.  Wouldn't it be really cool if you could have somewhere to record all the new programming vocabularies (and their explanations) that you have encountered?\u003c/p\u003e\r\n\u003cp\u003eOnce you finish creating the to-do list project above and feel comfortable about the concepts you learnt so far, you can challenge yourself further and create a flashcard app. A flashcard app is a site where you create cards that contain new words you learnt and their explanations.\u003c/p\u003e\r\n\u003cp\u003eFollow along with the lessons you've covered so far and add functionality similar to the Goals app with the following user stories as your guide:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see the title of each flash card\u003c/li\u003e\r\n\u003cli\u003eas a user, I want to be able to click on the card's title to see it's explanation/detail.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to be able to hide a card detail when am done viewing them.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"wednesday-form-component","title":"Wednesday:Form Component","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eForm Component\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we want to add goals to our application at the moment, we would have to do it by hard coding the goals in the goals array. What if we wanted our users to add goals of their liking from the frontend interface that they are interacting with? How would we go about it?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWell, thanks to web forms, we can give the user this power. A web form, also called a HTML form, helps us collect data from users by providing inputs in which users can fill in data. We will create a web form in which a user can fill in the details of a goal, that is, name, description and completion date to enable users to add goals from the user interface. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe will create our form the same way we have been creating other components. Let's create this form component using the angular CLI on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component goal-form\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command has created the folder \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-form\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and inside it created the files that comprise a component. It has also added our goal-form component to our root module declarations array in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efile.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now define the structure of our form.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"name\"\u0026gt;Name\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type=\"text\" required class=\"form-control\" id=\"name\"\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"description\"\u0026gt;Description\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003etextarea\u003c/strong\u003e class=\"form-control\" id=\"description\" rows=\"4\" required\u0026gt;\u0026lt;/\u003cstrong\u003etextarea\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"form-group\"\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003elabel\u003c/strong\u003e for=\"complete\"\u0026gt;Completion\u0026lt;/\u003cstrong\u003elabel\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003einput\u003c/strong\u003e type='date' id=\"complete\" required\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eform\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a form with three inputs, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ename\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003edescription\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003edate\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which are required to create a goal object. We will now use the selector of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-form\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component to nest it inside the goal component.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;MY GOALS\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eh6\u003c/strong\u003e id={{i}} appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eh6\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)' class=\"btn btn-primary\"\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngIf='goal.showDescription'\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e  [goal]='goal' (isComplete) = 'deleteGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the form to the right side of our goals array. This form only has input fields and angular does not know how to interact with it at this point. In angular, whenever we want to make HTML forms interact with the angular app, we need to import the forms module from angular forms. We do this by making this import in our root modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.modules.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003cbr\u003eimport { NgModule } from '@angular/core';\u003cbr\u003eimport { FormsModule } from '@angular/forms';\u003cbr\u003e....\u003cbr\u003e  imports: [\u003cbr\u003e    BrowserModule,\u003cbr\u003e    AppRoutingModule,\u003cbr\u003e    FormsModule\u003cbr\u003e  ],\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003ccode\u003eFormsModule\u003c/code\u003e and then added it to our \u003ccode\u003eimports\u003c/code\u003e array. We have done this import because the forms module is not available in our angular app by default. Our angular application can now work with any number of forms that we create thanks to the FormsModule.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-components","title":"Monday: Components","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eAngular Components\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eComponents\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e are the building blocks in Angular apps. A component can display data on the screen, listen to user input such as a button click and take action depending on the user input, for example returning a new page after a button click.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEach angular app has to have a root component which acts as the top-level component. This component is rendered first to the user. As we develop our Goals app, we'll be creating more components which will be different from the root component we have now. We can also nest components inside other components to make larger components. We'll see this in practice later as we create more components. The root component will be the \u003c/span\u003e\u003cstrong\u003eparent component\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and the other components we nest inside it will be the \u003c/span\u003e\u003cstrong\u003echild components\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Whenever we initiate an angular application, we tell the browser to render the parent component, which in turn renders its child components if they exist.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eStructure of a Component\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAn angular component has two parts:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Component annotation.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Component definition class.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's use the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to see these two parts. \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-root',\u003cbr\u003e  templateUrl: './app.component.html',\u003cbr\u003e  styleUrls: ['./app.component.css']\u003cbr\u003e})\u003cbr\u003eexport class AppComponent {\u003cbr\u003e  goal = 'Watch Finding Nemo'\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, the \u003ccode\u003eimport\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ekeyword is used to import modules we want to use in a component. Here, we import \u003ccode\u003eComponent\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom \u003ccode\u003e@angular/core\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich is where \u003ccode\u003eComponent\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is located.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eComponent Annotation\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003e@Component\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a metadata annotation, which means it defines metadata properties related to the app component. In the \u003ccode\u003e@Component\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e annotation, we have metadata for the \u003ccode\u003eselector\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e attribute which has a value \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e'\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eapp-root'\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat uniquely identifies the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We have the \u003ccode\u003etemplateUrl\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata attribute whose value points to the HTML template for \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The \u003ccode\u003estyleUrls\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e metadata attribute has a value that points to the CSS file specific to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eComponent Definition Class\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/app.component.ts\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class AppComponent {\u003cbr\u003e  goal = 'Watch Finding Nemo'\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe component definition is a typescript class that we'll use to define the logic of the AppComponent. We \u003ccode\u003eexport\u003c/code\u003e the class so that we can import it anywhere else we need to use it the application. Inside the class, we have defined a property \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assigned it a value of \u003ccode\u003eWatch Finding Nemo\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a string.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eDisplaying an Array\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTypically, we all have more than one goal to achieve. Let's create more goals in an array and then display them in our Goals app.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Component({\u003cbr\u003e  selector: 'app-root',\u003cbr\u003e  templateUrl: './app.component.html',\u003cbr\u003e  styleUrls: ['./app.component.css']\u003cbr\u003e})\u003cbr\u003eexport class AppComponent {\u003cbr\u003e  goals:string[];\u003cbr\u003e\u003cbr\u003e  constructor(){\u003cbr\u003e    this.goals = ['Watch finding Nemo', 'Buy cookies', 'Get new phone case']\u003cbr\u003e  } \u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a property \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and attributed it to an empty String array. We have then created a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003econstructor\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e function and given the empty \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e array 3 string values so it is no longer empty. A \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003econstructor\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e function defines the logic that should be executed once the class is instantiated. In this case, when the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e is initiated, it creates an instance of the goals array with the 3 values that we have assigned it.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003engFor Directive\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us now display these goals.\u003cbr\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e        {{goal}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created an unordered list with a list tag that has some logic, the \u003ccode\u003e*ngFor\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003edirective. The \u003ccode\u003e*ngFor\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is an angular \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003erepeater directive \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat loops through the host element \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a list. Don't forget the asterisk sign \u003ccode\u003e*\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ebefore \u003ccode\u003eng\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e it's part of the syntax\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe directive goes through the \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e array and assigns each item in the array the variable \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We have then displayed the \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e variable inside the list tag using Angular's interpolation binding syntax.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis directive works the same as the for loop in Javascript that we learned in Moringa Prep. An excerpt of the loop syntax used we used in Javascript is:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar arr = [3, 5, 7,11,13];\u003cbr\u003efor (var i in arr){\u003cbr\u003e console.log(i);}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe directive gives a similar output as this loop, only that it now has its own syntax that's different.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we check our browser now, we see that the app displays a list of the goals that we have created.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-output-property-binding","title":"Tuesday: Output Property Binding","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eOutput Property Binding\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur application at this point shows us our goals and their descriptions at the same time. Why don't we build some interactivity in it, in a way that, we don't always see the description of a goal, but instead, we click a button that toggles between showing and hiding a description? This will help us understand how output property binding works. Just as input property binding passes data into a component, \u003c/span\u003e\u003cstrong\u003eoutput property binding\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e passes data out of a component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by adding this property to our goal blueprint to enable us to toggle between showing and hiding a goal description. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  showDescription: boolean;\u003cbr\u003e  constructor(public id: number,public name: string,public description: string){\u003cbr\u003e    this.showDescription=false;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have changed how we create the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class by using a constructor function. We have created a property \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eshowDescription\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e and assigned it to the datatype boolean. Inside the constructor function we have passed the goal properties we had before, to be arguments of the constructor and declared that the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property should be initialized as \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e so that the description is not displayed. We'll write the code to control this logic for hiding and showing goals later on. Notice that we have used the keyword \u003ccode\u003ethis\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to give the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property class access. The \u003ccode\u003epublic\u003c/code\u003e keyword is an access modifier since it determines where the class properties are visible which in our case is anywhere outside the class. If we used the \u003ccode\u003eprivate\u003c/code\u003e keyword, the properties would only be visible inside the class.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhy use a constructor function? A constructor function enables us to define the initialization logic for creating an object. Our Goal object in this case still needs the properties \u003ccode\u003eid,name \u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eand \u003ccode\u003edescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to instantiate our Goal object. The \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property, on the contrary, is not mandatory when creating a Goal object. That's the reason we have used the constructor function, we are telling our angular application that it should initialize a goal object requiring the \u003ccode\u003eid,name \u003c/code\u003eand \u003ccode\u003edescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as mandatory properties and as well add \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to a goal object immediately setting its value to \u003ccode\u003efalse\u003c/code\u003e. Each goal object we create from now on will, therefore, have the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property although we will not explicitly define this property for each Goal object that we create.     \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also change our Goals so we can put the constructor into use.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/goal/goal.component.ts\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    new Goal(1, 'Watch finding Nemo', 'Find an online version and watch merlin find his son'),\u003cbr\u003e    new Goal(2,'Buy Cookies','I have to buy cookies for the parrot'),\u003cbr\u003e    new Goal(3,'Get new Phone Case','Diana has her birthday coming up soon'),\u003cbr\u003e    new Goal(4,'Get Dog Food','Pupper likes expensive snacks'),\u003cbr\u003e    new Goal(5,'Solve math homework','Damn Math'),\u003cbr\u003e    new Goal(6,'Plot my world domination plan','Cause I am an evil overlord'),\u003cbr\u003e  ];\u003cbr\u003e\u003cbr\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created the property \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand specified that it will be an array of type \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen defining each goal, we use the keyword \u003ccode\u003enew\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand call the Goal blueprint class, inside it specifying the three mandatory properties in the constructor function \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eid\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ename\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u0026amp; \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003edescription\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now add the logic for showing and hiding a goal description in our HTML template file.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;{{goal.name}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)'\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e *ngIf='goal.showDescription' [goal]='goal'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the div we have created, we have added a loop logic,\u003ccode\u003elet i = index\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eto register the index of each goal item in the goals list. We have then displayed the goal name and below it created a button that also contains some logic.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eclick Event binding\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe logic we have added in the button is an event binding syntax, the click event binding. We are telling the angular app to listen for a click event on this button and once it happens, it should execute the\u003ccode\u003e toggleDetails()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction which we will create in a few. The \u003ccode\u003etoggleDetails()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function takes in the index position of the goal item as an argument. We have then updated the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e tags with the \u003ccode\u003e*ngIf\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e directive, instructing it to display the goal description if it exists. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eShow and hide Logic\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now create the \u003ccode\u003etoggleDetails()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction that will display and hide a goal description. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e...\u003cbr\u003e\u003cbr\u003e  toggleDetails(index){\u003cbr\u003e    this.goals[index].showDescription = !this.goals[index].showDescription;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have defined the \u003ccode\u003etoggleDetails()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction in our component class and specified that it takes \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eindex\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e as an argument. Inside the function, we have defined the logic for displaying the goal description, which in our case changes the \u003ccode\u003eshowDescription\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and vice versa each time the function is executed. The\u003ccode\u003e goals[index]\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eensures that the function is executed for the goal at the specific index. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf our server is still running, we can now interact with our application on the web browser. We notice that the goal descriptions are no longer displayed and we have the button that we have created which toggles between displaying and hiding a goal description.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-custom-directives","title":"Tuesday:Custom Directives","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCustom Directives\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have talked about two types of directives. There are structural directives that change the structure of the template and attribute directives that change the appearance and behaviour of elements.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can as well create our own custom attribute directives. What if we wanted to strikethrough a goal after finishing it instead of deleting it? To this point, angular has no inbuilt directive to do this. Let us create our own custom directive that will strikethrough a goal after we finish it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt our terminal, let's create a directive using this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate directive strikethrough\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command generates a file \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estrikethrough.directive.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich we are about to use to write the code that will perform a strikethrough and another file \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estrikethrough.directive.spec.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a test file. At the same time, it declares this directive in the root level modules file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts,\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e for us.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e  constructor(){}\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA directive is a class that has the \u003ccode\u003e@directive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e annotation. Directives help us extend the power of HTML by giving it a new syntax. The annotation of a directive only has the \u003ccode\u003eselector\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property which is passed in as the attribute to the host element. The brackets \u003ccode\u003e[]\u003c/code\u003e make it an attribute directive. Angular looks in the template for elements that have this selector and applies the logic that follows to the elements. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's go on to create this logic.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e  constructor(private elem:ElementRef){}\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have imported the \u003ccode\u003eElementRef\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eat the top which we have used in the constructor of the directive's definition class. We use \u003ccode\u003eElementRef\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to inject a reference to the host DOM element in which we will use this directive.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef} from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e\u003cbr\u003e  constructor(private elem:ElementRef){\u003cbr\u003e    this.elem.nativeElement.style.textDecoration='line-through';\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have then targeted the host element's style attribute and changed the text-decoration to line-through. The \u003ccode\u003eElementRef\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003egrants us direct access to the host DOM element through its \u003ccode\u003enativeElement\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's add this directive to our host element to see the changes it creates.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e  (click)='toggleDetails(i)'\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;\u003cstrong\u003eapp-goal-details\u003c/strong\u003e *ngIf=\"goal.showDescription\" [goal]='goal' (isComplete)= 'completeGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-details\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWhen we serve our application, we see the goals have a line crossing the goal name which means that our directive actually works. That's great, right? However, using the directive this way is not helpful because we only wanted to strikethrough a goal if we have finished it. \u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eUser-initiated events\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe'll put the user in control of making the strikethrough work on the app. When the user clicks a goal, it is marked as complete with the strikethrough and when the user double-clicks on the goal, it is marked an incomplete by removing the strikethrough from the goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's implement this in our directive.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef} from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e\u003cbr\u003e  constructor(private elem:ElementRef){ }\u003cbr\u003e  \u003cbr\u003e  private textDeco(action:string){\u003cbr\u003e    this.elem.nativeElement.style.textDecoration=action;\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have changed our directive's logic by creating a function \u003ccode\u003etextDeco()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich takes in an action and then performs a text-decoration using the action. Let's now create these actions that will feed into our \u003ccode\u003etextDeco()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/strikethrough.directive.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Directive,ElementRef,HostListener} from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Directive({\u003cbr\u003e  selector: '[appStrikethrough]'\u003cbr\u003e})\u003cbr\u003eexport class StrikethroughDirective {\u003cbr\u003e\u003cbr\u003e    \u003cbr\u003e  constructor(private elem:ElementRef){}\u003cbr\u003e\u003cbr\u003e  @HostListener(\"click\") onClicks(){\u003cbr\u003e    this.textDeco(\"line-through\")\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  @HostListener(\"dblclick\") onDoubleClicks(){\u003cbr\u003e    this.textDeco(\"None\")\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  private textDeco(action:string){\u003cbr\u003e    this.elem.nativeElement.style.textDecoration=action;\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported \u003ccode\u003eHostListener\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand used it to define the events that will be initiated by user actions, the first one being a click that creates a line-through and the second one being a double click which changes the text-decoration to none thus removing the line-through. We can see that for each action, we call our \u003ccode\u003etextDeco()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ethis.textDeco()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and pass in the name of the action as a string. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's serve our application at this point and interact with it by clicking and double-clicking on the goals to see our directive at work.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-404-pages","title":"Tuesday: 404 Pages","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003e404 Pages\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have all experienced times when we are web browsing and the browser responds with a 404 error of not finding the resource we are looking for which looks similar to this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/404page.png\" alt=\"404page.png\" width=\"2558\" height=\"1216\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is google's 404 page and different applications have their own customized 404 pages. It's very informative to a user as opposed to having a blank page. As much as it might be disappointing to the user, it improves the user experience. In severe cases, it keeps our application from breaking when a user requests for a resource that is generated by the app but isn't present and the occurrence of that error isn't mitigated by the app. Let's create a component for error pages in our application with this command on our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate component not-found\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the template file of this component, let's include this code:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/not-found/not-found.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"alert alert-danger\" role=\"alert\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e class=\"text-center\"\u0026gt;\u0026lt;\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;Sorry, we couldn't find what you're looking for\u0026lt;/\u003cstrong\u003eb\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"text-center\"\u0026gt;Please check your URL!\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used a bootstrap alert component in the template file. We now need to inform our router to direct users to this component if they look for a resource that isn't found in the app.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { NotFoundComponent } from './not-found/not-found.component';\u003cbr\u003e\u003cbr\u003econst routes: Routes = [\u003cbr\u003e  { path: 'goals', component: GoalComponent},\u003cbr\u003e  { path: 'about', component: AboutComponent},\u003cbr\u003e  { path:'**', component:NotFoundComponent},\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported our NotFoundComponent. We have then defined a route whose path has wildcards and directed this path to the NotFoundComponent. The wildcards define a route that is not present in our routes array. So in the case a user tries to look up a route that does not exist in the routes of our app, they will be taken to the not-found component. Let's fire up our servers and try requesting a route in the address bar that doesn't exist in our app to see our apps error page working. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRedirect\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNone of our routes caters for an empty path in our app. This is why when we load the path \u003c/span\u003e\u003ca href=\"http://localhost:4200/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://localhost:4200\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e, only the navbar shows on our app. We can implement a redirect in our app so that when a user loads an empty path, they don't have an empty screen but instead see the goals. Let's configure a route for empty paths.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app-routing.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e { NotFoundComponent } \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e'./not-found/not-found.component'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econst\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e routes: Routes = [\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'goals'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, component: GoalComponent},\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'about'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, component: AboutComponent},\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path:\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'**'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, component:NotFoundComponent},\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e  { path: '', redirectTo:\"/goals\", pathMatch:\"full\"},\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e];\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created an empty path with the redirectTo property that points to the path of the GoalComponent. A redirect requires the pathMatch property which tells the router how to match the URL to with the path given. In our case, the router will only redirect to the /goals path if the URL given is empty ' '. If our server is still running and we load our application, we are redirected to the GoalComponent instantly.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-submit-form","title":"Wednesday: Submit Form","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eSubmit Form\u003c/span\u003e\u003c/h1\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSubmitting forms using ngSubmit\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the bottom of our form, we have a submit button that's supposed to add a new goal to our array but if we click it right now, nothing happens. Let's make it work the way it is supposed to. We want it to add a goal to the goals array when this button is clicked. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo do this, we need to add use the \u003ccode\u003engSubmit\u003c/code\u003e\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003edirective from angular forms module that we imported earlier. Let's add it to our form:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-form/goal-form.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container-fluid\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh2\u003c/strong\u003e class=\"text-center\"\u0026gt;Create a new Goal\u0026lt;/\u003cstrong\u003eh2\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eform\u003c/strong\u003e (ngSubmit)='submitGoal()' #goalForm='ngForm'\u0026gt;\u003cbr\u003e....\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the \u003ccode\u003e(ngSubmit)\u003c/code\u003e event attribute which calls the \u003ccode\u003esubmitGoal()\u003c/code\u003e function once the event is emitted. Let's now write the code to be executed when the \u003ccode\u003esubmitGoal()\u003c/code\u003e function is called. \u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/goal-form/goal-form.component.ts\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003eimport { Component, OnInit, Output, EventEmitter } from'@angular/core';\u003cbr\u003e\u003c/i\u003e...\u003cbr\u003eexportclass GoalFormComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  newGoal = new Goal(0,\"\",\"\",newDate());\u003cbr\u003e@Output() addGoal = new EventEmitter\u0026lt;Goal\u0026gt;();\u003cbr\u003e\u003cbr\u003e  submitGoal(){\u003cbr\u003ethis.addGoal.emit(this.newGoal);\u003cbr\u003e  }\u003cbr\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003ccode\u003eOutput\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003eEventEmitter\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e functions from \u003ccode\u003e@angular/core\u003c/code\u003e. We have then created the \u003ccode\u003eaddGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event emitter object which is of type \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that will emit an event to the parent component. We have then created the \u003ccode\u003esubmitGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function in which we use the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eemit\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method and pass in the new goal object we want to create. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince the \u003ccode\u003eaddGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event is being emitted to a parent component, we need to make sure the parent component is informed of this event being emitted. We want the goal component to be the parent component in this case, so let's write the code that will handle this event.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eapp-goal-form\u003c/strong\u003e (addGoal)=\"addNewGoal($event)\"\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-form\u003c/strong\u003e\u0026gt;\u003cbr\u003e \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the template, we catch the \u003ccode\u003eaddGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event being emitted and define that it should call the \u003ccode\u003eaddNewGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function which takes in an event placeholder. Let's now define this function that is supposed to be executed by our parent component.\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    new Goal(1, 'Watch finding Nemo', 'Find an online version and watch merlin find his son',new Date(2019,9,14)),\u003cbr\u003e    new Goal(2,'Buy Cookies','I have to buy cookies for the parrot',new Date(2019,6,9)),\u003cbr\u003e    new Goal(3,'Get new Phone Case','Diana has her birthday coming up soon',new Date(2019,1,12)),\u003cbr\u003e    new Goal(4,'Get Dog Food','Pupper likes expensive snacks',new Date(2019,11,18)),\u003cbr\u003e    new Goal(5,'Solve math homework','Damn Math',new Date(2019,2,14)),\u003cbr\u003e    new Goal(6,'Plot my world domination plan','Cause I am an evil overlord',new Date(2019,3,14)),\u003cbr\u003e  ];\u003cbr\u003e....\u003cbr\u003e  addNewGoal(goal){\u003cbr\u003e    let goalLength = this.goals.length;\u003cbr\u003e    goal.id = goalLength+1;\u003cbr\u003e    goal.completeDate = new Date(goal.completeDate)\u003cbr\u003e    this.goals.push(goal)\u003cbr\u003e  }\u003cbr\u003e....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created the \u003ccode\u003eaddNewGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function that takes a goal object as an argument. We first need to change the \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property of the goal. We get the length of the array of goals and store it in the variable \u003ccode\u003egoalLength\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e we then add one to the \u003ccode\u003egoalLength\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and set that as the new \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e for the goal. We then set the \u003ccode\u003ecompleteDate\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e property of the goal object to a \u003ccode\u003eDate\u003c/code\u003e Object. Lastly, we push the new goal to our array of goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf our server is still running, we can now add a new goal to the array and it will display on our application.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-emitting-events","title":"Tuesday:Emitting Events","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eEmitting Events\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we want a child component to communicate with a parent component, we make the child component emit an event that is taken up by the parent component. Let us make our child component \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail, \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecommunicate with its parent component, the goal component\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e We'll do this by adding a button to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e component that deletes a goal once we ascertain that we have completed it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's create this button in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal-detail\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e HTML template.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)= 'goalComplete(true)'\u0026gt;Complete\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added a button below the goal description \u0026lt;p\u0026gt; tag and defined some logic inside it. We have added a click event binding syntax which will call the \u003ccode\u003egoalComplete(true)\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction once the button is clicked. Let's now create this function.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-detail.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\u003cbr\u003e...\u003cbr\u003eexport class GoalDetailComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  @Input() goal: Goal;\u003cbr\u003e  @Output() isComplete = new EventEmitter\u0026lt;boolean\u0026gt;();\u003cbr\u003e\u003cbr\u003e  goalComplete(complete:boolean){\u003cbr\u003e    this.isComplete.emit(complete);\u003cbr\u003e  }\u003cbr\u003e  constructor() { }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported \u003ccode\u003eOutput\u003c/code\u003e decorator and the \u003ccode\u003eEventEmitter\u003c/code\u003e class. We have then used the \u003ccode\u003eOutput\u003c/code\u003e decorator to define \u003ccode\u003eisComplete\u003c/code\u003e as an EventEmitter that takes in a boolean. After that, we have created our \u003ccode\u003egoalComplete()\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction which calls the \u003ccode\u003eemit\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003emethod on the \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e EventEmitter. What this does is pass this event to the parent component. We, therefore, have to make the parent component process this event. Let's write the code for this in our parent component.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003esrc/app/goal.component.html\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;{{goal.name}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)'\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e *ngIf='goal.showDescription' [goal]='goal' (isComplete) = 'completeGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo make the parent component receive this event, we need to catch the event being emitted to the parent component and define a function that will be triggered once this event is captured. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe event being emitted is \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe catch this event in the parent component using parenthesis\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003ccode\u003e()\u003c/code\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eand then define that when it is emitted, the \u003ccode\u003ecompleteGoal($event,i)\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction should be called. Inside the function, we have used the special variable, \u003ccode\u003e$event\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eas a placeholder for the values that are emitted with the event. We have also passed in the index of the goal item in the function. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFinally, let's create this \u003ccode\u003ecompleteGoal()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function which will be triggered when our event is captured.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e GoalComponent \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eimplements\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e OnInit {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  completeGoal(isComplete, index){\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (isComplete) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ethis\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.goals.splice(index,\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e1\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    }\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  }\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econstructor\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e() { }\u003cbr\u003e \u003cbr\u003e  ngOnInit() {\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eInside the function, we have passed in the \u003ccode\u003eisComplete\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e event emitter and \u003ccode\u003eindex\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as our arguments then used the \u003ccode\u003esplice\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e javascript function to delete the goal at the index. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we serve our application now, we have the complete button which deletes a goal at a specific index from our goals array when clicked.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-creating-a-service","title":"Monday: Creating a service","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating a Service\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAngular implements Dependency Injection using \u003c/span\u003e\u003cstrong\u003eservices\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. A \u003c/span\u003e\u003cstrong\u003eservice\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e shares data and information among classes that don't know each other. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur goals are stored in an array in a file that's in our project right now. This is because it's best practice that a component does not fetch or save data knowingly. A component should focus on presenting data and delegate data access to a service. This is why we moved our goals array to a new file, \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egoals.ts. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also note that this data can come from a different source, like a database, a remote server or an API. Let's create a service that will share our goals among classes that need it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn our terminal, let's use this command to create the service:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate service goal-service/goal\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command creates a folder named goal-service and inside it creates the service class file and the service test file.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class GoalService {\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe class file has the \u003c/span\u003e\u003cstrong\u003eInjectable\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e symbol imported and the class annotation uses it as a decorator. This marks this class as one that participates in dependency injection. The decorator accepts metadata for the class which means our service can also have its own dependencies. The \u003c/span\u003e\u003cstrong\u003eprovidedIn \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eproperty has a value \u003c/span\u003e\u003cstrong\u003e'root'\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e which means that this service is injectable throughout the application.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's write code to make this service access our goals.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal-service/goal.service.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Injectable } from '@angular/core';\u003cbr\u003eimport { Goals } from '../goals';\u003cbr\u003e\u003cbr\u003e@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\u003cbr\u003eexport class GoalService {\u003cbr\u003e\u003cbr\u003e  getGoals(){\u003cbr\u003e    return Goals\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  constructor() { }\u003cbr\u003e}\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported our \u003cstrong\u003eGoals\u003c/strong\u003e array. In the service class, we have created a method \u003cstrong\u003egetGoals()\u003c/strong\u003e which returns our Goals array. We now have a service that gets goals for components or other services that need it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-mvc-architecture-with-angular","title":"Monday: MVC Architecture with Angular","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOne of the popular ways of organising application is using the \u003c/span\u003e\u003cstrong\u003eMVC architecture\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Angular uses this architecture to organise its application. Let's look at what is MVC architecture in Angular.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eModel-view-controller, or MVC as its popularly known, is a software design pattern for developing web applications. This design pattern is made up of three parts:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003e Model\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for maintaining data\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eView\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e:Responsible for displaying data to the user\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eController\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for controlling the interaction between the Model and Views\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC design pattern separates the application's logic from the user interface.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC concept can be represented graphically as follows:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/MVC.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MVC\" width=\"561\" height=\"421\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/6805\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's walk through what's happening in the diagram. Assume that you have an application that tracks your goals. Each time you delete or add a new goal, the controller updates the model by either deleting or adding a goal. In other words, the controller updates the model as per the user input.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe model then notifies the controller of the changes, which in turn updates the views to display the updated information. When you add your goals and the model is updated, the controller updates the view which displays the new goal on your site.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's look at each part separately and how they function:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eModel\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is the application's data structure. It represents the actual data that an app deals with, and it responds to requests from views and instructions from controllers to update itself. Moreover, a model does not depend on either view or controller.  In Angular applications, models are represented by objects. In the example of the goal application from earlier, our model would be:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass Goal{\u003cbr\u003e  constructor(){}\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDon't worry about mastering the code right now - we'll be creating applications soon enough. For now, focus on what each part represents, and how they relate to one another.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eView\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eViews are what is presented to the user and how they interact with it. In other words, it's what the user actually sees on their screen, and can be made with HTML, CSS or Javascript. It displays the model data. In Angular, we can create a view in HTML by using double curly braces.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;h4 id=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"{{i}}\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e appStrikethrough\u0026gt; {{goal.name}} due on {{goal.completeDate|date|uppercase}} \u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e/h4\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch2\u003e\u003cstrong\u003eController\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe controller is essentially the glue between the model and the view. It updates the view when the view changes and also adds event listeners to the view. Additionally, it updates the model when the user manipulates the view.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince the controller links both the model and the views, it can be separated into two; view controllers and model controllers\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eView controllers are responsible for pulling together the model used by the view and handling the input from the user of the view. For example, if you wanted to delete a goal from your goal application, you would have an event listener in the HTML that listens for when the user clicks the delete button and then a function that actually deletes the clicked goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal.component.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;button \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"btn btn-danger btn-sm\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (click)=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'deleteGoal(i)'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;Delete Goal\u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the example above the event listener is `(click)` and the function that deletes the goal is `deleteGoal(i)`\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e For now, do not worry about how to create the function, we'll explain that later as we look at angular in depth. The important thing to understand for now is how the event listeners work together with functions as view controllers.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn the other hand, model controllers contain the data to be displayed as well as the data to be collected as input in forms. It can also be functions that are invoked based on the user's activity such as clicking a button or making changes to the model data. For example, a function that adds a new goal to the model. Whenever you add a new goal through a form, there is a function that is responsible for adding that goal to your database. This function is a model controller because it interacts directly with your model. \u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-error-handling","title":"Monday: Error Handling","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eError Handling\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat would happen if we make a bad request to the API and we get no response, or even worse, the servers are down and not working? We need to prepare our application for such an event so that it is not blank or broken. The subscribe function has an err function that gives us the capacity to handle errors. Let's use it to handle the occurrence of an error in which we get no response from the API.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e      this.http.get\u0026lt;ApiResponse\u0026gt;(\"http://quotes.stormconsultancy.co.uk/random.json\").subscribe(data=\u0026gt;{\u003cbr\u003e      // Succesful API request\u003cbr\u003e      this.quote = new Quote(data.author, data.quote)\u003cbr\u003e    },err=\u0026gt;{\u003cbr\u003e        this.quote = new Quote(\"Winston Churchill\",\"Never never give up!\")\u003cbr\u003e        console.log(\"An error occurred\")\u003cbr\u003e    })\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the err function and specified the quote instance that should be created when we get no response and the error message to be logged in the console. Try messing with the URL by in this file by adding or omitting a character, and you'll  see the err function handling the response for us.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsing Loaders\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince we are making requests to a remote server, it would be necessary to convince the user that there is something happening in the background, as the app awaits a response. This enhances the user experience of the app. We will do this using a \u003ca href=\"https://github.com/MurhafSousli/ngx-progressbar/blob/master/README_V3.md#installation\"\u003eloader\u003c/a\u003e which is a type of a progress bar. It creates a visual animation in our app that convinces the users that there is something happening. To install this loader module, let's run this command in our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm install --save @ngx-progressbar/core@3.0.2 @ngx-progressbar/http-client@3.0.2\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis module needs a supplementary module that looks at observable data for the loader to work properly called rxjs-compat. Let's install it using the following command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm install --save rxjs-compat\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now add it to our root modules of our app to make it available for use.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { NgProgressModule } from '@ngx-progressbar/core';\u003cbr\u003eimport { NgProgressHttpClientModule } from '@ngx-progressbar/http-client';\u003cbr\u003e...\u003cbr\u003eimports: [\u003cbr\u003e    ....\u003cbr\u003e    NgProgressModule.forRoot(),\u003cbr\u003e    NgProgressHttpClientModule\u003cbr\u003e],\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have imported the normal loader and the loader that listens for our HTTP requests from the app and automatically displays progress according to our apps requests. We have then added both to the \u003c/span\u003e\u003cstrong\u003eimports \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003earray. The forRoot() method makes the loader available and configurable at the root level of our app and supplies the dependencies it needs. We don't need any more configurations since the NgProgressHttpClientModule works with the requests made from our app. We only need to display the loader in our template.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003eng-progress\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;MY GOALS\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e.....\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added tags in the template placed at the top where we want to see our progress bar. When we run our server and go to our app in the browser, we see the loader appear every time we refresh the page showing the progress of every new request.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-apps","title":"Monday: Angular Apps","type":"WikiPage","content":"\u003ch2\u003eAngular Apps\u003c/h2\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating an Angular App\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have a basic understanding of typescript and ES6 from our precourse work so we can now dive into working with Angular. Let us create an app that helps us manage our goals. We create Angular apps using the Angular \u003ccode\u003eCLI\u003c/code\u003e - Command Line Interface. Let us open our terminals and use the CLI to generate a new Angular app. First, create a directory where you want to store your angular apps. Inside the directory you just created, run the command :\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng new Goals\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command prompts us on whether we want to use Angular routing. Type \u003ccode\u003ey\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and hit \u003ccode\u003eenter\u003c/code\u003e. Don't worry about what routing means, we'll look at it later on. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe command also prompts us on which stylesheet format we want to use. We'll be using CSS, so select the CSS option and hit enter.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command is taking some time to run. While it runs, it is creating boilerplate code for our angular app as well as creating the folder structure so we do not have to stress about setting up the files and folders. It also downloads and installs the necessary dependencies and packages needed for our app to run.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo see the end result of the command, let us navigate into the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoals \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efolder and open it in our favourite editor. We see the following folder layout:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"font-family: sans-serif; font-size: 1rem;\" src=\"viewer/files/ng-initial-folder-structure.png\" alt=\"angular-initial-folder-structure.png\" width=\"325\" height=\"756\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/11980\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat is how we create angular apps using the angular CLI, we use the command \u003ccode\u003eng new \u0026lt;app-name\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eRunning an Angular App\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us run our app on a local development server so we can interact with it. We use the command \u003ccode\u003eng serve\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eto run the app on the local development server.  Let's navigate to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoals \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003edirectory in the terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ cd Goals/\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhile inside the \u003ci\u003eGoals\u003c/i\u003e directory, let's run this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng serve\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command responds by compiling all the files and then starts the local development server with the following output:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo see the actual app, let's open the URL \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://localhost:4200/ \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eon the address bar of our web browser. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe are greeted with a welcome message that has a big red Angular logo on the web browser. That's amazing! We have successfully initiated our first angular app.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBut wait a minute, we did not write any code and yet we have content displaying on our browser! What really happened? Behind the scenes, the Angular CLI created boilerplate code for us in the files it generated. We'll notice that we have lots of files created but we'll focus on the ones in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/ \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder. This is the folder in which our application's \u003c/span\u003e\u003cstrong\u003eComponent\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003es\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003elive and we'll be working with the files inside this folder most of the time. We'll discuss Components in detail later on, so let it not frighten you. For general understanding, let's keep in mind that a component does something in an angular app.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEvery new Project is created with one \u003c/span\u003e\u003cstrong\u003eComponent,\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eInside the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder, there's a subfolder named \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhich hosts the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eInside the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder, we have other files as well. Let's look at those that we'll work with:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.css\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - Contains the CSS styles specific to the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.html\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - Contains the HTML template code for the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - Contains the typescript logic code for the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is the file that we will use to write code for the functionality of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.module.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e - This file contains the high-level configurations that relate to the angular app in general. We'll explore it later on to understand what it entails.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn angular, each component is identified with a unique selector. Open the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eapp.component.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e file in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e folder. At the top, we have \u003ccode\u003e@Component\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e which is a \u003c/span\u003e\u003cstrong\u003edecorator\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e function whose purpose is to declare metadata for the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent. \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eOne of the metadata declared here is \u003ccode\u003eselector\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and its value is set as \u003ccode\u003eapp-root\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003ci\u003e\u003ccode\u003engForm \u003c/code\u003e\u003c/i\u003e\u003ccode\u003e@Component selector\u0026lt;app-root\u003c/code\u003e\u0026gt;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we navigate to \u003ci\u003esrc/index.html,\u003c/i\u003e we notice that we have the \u003ccode\u003e\u0026lt;app-root\u003c/code\u003e\u0026gt;\u003ccode\u003e\u0026lt;/app-root\u003c/code\u003e\u0026gt; tag in the body of the HTML template. The selector is used to render the \u003ci\u003eAppComponent\u003c/i\u003e in the \u003ci\u003eindex.html\u003c/i\u003e template file, which shows us that the \u003ci\u003eAppComponent\u003c/i\u003e is uniquely identified using the \u003ccode\u003eapp-root\u003c/code\u003e selector. Different components will, therefore, have different selectors to uniquely identify them. As we create more components, we'll notice that these selectors are important because they allow us to nest components inside each other without much of a do.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eUpdating our Components\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe'll be building a goal tracking application over this week to help us understand concepts in Angular. Let's get our hands dirty and tweak the code to see what happens in our app. Let's update the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the following code. \u003c/span\u003e\u003ccode class=\"language-bash\"\u003e \u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e { Component } \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efrom\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003e'@angular/core'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e@Component({\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  selector: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'app-root'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  templateUrl: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'./app.component.html'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  styleUrls: [\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'./app.component.css'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e]\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e})\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  goal = \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'Watch Finding Nemo'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003ccode class=\"language-bash\"\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a property \u003ccode\u003egoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and given it a value \u003ccode\u003e'Watch Finding Nemo'\u003c/code\u003e.\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow, let's change the HTML template code of the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent.\u003c/span\u003e\u003c/i\u003e\u003ccode class=\"language-bash\"\u003e \u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003ccode class=\"language-bash\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;My goal for today is {{ goal }}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have deleted the initial content in the file and created a \u003cspan style=\"color: #ff0000;\"\u003ediv\u003c/span\u003e and inside it, created a \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e tag and a \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e tag. Inside the \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e tag, we have used double curly braces\u003ccode\u003e {{}}\u003c/code\u003e and put the \u003ccode\u003egoal\u003c/code\u003e property we created in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e class. By doing this, we have used angular's \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003einterpolation binding\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e syntax to put the value of the goal property inside the \u003cspan style=\"color: #ff0000;\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e tag. Let's serve our application using the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eng serve\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e command and go to our browser to see the changes we have made.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-add-boostrap","title":"Wednesday: Add Boostrap","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eAdding Bootstrap\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur application is looking very plain and stale at the moment. We can beautify it using the frontend web component library we covered in prep, bootstrap. We will add bootstrap to Angular using the command line. The boostrap4 documentation also clarifies that some components in bootstrap, like modals, need jquery and popper to work so let's install all of them in case we need to use such components.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ npm install --save bootstrap popper\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command will add bootstrap to our node modules. We need to make it available inside the application at the root level for us to use it. We'll do this in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estyles.css \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efile available at root.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/styles.css\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e@import \"~bootstrap/dist/css/bootstrap.css\"\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have done this by simply importing bootstrap in the root CSS file. We can now use bootstrap in our application. At this point, if we take a look at our application after starting our local server, we can spot a change in the font already since bootstrap is installed. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's use a simple layout for our application.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"container\"\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"col-md-6\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eh4\u003c/strong\u003e id={{i}} appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eh4\u003c/strong\u003e\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)='toggleDetails(i)' class=\"btn btn-primary\"\u0026gt;Toggle Details\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e        \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngIf='goal.showDescription'\u0026gt;\u003cbr\u003e          \u0026lt;\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e  [goal]='goal' (isComplete) = 'deleteGoal($event,i)'\u0026gt;\u0026lt;/\u003cstrong\u003eapp-goal-detail\u003c/strong\u003e\u0026gt;\u003cbr\u003e        \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003ci\u003esrc/app/goal-detail/goal-detail.component.html\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ci\u003e\u003c/i\u003e\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;{{goal.description}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;This goal will be complete in {{goal.completeDate|dateCount}} days\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;\u003cstrong\u003ebutton\u003c/strong\u003e (click)= 'goalDelete(true)' class=\"btn btn-outline-danger\"\u0026gt;Delete Goal\u0026lt;/\u003cstrong\u003ebutton\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have used boostrap classes in our HTML templates tags and the bootstrap grid layout also. Feel free to make adjustments to your application to make it more visually appealing. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-httpclient","title":"Monday :HttpClient","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eHttpClient\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHttpClient is a mechanism used by Angular to enable communication to remote servers and backend services using the HTTP protocol. We will use a random quote API which is a backend service in our app to display quotes from the API on our app. This will give us an understanding of how to use HttpClient in Angular to access backend services and remote servers. To make HttpClient available everywhere in the app, we import it in our root modules as follows.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.module.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eimport { FormsModule } from '@angular/forms';\u003cbr\u003eimport { HttpClientModule } from '@angular/common/http';\u003cbr\u003e...\u003cbr\u003e@NgModule({\u003cbr\u003e...\u003cbr\u003e  imports: [\u003cbr\u003e...\u003cbr\u003e    FormsModule,\u003cbr\u003e    HttpClientModule\u003cbr\u003e  ],\u003cbr\u003e...\u003cbr\u003e})\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported the \u003c/span\u003e\u003cstrong\u003eHttpClientModule\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and added it to the imports array. We are going to use this module to access a random quote API and display the quotes on our app. If you paste this \u003c/span\u003e\u003ca href=\"http://quotes.stormconsultancy.co.uk/random.json\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://quotes.stormconsultancy.co.uk/random.json\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e link in your browser's address bar, you'll see a random quote that changes every time you refresh the webpage. You can install \u003c/span\u003e\u003ca href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eJSONView\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e, or \u003c/span\u003e\u003ca href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eJSONFormatter\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e from chrome web store to make the response more readable. The response looks something like this but the quote and author may vary:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eauthor\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"James O. Coplien\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eid\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e23\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003equote\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"You should name a variable using the same care with which you name a first-born child.\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e,\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003epermalink\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"\u003c/span\u003e\u003ca href=\"http://quotes.stormconsultancy.co.uk/quotes/23\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehttp://quotes.stormconsultancy.co.uk/quotes/23\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe request returns a response that has four properties, author, id, quote, and permalink. We will make a request to the API and display the quotes in our app. We will display the author and quote only in our app. We, therefore, need to make Angular sieve out what we need by creating a quote class that will help us create quote instances. To create a class, let's execute this command in our terminal:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng generate class quote-class/quote\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis command creates a folder quote-class, a class file, quote.ts, and a test file quote.spec.ts. Inside the class file, let's define how we want our quote instances created.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/quote-class/quote.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Quote {\u003cbr\u003e\u003cbr\u003e  constructor(public author:string, public quote:string ){}\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have created a constructor inside the Quote class and defined two public properties, author and quote, both of the string type.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can now make a HTTP request to the API in our goal component\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component, OnInit } from '@angular/core';\u003cbr\u003eimport { HttpClient } from '@angular/common/http';\u003cbr\u003e...\u003cbr\u003eimport { Quote } from '../quote-class/quote';\u003cbr\u003e....\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e  \u003cbr\u003e  goals:Goal[];\u003cbr\u003e  alertService:AlertService;\u003cbr\u003e  quote:Quote;\u003cbr\u003e....\u003cbr\u003e  constructor(goalService:GoalService, alertService:AlertService, private http:HttpClient) {\u003cbr\u003e    this.goals = goalService.getGoals()\u003cbr\u003e    this.alertService = alertService;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  ngOnInit() {\u003cbr\u003e\u003cbr\u003e    interface ApiResponse{\u003cbr\u003e      author:string;\u003cbr\u003e      quote:string;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e    this.http.get\u0026lt;ApiResponse\u0026gt;(\"http://quotes.stormconsultancy.co.uk/random.json\").subscribe(data=\u0026gt;{\u003cbr\u003e      // Succesful API request\u003cbr\u003e      this.quote = new Quote(data.author, data.quote)\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the top, we have imported HttpClient and the Quote class. Inside the component class, we have created a property quote an assigned it the type Quote. In the constructor function, we have created a property http which is of the type HttpClient. Before we make the request, we need to inform Angular the kind of response we'll receive from the API by defining an interface which we have named ApiResponse. Inside the interface, we have specified that we'll be expecting a property author and quote which are both of the type string. We have then made a request to the API with the get function passing in the API URL accompanied by the interface for the data we expect to receive. We have then called the subscribe function which has a data function that is executed when the request is successful. We then create a new quote instance with the properties we get from the response.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's display this quote on our app.\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e....  \u003cbr\u003e\u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e class=\"row\"\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eblockquote\u003c/strong\u003e class=\"blockquote text-center\"\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e class=\"mb-0\"\u0026gt;{{quote.quote}}\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003efooter\u003c/strong\u003e class=\"blockquote-footer\"\u0026gt;\u0026lt;\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;{{quote.author}}\u0026lt;/\u003cstrong\u003ecite\u003c/strong\u003e\u0026gt;\u0026lt;/\u003cstrong\u003efooter\u003c/strong\u003e\u0026gt;\u003cbr\u003e    \u0026lt;/\u003cstrong\u003eblockquote\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have displayed our quote in a bootstrap blockquote, and if our server is still running, we can see a random quote displayed on our app below our goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-objectives","title":"Monday: Angular Objectives","type":"WikiPage","content":"\u003cp\u003eWe will be learning how to create basic Angular apps using Angular CLI over the next two weeks.\u003c/p\u003e\r\n\u003cp\u003eAngular can be written using Javascript, Typescript or Dart. In our case, we will write our Angular apps using Typescript, which you learned over the pre-course work.\u003c/p\u003e\r\n\u003cp\u003eAngular CLI is a command-line interface that helps us build Angular apps quickly.\u003c/p\u003e\r\n\u003ch3\u003ePlan\u003c/h3\u003e\r\n\u003cp\u003eThis week we will start off by learning how to add content and interactivity to our Angular app. To start with, we will use templates and directives to display data dynamically. Then, we'll organise our data by adding models to our application and use event binding for adding interactivity.\u003c/p\u003e\r\n\u003cp\u003eMonday and Tuesday have been structured to have slightly more content so that you have enough basic knowledge which will help you practice on building an Angular application from scratch. Additionally, it also gives you a chance to engage with the content more and better understand the week's concepts.\u003c/p\u003e\r\n\u003cp\u003eBy the end of the week, you will be able to\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a fully functional Angular Application.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive to display data\u003c/li\u003e\r\n\u003cli\u003eUse event binding to add interactivity to our application\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNext week we will explore the framework further by adding pages to our application using routers and so much more.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eThe week's independent project will be evaluated for the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse Angular CLI to create your Project.\u003c/li\u003e\r\n\u003cli\u003eCreate a model for your Quote objects.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive that highlights the quote that has the highest vote.\u003c/li\u003e\r\n\u003cli\u003eImplement a form component that has input sections for the quote.\u003c/li\u003e\r\n\u003cli\u003eInitialize an initial value of 0 for both upvote and downvote for each quote\u003c/li\u003e\r\n\u003cli\u003eAdd a custom pipe which displays the time passed since the quote was created.\u003c/li\u003e\r\n\u003cli\u003eMake a well-documented README that highlights:\r\n\u003col\u003e\r\n\u003cli\u003eAuthor\u003c/li\u003e\r\n\u003cli\u003eA brief description of the project \u003c/li\u003e\r\n\u003cli\u003eProgram set-up instructions\u003c/li\u003e\r\n\u003cli\u003eA link to the deployed site of your project\u003c/li\u003e\r\n\u003cli\u003eCopyright and License information\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAt least use bootstrap  to style you project\u003c/li\u003e\r\n\u003cli\u003eHigh-Quality  and portfolio-ready project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"wednesday-bootstrapping","title":"Wednesday: Bootstrapping","type":"WikiPage","content":"\u003ch2\u003eBootstrapping\u003c/h2\u003e\r\n\u003cp\u003eAll Angular apps have at least one Angular Module which is the root module that is used to launch the application. By convention, it is called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhose configuration is contained in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.module.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Imports_4\"\u003e\u003c/a\u003eImports\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { BrowserModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {FormsModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/forms'\u003c/span\u003e;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalDetailsComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-details/goal-details.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal/goal.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { StrikethroughDirective } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./strikethrough.directive'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { DateCountPipe } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./date-count.pipe'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalFormComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-form/goal-form.component'\u003c/span\u003e;\r\n\r\n..........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our application, let's examine it. The first part is the Import section where we import external modules, components and directives that are used in our application.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"NgModule_decorator_23\"\u003e\u003c/a\u003eNgModule decorator\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@ngModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator identifies the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. It has metadata that tells Angular how to run the application.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Declarations_array_45\"\u003e\u003c/a\u003eDeclarations array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n ......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAngular knows what apps belong to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby finding them in the declaration array. We also place custom directives and pipes that we create in the declarations array.\u003cbr\u003eThe Angular CLI’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egenerate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand adds the generated pipes, components and directives to the declaration array automatically for us.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Imports_Array_63\"\u003e\u003c/a\u003eImports Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\nimports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn Angular, we group features into specific units called modules. We add a module to the imports array when the application wants to use its features. For example, since our application runs on the browser, we use features provided in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBrowserModule\u003c/code\u003e. We have also used some features like two-way data binding which are provided by the \u003cspan style=\"background-color: #ffffff; font-size: 10pt; color: #ff0000;\"\u003eformsModule\u003c/span\u003e in our application\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Providers_Array_78\"\u003e\u003c/a\u003eProviders Array\u003c/h4\u003e\r\n\u003cp\u003eWe can deliver services to different parts of an application using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edependency injection\u003c/code\u003e. We use the providers array to register the different services needed by our application. We do not have any services yet that is why our array is empty. We'll learn about services later on and we'll see them being registered in this array.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Bootstrapping_Array_82\"\u003e\u003c/a\u003eBootstrapping Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\n bootstrap: [AppComponent]\r\n .......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe launch the application by bootstrapping the root component which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Bootstraping_an_Appplication_93\"\u003e\u003c/a\u003eBootstrapping an Application\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003emain.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { enableProdMode } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { platformBrowserDynamic } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser-dynamic'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app/app.module'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { environment } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./environments/environment'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err =\u0026gt; \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(err));\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe bootstrap an Angular Application in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emain.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Here angular dynamically creates a browser platform and bootstraps the root Module which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e.The process of bootstrapping sets up an execution environment finding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebootstrap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand creating an instance of it within its selector tag in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eWe have now seen why the AppModule is important in our application and where it is used.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-moringa-overflow","title":"Tuesday:Practice: Moringa Overflow","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e  Get comfortable using Angular Cli and practice the process of angular routing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm Up \u003c/h3\u003e\r\n\u003cp\u003eDiscuss the following questions with your pair\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is routing in Angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is this tag used for \u0026lt;router-outlet\u0026gt;\u0026lt;/router-outlet\u0026gt; ?\u003c/li\u003e\r\n\u003cli\u003eWhat is a routerLink?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode \u003c/h3\u003e\r\n\u003ch4\u003eMoringa Overflow\u003c/h4\u003e\r\n\u003cp\u003eThe project for today will be to create a basic discussion /forum site where users can post questions or news about a certain topic. Much like stack overflow but we will call it Moringa overflow. Here are some user stories to help you get the bigger picture of the project.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see several discussion categories on the landing page\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click a category and view its collection of posts\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click on a post and see its details\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to add a post to my desired category\u003c/li\u003e\r\n\u003cli\u003eAs a user,  I would like to have the option of deleting my post\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to update my post if necessary.\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"tuesday-pipes","title":"Tuesday: Pipes","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003ePipes\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eImagine having a date that you show on your own website that reads like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFri Feb 15 1998 00:00:00 GMT-0700 (Pacific Daylight Time)\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis date does not look or feel user-friendly. We would want a simple and readable date with minimal details, something like:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFebruary 15, 1998\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn angular, we can do such transformations with the help of pipes. A pipe takes in data as input and transforms it into the desired output. Angular has several inbuilt pipes that we can use and we can also create our own custom pipes if we want to. We'll use some inbuilt pipes first and later create our own custom pipes. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's first add a completion date to our goals. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  public showDescription: boolean;\u003cbr\u003e  constructor(public id: number,public name: string,public description: string, public completeDate: Date){\u003cbr\u003e    this.showDescription=false;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the \u003ccode\u003ecompleteDate\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ein our constructor for the goal blueprint and set its datatype to \u003ccode\u003eDate\u003c/code\u003e. We now need to update our goals array to add a completion date to each goal.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003eexport class GoalComponent implements OnInit {\u003cbr\u003e\u003cbr\u003e  goals: Goal[] = [\u003cbr\u003e    new Goal(1, 'Watch finding Nemo', 'Find an online version and watch merlin find his son',new Date(2019,3,14)),\u003cbr\u003e    new Goal(2,'Buy Cookies','I have to buy cookies for the parrot',new Date(2019,6,9)),\u003cbr\u003e    new Goal(3,'Get new Phone Case','Diana has her birthday coming up soon',new Date(2019,1,12)),\u003cbr\u003e    new Goal(4,'Get Dog Food','Pupper likes expensive snacks',new Date(2019,0,18)),\u003cbr\u003e    new Goal(5,'Solve math homework','Damn Math',new Date(2019,2,14)),\u003cbr\u003e    new Goal(6,'Plot my world domination plan','Cause I am an evil overlord',new Date(2019,3,14)),\u003cbr\u003e  ];\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003eDate\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e instance takes 3 arguments the first one is the year, the second argument is the month the third argument is the date. The month is calculated from 0-11 where 0 is January and 11 is December.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's now display the completion date along with our goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt; \u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe have added the completion date to our template beside the goal name. If we serve our application, we can see the completion date. This date does not look user friendly, it looks complicated. Let's use the inbuilt date pipe in Angular to convert it to a readable format. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt; \u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf we look at our application now, the date is in a simpler format that looks user friendly. We have added the date pipe \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e|date\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e in our template, which has converted the initial date we had to a simple readable format. The date pipe has made it simple for us to convert our date into a readable format.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eChaining Pipes\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can also chain pipes to extend the transformation of the input that we give to a pipe. \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal/goal.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e  \u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e *ngFor='let goal of goals;let i = index'\u0026gt;\u003cbr\u003e    \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e appStrikethrough\u0026gt;{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt; \u003cbr\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWe have added the \u003ccode\u003euppercase\u003c/code\u003e pipe to our completion date, which as the name suggests, converts the completion date to capital characters. When we serve our application, we see the date is now in all caps.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-meal-tracker","title":"Monday:Practice: Meal Tracker","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal: \u003c/strong\u003eContinue practising creating applications with Angular Cli while familiarizing yourself with the process of using services.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm up\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is Dependency Injection? Why is it important?\u003c/li\u003e\r\n\u003cli\u003eWhat are services in angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is Http service used for?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode\u003c/h3\u003e\r\n\u003ch4\u003eMeal Tracker\u003c/h4\u003e\r\n\u003cp\u003eCreate a meal tracking application where the user gets to keep track of the food they consume in each day. Here are some user stories to help you get started;\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I want to log a food I have eaten by submitting a form with food name, calories and details.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to view a list of foods I have logged.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want options to view all foods, only high-calorie foods (more than 500 calories), or only lower-calorie foods (less than 500 calories).\u003c/li\u003e\r\n\u003cli\u003eI want to click a food to edit its name, details or calories (in case I decide to pretend my fries were 100 calories instead of 365).\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eMake sure you use at least one service to help you retrieve the meal from the meal array.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"monday-creating-a-class","title":"Monday: Creating a class","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreating a Class\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA goal has much more detail than just a name. It can have a completion date, an ID, number of participants, an owner, etc. So far, we have been creating our goals as pure strings inside our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We can continue defining these goals as strings in our \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppComponent\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e but it will get tedious and clumsy as we create more and more goals. To curb this, angular allows us to create a class that will be the blueprint for creating goal objects.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoal Blueprint Class\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhile learning Javascript in Prep, we got familiar with Object Oriented Programming in which we build objects from classes. A class is an extensible program-code-template for creating objects by providing initial values for variables and member functions or methods. Let us create a class with the angular CLI to define the blueprint of a goal which is how we will be creating Goal objects. On our terminal, let's execute this command:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ ng \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003egenerate\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e Goal\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe use the \u003ccode\u003eng generate class \u0026lt;class-name\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ecommand to create a class using the angular CLI. We will create goals that have a name and an ID. Let us define this logic in the goal class we have just created.\u003ccode\u003e\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/goal.ts\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eexport class Goal {\u003cbr\u003e  id: number;\u003cbr\u003e  name: string;\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eInside the class \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we have defined the \u003ccode\u003eid\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and attributed it to the datatype number and \u003ccode\u003ename\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to be a string. We have exported the class to make it available for use anywhere else we need it in the app.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eDisplaying an Array\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet us create several goals using the goal blueprint class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eimport { Component } from '@angular/core';\u003cbr\u003eimport { Goal } from './goal';\u003cbr\u003e....\u003cbr\u003eexport class AppComponent {\u003cbr\u003e  goals:Goal = [\u003cbr\u003e    {id:1, name:'Watch finding Nemo'},\u003cbr\u003e    {id:2,name:'Buy Cookies'},\u003cbr\u003e    {id:3,name:'Get new Phone Case'},\u003cbr\u003e    {id:4,name:'Get Dog Food'},\u003cbr\u003e    {id:5,name:'Solve math homework'},\u003cbr\u003e    {id:6,name:'Plot my world domination plan'},\u003cbr\u003e  ];\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eAt the top, we have imported the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint class we have just created. If we do not import it, we'll get errors in our application because the component in which we are trying to use this class does not recognize it yet. The period signs\u003ccode\u003e ... \u003c/code\u003eare just to show that we do not change the code before the \u003cem\u003eAppComponent\u003c/em\u003e class. Inside the \u003cem\u003eAppComponent\u003c/em\u003e class, we have created an object \u003ccode\u003egoals\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and attributed it to the \u003ccode\u003eGoal\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e blueprint and then defined the array of goals each with its ID and name.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we check our browser now, the application is not broken but it does not show us the actual goals. It shows us the text  [object Object]. This means that the browser can recognize that we want to display goal objects but our HTML code cannot display anything in specific, neither the id nor the name.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo display the goal name for each item in the list, we change our HTML template code to point us to the goal name instead of the goal object.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e        {{goal.name}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ci\u003e\u003c/i\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003eWhen we check our browser, we now see the goal names in the list. For practice, display the goal ID along with the goal name.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eNgIf Directive\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's take a look at another directive in Angular known as \u003c/span\u003e\u003cstrong\u003eNgIf\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e directive. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.html\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;My Goals\u0026lt;/\u003cstrong\u003eh1\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ehr\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e      \u0026lt;\u003cstrong\u003eli\u003c/strong\u003e *ngFor='let goal of goals'\u0026gt;\u003cbr\u003e        {{goal.name}}\u003cbr\u003e      \u0026lt;/\u003cstrong\u003eli\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;/\u003cstrong\u003eul\u003c/strong\u003e\u0026gt;\u003cbr\u003e  \u0026lt;\u003cstrong\u003ep\u003c/strong\u003e *ngIf='goals.length \u0026gt; 5'\u0026gt;Your goals are too many\u0026lt;/\u003cstrong\u003ep\u003c/strong\u003e\u0026gt;\u003cbr\u003e\u0026lt;/\u003cstrong\u003ediv\u003c/strong\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003eWe have added a \u0026lt;p\u0026gt; tag and defined the directive logic in it. Here, we check if the length of the goals array is greater than five, and when it is, we display the text in the paragraph tag. When we check our browser now, the text is displayed because we have 6 goals in the array. Delete one goal in the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esrc/app/app.component.ts \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003efile and check your browser, the text does not appear because the goals are not more than five. This directive checks if a certain condition is met and performs an action based on that condition.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-two-day-project","title":"Wednesday: Two Day Project","type":"WikiPage","content":"\u003ch2\u003eTwo Day Project\u003c/h2\u003e\r\n\u003cp id=\"e2f4\" class=\"graf graf--p graf-after--figure\"\u003eFor the next two days, you will be creating a\u003cspan\u003e \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://giphy.com/\" target=\"_blank\" data-href=\"https://giphy.com/\"\u003egiphy website\u003c/a\u003e replica\u003cspan\u003e, using the \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://api.giphy.com/\" target=\"_blank\" data-href=\"https://api.giphy.com/\"\u003egiphy api\u003c/a\u003e. By the end of the two days, your app should \u003c/p\u003e\r\n\u003cul class=\"postList\"\u003e\r\n\u003cli id=\"e163\" class=\"graf graf--li graf-after--p\"\u003edisplay trending gifs on app load shown in a column/grid\u003c/li\u003e\r\n\u003cli id=\"2d96\" class=\"graf graf--li graf-after--li\"\u003ehave an input which allows you to search for specific gifs\u003c/li\u003e\r\n\u003cli id=\"6fce\" class=\"graf graf--li graf-after--li\"\u003eat the bottom of the results, there is a ‘load more’ button, which gets more gifs using that search term.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eUse the concepts you have been learning in Angular to build up the application. Make sure the application is at portfolio quality. If you have some time left off you can experiment by adding some extra features like sharing on social media.\u003c/p\u003e\r\n\u003cp id=\"5e3d\" class=\"graf graf--p graf-after--li\"\u003e \u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"i3621b355254a71e759c57f168cf38246","title":"Friday: Independent Project-Github","type":"Assignment","content":"","submissionTypes":null,"graded":true,"pointsPossible":null,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i8e407f3a449f7288221a69acd4fb4549","title":"Friday: Independent Project-Quotes","type":"Assignment","content":"\u003ch2\u003eQuotes\u003c/h2\u003e\r\n\u003cp\u003eThis weeks project is to create an application where users can create quotes and have those quotes voted on whether they are terrible or are inspirational. \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eUser Requirements\u003c/h3\u003e\r\n\u003cp\u003eAs a user I would like to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new quote.\u003c/li\u003e\r\n\u003cli\u003eUpvote or downvote a quote.\u003c/li\u003e\r\n\u003cli\u003eDelete a quote\u003c/li\u003e\r\n\u003cli\u003eSee the number of upvotes and number of downvotes for each quote.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eProject Objectives\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour Project should be created using the Angular CLI.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom model class for the quote\u003c/li\u003e\r\n\u003cli\u003eYour project should have a custom\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirective\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto highlight the quote that has the highest upvotes.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a form component that has input sections for the quote, the author, and the person who submitted the quote.\u003c/li\u003e\r\n\u003cli\u003eEach quote must begin with an initial upvote and downvote value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eYour project should have a component to display the quote and a component to display quote details. For example, the quote details could have the author of the quote and the votes it has.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat shows how much time has passed since the quote was created. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour app must be of high quality in terms of basic functionality and it should be visually appealing.\u003c/li\u003e\r\n\u003cli\u003eYou must have a well-documented README document that gives a brief description of your application, How it works, How to install your application, A link to the deployed website and a license section.\u003c/li\u003e\r\n\u003cli\u003eYour project must be deployed and a link to the deployed website should be submitted.\u003c/li\u003e\r\n\u003cli\u003eYour project should have regular, well-defined commits with clear messages.\u003c/li\u003e\r\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":22.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i1434982cf934c55eda9c0280e7c2b6d0","title":"Friday: IP review","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i929ae7ef529a88398a0eebb1dba48a5a","title":"Roll Call Attendance","type":"Assignment","content":null,"submissionTypes":"an external tool","graded":true,"pointsPossible":100.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[],"quizzes":[],"files":[{"type":"file","name":"VSTS_Install_angula-cli.png","size":21058,"files":null},{"type":"file","name":"VSTS_template page.png","size":105144,"files":null},{"type":"file","name":"Azure portal.png","size":102597,"files":null},{"type":"file","name":"Authorize with a github personal token.png","size":76927,"files":null},{"type":"file","name":"404page.png","size":94551,"files":null},{"type":"file","name":"githubgeneratetoken.png","size":39684,"files":null},{"type":"file","name":"VSTS_Install_packages.png","size":22545,"files":null},{"type":"file","name":"VSTS_Build.png","size":18815,"files":null},{"type":"file","name":"Screenshot from 2018-06-28 13-00-58.png","size":72493,"files":null},{"type":"file","name":"ng-initial-folder-structure.png","size":46680,"files":null},{"type":"file","name":"MVC.png","size":39318,"files":null},{"type":"file","name":"VSTS_Azure(1).png","size":40597,"files":null},{"type":"file","name":"VSTS_npm_install .png","size":19801,"files":null},{"type":"file","name":"Selection_002.png","size":82657,"files":null},{"type":"file","name":"VSTS_build(4).png","size":77473,"files":null},{"type":"file","name":"azure_portal_app_settings.png","size":125034,"files":null},{"type":"file","name":"VSTS_Build_complete.png","size":143940,"files":null},{"type":"file","name":"githubsettings.png","size":20128,"files":null},{"type":"file","name":"Selection_003.png","size":28235,"files":null},{"type":"file","name":"githublistofoptions.png","size":183210,"files":null},{"type":"file","name":"VSTS_ADD_TASK.png","size":103253,"files":null},{"type":"file","name":"VSTS_tasks.png","size":56293,"files":null},{"type":"file","name":"VSTS_azure (2).png","size":29572,"files":null}]}